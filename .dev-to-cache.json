[{"id":640940,"title":"The easiest way to download SVGs from a website","description":"Usually, when adding icons to a website, I'll use React-icons. There are times, however, when I prefe...","publishedAt":"2021-03-23T01:37:09.671Z","devToSlug":"the-easiest-way-to-download-svgs-from-a-website-3og9","devToPath":"/jameswallis/the-easiest-way-to-download-svgs-from-a-website-3og9","devToURL":"https://dev.to/jameswallis/the-easiest-way-to-download-svgs-from-a-website-3og9","commentsCount":0,"publicReactionsCount":17,"positiveReactionsCount":17,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--7o-Fh_kc--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gymmq8loeyruuuzndjo1.png","tags":["beginners","webdev","tutorial","todayilearned"],"canonical":"https://wallis.dev/blog/how-to-download-svgs-from-websites","collectionId":-1,"slug":"how-to-download-svgs-from-websites","markdown":"Usually, when adding icons to a website, I'll use [React-icons](https://react-icons.github.io/react-icons/). There are times, however, when I prefer to copy an exact SVG from a website. Downloading an SVG isn't as easy as downloading an image on a website. Fortunately, [SVG Export](https://svgexport.io/) extracted them for me.\n\n## The problem\nEver use inspect element to download images that you're unable to right-click and either save or open? You'll likely have noticed that with SVGs it's not easy to download them from a website. - or at least I did when I was attempting to \"clone\" a webpage for my latest project.\n\nTake the Dev.to logo that is visible on every page on Dev.to, for example. Right-clicking on that doesn't give you the option to open it in a new tab or save it. Moreover, using inspect element only gives you the potentially huge SVG tags, leaving you to work out where the SVG begins and ends in the page's HTML.\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6h4aowgsjcg73hzounl.png\">\n  <figcaption>Unable to open or download the Dev.to icon SVG!</figcaption>\n</figure>\n\n## The solution\n\nEnter [SVG Export](https://svgexport.io/), by [Stephen Delaney](https://twitter.com/delanebob) is a browser extension [for Google Chrome](https://chrome.google.com/webstore/detail/svg-export/naeaaedieihlkmdajjefioajbbdbdjgp/related?hl=en-GB) and [Mozilla Firefox](https://addons.mozilla.org/en-US/firefox/addon/svg-export). \n\nAfter installing the extension, clicking the extension icon will trigger SVG Export to extract all available SVGs on your current webpage, ensuring their inline styles are kept. A new tab will be opened displaying all SVGs. From there, locate the SVGs you're after and either download the SVG as a file, copy it as code or paste it into your favourite design tools like Sketch, Figma or Framer.\n\nTo download the Dev.to icon mentioned above, I simply opened any page on [Dev.to](https://dev.to), clicked the SVG Export icon to start the extract, and finally located it in the newly opened tab.\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3lzqjvt09is8niudrsz.gif\">\n  <figcaption>SVG Export in action</figcaption>\n</figure>\n\n## Round up\n\nIn this post, I demonstrated how I was able to easily extract an SVG from a webpage using [SVG Export](https://svgexport.io/).\n\nDo you have another, perhaps better, method of downloading SVGs from websites? If you do, let me know in the comments 👇\n\nIf this article has helped, drop a reaction!\n\nThanks for reading!\n\n\n","html":"<p>Usually, when adding icons to a website, I'll use <a href=\"https://react-icons.github.io/react-icons/\">React-icons</a>. There are times, however, when I prefer to copy an exact SVG from a website. Downloading an SVG isn't as easy as downloading an image on a website. Fortunately, <a href=\"https://svgexport.io/\">SVG Export</a> extracted them for me.</p>\n<h2>The problem</h2>\n<p>Ever use inspect element to download images that you're unable to right-click and either save or open? You'll likely have noticed that with SVGs it's not easy to download them from a website. - or at least I did when I was attempting to \"clone\" a webpage for my latest project.</p>\n<p>Take the Dev.to logo that is visible on every page on Dev.to, for example. Right-clicking on that doesn't give you the option to open it in a new tab or save it. Moreover, using inspect element only gives you the potentially huge SVG tags, leaving you to work out where the SVG begins and ends in the page's HTML.</p>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6h4aowgsjcg73hzounl.png\">\n  <figcaption>Unable to open or download the Dev.to icon SVG!</figcaption>\n</figure>\n<h2>The solution</h2>\n<p>Enter <a href=\"https://svgexport.io/\">SVG Export</a>, by <a href=\"https://twitter.com/delanebob\">Stephen Delaney</a> is a browser extension <a href=\"https://chrome.google.com/webstore/detail/svg-export/naeaaedieihlkmdajjefioajbbdbdjgp/related?hl=en-GB\">for Google Chrome</a> and <a href=\"https://addons.mozilla.org/en-US/firefox/addon/svg-export\">Mozilla Firefox</a>.</p>\n<p>After installing the extension, clicking the extension icon will trigger SVG Export to extract all available SVGs on your current webpage, ensuring their inline styles are kept. A new tab will be opened displaying all SVGs. From there, locate the SVGs you're after and either download the SVG as a file, copy it as code or paste it into your favourite design tools like Sketch, Figma or Framer.</p>\n<p>To download the Dev.to icon mentioned above, I simply opened any page on <a href=\"https://dev.to\">Dev.to</a>, clicked the SVG Export icon to start the extract, and finally located it in the newly opened tab.</p>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3lzqjvt09is8niudrsz.gif\">\n  <figcaption>SVG Export in action</figcaption>\n</figure>\n<h2>Round up</h2>\n<p>In this post, I demonstrated how I was able to easily extract an SVG from a webpage using <a href=\"https://svgexport.io/\">SVG Export</a>.</p>\n<p>Do you have another, perhaps better, method of downloading SVGs from websites? If you do, let me know in the comments 👇</p>\n<p>If this article has helped, drop a reaction!</p>\n<p>Thanks for reading!</p>\n"},{"id":632084,"title":"50,000 views milestone, continuing my blogging journey","description":"🎉 Last week I hit 50,000 total views! 🎉  🔥 And also 1000 total reactions! 🔥  🚀 And was awarded the Ne...","publishedAt":"2021-03-16T23:59:20.409Z","devToSlug":"50-000-views-milestone-continuing-my-blogging-journey-4832","devToPath":"/jameswallis/50-000-views-milestone-continuing-my-blogging-journey-4832","devToURL":"https://dev.to/jameswallis/50-000-views-milestone-continuing-my-blogging-journey-4832","commentsCount":0,"publicReactionsCount":8,"positiveReactionsCount":8,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--z-RWu7rI--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7gt5lz0627qf87llx36.png","tags":["devjournal","yearinreview","writing","gratitude"],"canonical":"https://wallis.dev/blog/50000-devto-view-milestone","collectionId":-1,"slug":"50000-devto-view-milestone","markdown":"🎉 Last week I hit 50,000 total views! 🎉\n\n🔥 And also 1000 total reactions! 🔥\n\n🚀 And was awarded the Next.js badge! 🚀\n\n**I'm buzzing.** I wanted to reach 50,000 total views by June this year but it's the start of March and I've already achieved it - I thought for sure that it would be a close call given the time it took to reach 20,000 views. The icing on the cake? [My latest post](https://dev.to/jameswallis/adding-a-blog-with-a-dev-to-backend-to-a-static-next-js-website-with-canonical-urls-1i9g) earned me the Next.js author of the week badge, which I've been eyeing for ages!\n\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/blSTtZehjAZ8I/giphy.gif\">\n\nBack in January, when I reached 20,000 I wrote [a milestone post](https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj) that discussed what I'd learnt about blogging so far. In this post, I'll reflect on it and will attempt to understand **how I've more than doubled my total views in a third of the time**.\n\n## Reviewing [my 20,000 milestone post](https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj)\n### What I'd learnt a few months into posting\nIn the last post, I created a list of things I'd learnt over the course of my first few months of blogging. Here are some of the points that I still believe are important:\n* **Post titles matter.** I still believe this and carefully word titles trying to include \"How to\" or some type of call to action to entice the reader.\n* **Keep posting.** I've acquired the 8-week posting streak badge and (think) I'm on track for the 16-week badge.\n* **Don't be discouraged by a low amount of reactions.** While I'm now making posts that gain a considerable amount of attention (for me), I think about half of those that I've posted in the past few months have had ~10 reactions.\n* **Post what you find interesting.** This is a good one! My most popular posts have been about rebuilding my website to use Dev.to as a CMS.\n\n### What I planned to do next\nAt the end of the post, I came up with a plan to reach 50,000 views.\n\nThis is what I said...\n\n> In the next six months, I'm aiming to reach 50,000 views. And, by the end of the year, I want to achieve 100,000 views.\nTo achieve this I will:\n* Create more posts!\n* Update old posts with new content and correcting tutorials where the underlying software has changed.\n* Publicise my posts across the web and share them on Linkedin and other social sites. So far I haven't advertised them at all and rely on followers on dev.to, it's algorithm and Google rankings to gain views on my articles. *This would be beneficial to gain more views, but means advertising my writing to people that know me - so we'll see whether I actually do it or not.*\n\n...and after some reflection, I can tell you that I haven't *really* done any of them. I've created more posts and updated a couple of tutorials with corrections. Yet, here I am hitting 50,000 views?\n\n## So what have I done instead?\n* **Been persistent.** Currently, I'm creating a post about once a week. This has helped me grow to ~700 followers, that's a lot of people to receive a notification each time I make a post. Additionally, I believe that it's helped me naturally improve the quality of my posts as I gain more experience.\n* **Categorised my posts.** Over the past couple of months I've written three types of posts. Sticking to three formats has led to a smooth experience when I write a post as I have a format that I can follow for each type. If I want to, I will deviate from the formats, but they help to get me started.\n    1. Portfolio items where I write about past projects (these show up on my website under the `/portfolio` path, [more info here](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje)).\n    2. \"5 things to check out\". I've written about [5 Next.js features](https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e), [5 places to get pre-built Tailwind CSS components](https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e). These posts are fun to write as I have to find 5 things to write about so I'm learning while I'm writing.\n    3. Projects created with a post topic in mind. My two most popular posts have both been about [rewriting my website to use Dev.to as a CMS](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje). While this project has made it ten times easier to add posts to my website (with the canonical URL pointing to my site), I knew before starting development that it would be interesting to write about - and that bet has paid off.\n* **Varied my posts.** Posting every week can be exhausting. Some weeks I'll write a shorter post, like this one, and other weeks I'll set time aside to focus on a longer, tutorial style post.\n\n## What's next?\n🎯 100,000 views 🎯\n\nReaching 50,000 views isn't the end of my blogging journey. My next goals are to reach:\n* 100,000 total views\n* 2,000 total reactions\n* 10,000 views on a single post\n* The 16 week streak badge\n\nTo achieve this I will:\n* Create more posts!\n* Cross-post to other blogging sites like [Medium](https://medium.com/@james-wallis) and [Hashnode](https://hashnode.wallis.dev). *Both seem a lot slower than Dev.to to gain views on posts but I want to persist and add most of my articles there - we'll see how it works out!*\n* Publicise my posts. I'll start with LinkedIn and then see how I get on. *I know I said this last time but I really should start to do this. I've been lucky enough to have been shared by the [Dev Community](https://twitter.com/ThePracticalDev/status/1369800742131884033?s=20) Twitter account so I really should do the same!*\n     * I'm curious, how much success do you have on other blogging platforms like Medium and Hashnode? Do you use any others?\n\n## Summary\nI'm continuing to enjoy writing, posting and interacting with members of the Dev.to community. Though, I have to admit I'm excited to achieve the 16-week streak badge so I can have a little break - I wish there was a way to see if am on track.\n\nLet me know what you think about my blogging experience and if you have any advice for me!\n\nWhere do you cross-post to?\n\nThanks for reading! Hope you're having a great 2021!\n\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/WZSCbqzHspAZA7gweg/giphy.gif\">\n\n\n","html":"<p>🎉 Last week I hit 50,000 total views! 🎉</p>\n<p>🔥 And also 1000 total reactions! 🔥</p>\n<p>🚀 And was awarded the Next.js badge! 🚀</p>\n<p><strong>I'm buzzing.</strong> I wanted to reach 50,000 total views by June this year but it's the start of March and I've already achieved it - I thought for sure that it would be a close call given the time it took to reach 20,000 views. The icing on the cake? <a href=\"https://dev.to/jameswallis/adding-a-blog-with-a-dev-to-backend-to-a-static-next-js-website-with-canonical-urls-1i9g\">My latest post</a> earned me the Next.js author of the week badge, which I've been eyeing for ages!</p>\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/blSTtZehjAZ8I/giphy.gif\">\n<p>Back in January, when I reached 20,000 I wrote <a href=\"https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj\">a milestone post</a> that discussed what I'd learnt about blogging so far. In this post, I'll reflect on it and will attempt to understand <strong>how I've more than doubled my total views in a third of the time</strong>.</p>\n<h2>Reviewing <a href=\"https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj\">my 20,000 milestone post</a></h2>\n<h3>What I'd learnt a few months into posting</h3>\n<p>In the last post, I created a list of things I'd learnt over the course of my first few months of blogging. Here are some of the points that I still believe are important:</p>\n<ul>\n<li><strong>Post titles matter.</strong> I still believe this and carefully word titles trying to include \"How to\" or some type of call to action to entice the reader.</li>\n<li><strong>Keep posting.</strong> I've acquired the 8-week posting streak badge and (think) I'm on track for the 16-week badge.</li>\n<li><strong>Don't be discouraged by a low amount of reactions.</strong> While I'm now making posts that gain a considerable amount of attention (for me), I think about half of those that I've posted in the past few months have had ~10 reactions.</li>\n<li><strong>Post what you find interesting.</strong> This is a good one! My most popular posts have been about rebuilding my website to use Dev.to as a CMS.</li>\n</ul>\n<h3>What I planned to do next</h3>\n<p>At the end of the post, I came up with a plan to reach 50,000 views.</p>\n<p>This is what I said...</p>\n<blockquote>\n<p>In the next six months, I'm aiming to reach 50,000 views. And, by the end of the year, I want to achieve 100,000 views.</p>\n</blockquote>\n<p>To achieve this I will:</p>\n<ul>\n<li>Create more posts!</li>\n<li>Update old posts with new content and correcting tutorials where the underlying software has changed.</li>\n<li>Publicise my posts across the web and share them on Linkedin and other social sites. So far I haven't advertised them at all and rely on followers on dev.to, it's algorithm and Google rankings to gain views on my articles. <em>This would be beneficial to gain more views, but means advertising my writing to people that know me - so we'll see whether I actually do it or not.</em></li>\n</ul>\n<p>...and after some reflection, I can tell you that I haven't <em>really</em> done any of them. I've created more posts and updated a couple of tutorials with corrections. Yet, here I am hitting 50,000 views?</p>\n<h2>So what have I done instead?</h2>\n<ul>\n<li><strong>Been persistent.</strong> Currently, I'm creating a post about once a week. This has helped me grow to ~700 followers, that's a lot of people to receive a notification each time I make a post. Additionally, I believe that it's helped me naturally improve the quality of my posts as I gain more experience.</li>\n<li><strong>Categorised my posts.</strong> Over the past couple of months I've written three types of posts. Sticking to three formats has led to a smooth experience when I write a post as I have a format that I can follow for each type. If I want to, I will deviate from the formats, but they help to get me started.\n<ol>\n<li>Portfolio items where I write about past projects (these show up on my website under the <code>/portfolio</code> path, <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">more info here</a>).</li>\n<li>\"5 things to check out\". I've written about <a href=\"https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e\">5 Next.js features</a>, <a href=\"https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e\">5 places to get pre-built Tailwind CSS components</a>. These posts are fun to write as I have to find 5 things to write about so I'm learning while I'm writing.</li>\n<li>Projects created with a post topic in mind. My two most popular posts have both been about <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">rewriting my website to use Dev.to as a CMS</a>. While this project has made it ten times easier to add posts to my website (with the canonical URL pointing to my site), I knew before starting development that it would be interesting to write about - and that bet has paid off.</li>\n</ol>\n</li>\n<li><strong>Varied my posts.</strong> Posting every week can be exhausting. Some weeks I'll write a shorter post, like this one, and other weeks I'll set time aside to focus on a longer, tutorial style post.</li>\n</ul>\n<h2>What's next?</h2>\n<p>🎯 100,000 views 🎯</p>\n<p>Reaching 50,000 views isn't the end of my blogging journey. My next goals are to reach:</p>\n<ul>\n<li>100,000 total views</li>\n<li>2,000 total reactions</li>\n<li>10,000 views on a single post</li>\n<li>The 16 week streak badge</li>\n</ul>\n<p>To achieve this I will:</p>\n<ul>\n<li>Create more posts!</li>\n<li>Cross-post to other blogging sites like <a href=\"https://medium.com/@james-wallis\">Medium</a> and <a href=\"https://hashnode.wallis.dev\">Hashnode</a>. <em>Both seem a lot slower than Dev.to to gain views on posts but I want to persist and add most of my articles there - we'll see how it works out!</em></li>\n<li>Publicise my posts. I'll start with LinkedIn and then see how I get on. <em>I know I said this last time but I really should start to do this. I've been lucky enough to have been shared by the <a href=\"https://twitter.com/ThePracticalDev/status/1369800742131884033?s=20\">Dev Community</a> Twitter account so I really should do the same!</em>\n<ul>\n<li>I'm curious, how much success do you have on other blogging platforms like Medium and Hashnode? Do you use any others?</li>\n</ul>\n</li>\n</ul>\n<h2>Summary</h2>\n<p>I'm continuing to enjoy writing, posting and interacting with members of the Dev.to community. Though, I have to admit I'm excited to achieve the 16-week streak badge so I can have a little break - I wish there was a way to see if am on track.</p>\n<p>Let me know what you think about my blogging experience and if you have any advice for me!</p>\n<p>Where do you cross-post to?</p>\n<p>Thanks for reading! Hope you're having a great 2021!</p>\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/WZSCbqzHspAZA7gweg/giphy.gif\">\n"},{"id":574504,"title":"How to add a blog using Dev.to as a CMS to a Next.js website","description":"Preface   I've been posting on Dev.to for a few months now. I love the platform, the editor,...","publishedAt":"2021-03-10T00:00:24.976Z","devToSlug":"adding-a-blog-with-a-dev-to-backend-to-a-static-next-js-website-with-canonical-urls-1i9g","devToPath":"/jameswallis/adding-a-blog-with-a-dev-to-backend-to-a-static-next-js-website-with-canonical-urls-1i9g","devToURL":"https://dev.to/jameswallis/adding-a-blog-with-a-dev-to-backend-to-a-static-next-js-website-with-canonical-urls-1i9g","commentsCount":11,"publicReactionsCount":155,"positiveReactionsCount":155,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--VucpdtEo--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h45bfs9rkkp1awbw5cj.png","tags":["showdev","javascript","react","nextjs"],"canonical":"https://wallis.dev/blog/adding-a-devto-powered-blog-to-a-nextjs-website","collectionId":-1,"slug":"adding-a-devto-powered-blog-to-a-nextjs-website","markdown":"## Preface\nI've been [posting on Dev.to for a few months now](https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj). I love the platform, the editor, the ability to draft, edit and publish an article making it available to [the millions of Dev.to users](https://dev.to/devteam/the-future-of-dev-160n).\n\nRecently, I decided that I wanted to present them on [my own website](https://wallis.dev). After researching different ways to achieve this, I concluded using the Dev.to API to create the blog section of my website would be the perfect solution. I decided that articles would only show up on my website if I'd added a canonical URL to the article on Dev.to - meaning my website is seen as the source of the article (even though it was written on Dev.to).\n\nContinuing to use Dev.to also means that I don't need to configure storage for saving the articles or any images used. Additionally, I can take advantage of the built-in RSS feed which other blogging sites can read to automatically import my articles.\n\n### I came up with the following list of requirements:\n1. **Use the Dev.to API to fetch all my articles** and display them on my website.\n1. **Fetch and render each article at build time** to ensure the website would be fast and to ensure good SEO for the individual blog pages. Using dynamic pages would make the website load slower as it would query the Dev.to API on the client-side and also mean that I would have the same SEO data, such as page title, for each blog page.\n1. **Set the canonical URL of an article on Dev.to and have that be the article's URL on my website**. I wanted to continue to use the Dev.to editor to write and manage my articles, so they should only show on my website once I've added a canonical URL.\n1. **Have a *nice* URL for the blog posts** on my website that I would be in complete control of. Neither the post ID nor the Dev.to path to the article.\n1. **Rebuild each time an article is created or updated**. This was crucial as the blog would be static - I didn't want to press the `rebuild` each time I changed something.\n\n***I was able to achieve all of this using a combination of Next.js dynamic pages, Vercel deploy hooks and the public Dev.to API.***\n\n---\n\n## Setting up the project\n\n### Key technologies used\n1. [TypeScript](https://www.typescriptlang.org/) - if you prefer plain JavaScript for code examples, [this GitHub repository](https://github.com/james-wallis/dev-to-blog) has the same functionality as described below but is purely JavaScript.\n1. [Next.js](https://nextjs.org/), React.js etc (required to create a Next.js app).\n1. [Tailwind CSS](https://tailwindcss.com/), [Tailwind CSS Typography plugin](https://github.com/tailwindlabs/tailwindcss-typography) (for styling).\n1. [Remark Markdown parser](https://github.com/remarkjs/remark) and plugins such as [remark-html](https://github.com/remarkjs/remark-html) to convert the Markdown returned by the Dev.to API to HTML. Other plugins I use enable features such as [code highlighting](https://github.com/remarkjs/remark-highlight.js), [GitHub flavour Markdown compatibility](https://github.com/remarkjs/remark-gfm) (for ~~strikethrough~~ etc) and [stripping out Front Matter from the displayed HTML](https://github.com/remarkjs/remark-highlight.js).\n1. The [Dev.to API](https://docs.dev.to/api/) and it's `https://dev.to/api/articles/me` endpoint.\n1. [Vercel deploy hooks](https://vercel.com/docs/more/deploy-hooks). I use Vercel to host my Next.js site and their deploy hooks allow me to rebuild my website automatically when an article is added or edited on Dev.to.\n\nTo see all the packages I'm currently using on my website, [check out the `package.json` on GitHub](https://github.com/james-wallis/wallis.dev/blob/master/package.json).\n\n### The two Next.js functions that run my website\nMy personal website is built using Next.js. To ensure that all content continued to be generated at build time, I used two built-in Next.js functions that can be used to fetch data for pre-rendering. These are: \n* [`getStaticProps`](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation) - fetch data from a source (think API or file) and pass it into the component via props.\n* [`getStaticPaths`](https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation)- provides the ability to use dynamic routes with a static site. \n\nI'll be using both functions to make the dynamic article page called `[slug].ts` - the square brackets denote that it is a [Next.js dynamic page](https://nextjs.org/docs/routing/dynamic-routes) and the name `slug` is the name of the parameter that will be passed into `getStaticProps` from `getStaticPaths`.\n\n### How do I determine which articles appear on my website?\nFor articles to appear on my website they have to have a canonical URL pointing at `https://wallis.dev/blog`. \n\nWhenever I refer to the page `slug` I'm referring to the last section of the canonical URL (after `/blog`). When reading the canonical URL from the Dev.to API I use the following function to convert the URL to the slug. \n\n```javascript\nconst websiteURL = 'https://wallis.dev/blog/';\n\n// Takes a URL and returns the relative slug to your website\nexport const convertCanonicalURLToRelative = (canonicalURL) => {\n    return canonicalURL.replace(websiteURL, '');\n}\n```\n\nWhen I pass `https://wallis.dev/blog/a-new-article` to `convertCanonicalURLToRelative` it will return the `slug` `a-new-article`.\n\n---\n\n## How to add a blog with using Dev.to as a backend\n\n### The individual article pages (`/blog/${slug}`)\n\n#### Overview\nEach individual article page is generated at build time using the `getStaticPaths` Next.js function that fetches all my Dev.to published articles, and saves them to a cache file. `getStaticProps` then fetches an individual article from the cache and passes it into the page component via its props. \n\n*A cache file must be used* because [Next.js doesn't allow passing data from `getStaticPaths` to `getStaticProps`](https://github.com/vercel/next.js/discussions/11272) - aside from the page `slug`. For this reason, the page slug is used to fetch an article from the cache file.\n\n#### Flow Diagram\nThe diagram below should explain the process that is followed when creating dynamic pages through Next.js using the `getStaticPaths` and `getStaticProps` functions. It outlines the most important function calls, briefly explains what they do, and what is returned.\n\n![Article Page Diagram](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrvoolf5bhth0ri2lzd.jpg)\n\n#### Implementation\n[View on GitHub](https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx)\n\nBelow you will find the code that dynamically creates each article page.\n\n```typescript\nimport fs from 'fs';\nimport path from 'path';\n\nimport Layout from '../../components/Layout';\nimport PageTitle from '../../components/PageTitle';\nimport IArticle from '../../interfaces/IArticle';\nimport { getAllBlogArticles, getArticleFromCache } from '../../lib/devto';\n\nconst cacheFile = '.dev-to-cache.json';\n\ninterface IProps {\n    article: IArticle\n}\n\nconst ArticlePage = ({ article }: IProps) => (\n    <Layout title={article.title} description={article.description}>\n        <img\n            src={article.coverImage}\n            alt={`Cover image for ${article.title}`}\n            className=\"md:mt-6 lg:mt-10 xl:mt-14 h-40 sm:h-48 md:h-52 lg:h-64 xl:h-68 2xl:h-80 mx-auto\"\n        />\n        <PageTitle title={article.title} center icons={false} />\n        <section className=\"mt-10 font-light leading-relaxed w-full flex flex-col items-center\">\n            <article className=\"prose dark:prose-dark lg:prose-lg w-full md:w-5/6 xl:w-9/12\" dangerouslySetInnerHTML={{ __html: article.html }} />\n        </section>\n    </Layout>\n\n)\n\nexport async function getStaticProps({ params }: { params: { slug: string }}) {\n    // Read cache and parse to object\n    const cacheContents = fs.readFileSync(path.join(process.cwd(), cacheFile), 'utf-8');\n    const cache = JSON.parse(cacheContents);\n\n    // Fetch the article from the cache\n    const article: IArticle = await getArticleFromCache(cache, params.slug);\n\n    return { props: { article } }\n}\n\nexport async function getStaticPaths() {\n    // Get the published articles and cache them for use in getStaticProps\n    const articles: IArticle[] = await getAllBlogArticles();\n\n    // Save article data to cache file\n    fs.writeFileSync(path.join(process.cwd(), cacheFile), JSON.stringify(articles));\n\n    // Get the paths we want to pre-render based on posts\n    const paths = articles.map(({ slug }) => {\n        return {\n            params: { slug },\n        }\n    })\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n\nexport default ArticlePage\n```\n\nThe flow diagram above combined with the comments throughout the code should enable a full understanding of the code. If you have any questions, comment below.\n\nYou'll notice that two functions are called from the `lib/dev.ts` file. `getArticleFromCache` does what it suggests, it finds an article in the cache and returns it. [`getAllBlogArticles`](https://github.com/james-wallis/wallis.dev/blob/master/lib/devto.ts#L60), on the other hand, is the function that fetches all my articles from Dev.to and converts the supplied markdown into HTML - using functions from [`lib/markdown.ts`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts).\n\n##### [Devto.ts](https://github.com/james-wallis/wallis.dev/blob/master/lib/devto.ts)\n\n```typescript\nimport axios, { AxiosResponse } from 'axios';\nimport IArticle from '../interfaces/IArticle';\nimport ICachedArticle from '../interfaces/ICachedArticle';\nimport { convertMarkdownToHtml, sanitizeDevToMarkdown } from './markdown';\n\nconst username = 'jameswallis'; // My Dev.to username\nconst blogURL = 'https://wallis.dev/blog/'; // Prefix for article pages\n\n// Takes a URL and returns the relative slug to your website\nexport const convertCanonicalURLToRelative = (canonical: string) => {\n    return canonical.replace(blogURL, '');\n}\n\n// Takes the data for an article returned by the Dev.to API and:\n// * Parses it into the IArticle interface\n// * Converts the full canonical URL into a relative slug to be used in getStaticPaths\n// * Converts the supplied markdown into HTML (it does a little sanitising as Dev.to allows markdown headers (##) with out a trailing space\nconst convertDevtoResponseToArticle = (data: any): IArticle => {\n    const slug = convertCanonicalURLToRelative(data.canonical_url);\n    const markdown = sanitizeDevToMarkdown(data.body_markdown);\n    const html = convertMarkdownToHtml(markdown);\n\n    const article: IArticle = {\n        // parse into article object\n    }\n    return article;\n}\n\n// Filters out any articles that are not meant for the blog page\nconst blogFilter = (article: IArticle) => article.canonical.startsWith(blogURL);\n\n// Get all users articles from Dev.to\n// Use the authenticated Dev.to article route to get the article markdown included\nexport const getAllArticles = async () => {\n    const params = { username, per_page: 1000 };\n    const headers = { 'api-key': process.env.DEVTO_APIKEY };\n    const { data }: AxiosResponse = await axios.get(`https://dev.to/api/articles/me`, { params, headers });\n    const articles: IArticle[] = data.map(convertDevtoResponseToArticle);\n    return articles;\n}\n\n// Get all articles from Dev.to meant for the blog page\nexport const getAllBlogArticles = async () => {\n    const articles = await getAllArticles();\n    return articles.filter(blogFilter);\n}\n\n// Get my latest published article meant for the blog (and portfolio) pages\nexport const getLatestBlogAndPortfolioArticle = async () => {\n    const articles = await getAllArticles();\n    const [latestBlog] = articles.filter(blogFilter);\n    const [latestPortfolio] = articles.filter(portfolioFilter); // ignore this! It's meant for another page (see the wallis.dev GitHub repository for more information)\n    return [latestBlog, latestPortfolio];\n}\n\n// Gets an article from Dev.to using the ID that was saved to the cache earlier\nexport const getArticleFromCache = async (cache: ICachedArticle[], slug: string) => {\n    // Get minified post from cache\n    const article = cache.find(cachedArticle => cachedArticle.slug === slug) as IArticle;\n    return article;\n}\n```\n\nThe key points to note about the `devto.ts` file is:\n1. I've used the authenticated `https://dev.to/api/articles/me` endpoint to fetch all my articles from Dev.to. This endpoint is the only one that returns all my articles (ok, 1000 max...) and includes the article markdown. Authenticating also gives a slightly higher API limit. \n    * *Previously I used the built-in HTML returned in the `https://dev.to/api/articles/{id}` but I kept hitting the API limit as each build made as many API calls as I had articles*.\n    * Get a Dev.to API Token following the [instructions on the API docs](https://docs.forem.com/api/#section/Authentication/api_key).\n\n1. The `convertDevtoResponseToArticle` function converts the markdown into HTML using a function from the [`lib/markdown.ts`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts).\n\n##### [Markdown.ts](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts)\n\n```typescript\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remarkHtml from 'remark-html';\nimport * as highlight from 'remark-highlight.js';\nimport gfm from 'remark-gfm';\nimport matter from 'gray-matter';\nimport stripHtmlComments from 'strip-html-comments';\n\n// Corrects some Markdown specific to Dev.to\nexport const sanitizeDevToMarkdown = (markdown: string) => {\n    let correctedMarkdown = '';\n\n    // Dev.to sometimes turns \"# header\" into \"#&nbsp;header\"\n    const replaceSpaceCharRegex = new RegExp(String.fromCharCode(160), \"g\");\n    correctedMarkdown = markdown.replace(replaceSpaceCharRegex, \" \");\n\n    // Dev.to allows headers with no space after the hashtag (I don't use # on Dev.to due to the title)\n    const addSpaceAfterHeaderHashtagRegex = /##(?=[a-z|A-Z])/g;\n    return correctedMarkdown.replace(addSpaceAfterHeaderHashtagRegex, '$& ');\n}\n\n// Converts given markdown into HTML\n// Splits the gray-matter from markdown and returns that as well\nexport const convertMarkdownToHtml = (markdown: string) => {\n    const { content } = matter(markdown);\n\n    const html = unified()\n        .use(parse)\n        .use(gfm) // Allow GitHub flavoured markdown\n        .use(highlight) // Add code highlighting\n        .use(remarkHtml) // Convert to HTML\n        .processSync(stripHtmlComments(content)).contents;\n\n    return String(html);\n}\n```\n\nThis file is pretty simple; the comments should explain everything, so I won't add anything more. If you'd like to learn more about using Remark converts with Next.js, you can read my blog titled [\"How to use the Remark Markdown converters with Next.js projects\"](https://dev.to/jameswallis/how-to-use-the-remark-markdown-converters-with-next-js-projects-a8a).\n\n#### Summary\nPhew, that was a lot. Hopefully, I didn't lose you in the code examples and explanations!\n\nEverything above explains how I've built the dynamic article pages on my website. I've included all the code that you'll need to create the dynamic blog pages on your own website.\n\nBy the way, when the code above is compiled it produces an article page such as https://wallis.dev/blog/nextjs-serverside-data-fetching. \n\n![article page screenshot](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewatlfueoo0dqqbxp8zz.png)\n\nLet's move onto the blog overview page ([wallis.dev/blog](https://wallis.dev/blog)).\n\n### The article overview page (`/blog`)\n\nBuilding a page for each of your Dev.to articles at build time is great but how will a user find them without an overview page?! They probably won't!\n\n#### Overview\nThe overview page is much simpler than the dynamic article pages and only uses functions from the `lib/devto.ts` file introduced above. So this section will be shorter than the last.\n\n#### Flow Diagram\nAs before, I've made a diagram to display the process followed when displaying all the article summaries on the overview page. You'll notice that this time I'm only using `getStaticProps` rather than `getStaticProps` and `getStaticPaths`. This is because I'm only loading data for one page rather than creating dynamic pages (which is what `getStaticPaths` allows you to do).\n\n![Overview page diagram](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbyc2vteef4rsmkl74s.jpg)\n\n\n#### Implementation\n[View on GitHub](https://github.com/james-wallis/wallis.dev/blob/master/pages/blog.tsx)\n\n```typescript\nimport Layout from '../components/Layout'\nimport PageTitle from '../components/PageTitle'\nimport Section from '../components/Section'\nimport ArticleCard from '../components/ArticleCard'\nimport IArticle from '../interfaces/IArticle'\nimport { getAllBlogArticles } from '../lib/devto'\n\ninterface IProps {\n    articles: IArticle[]\n}\n\nconst title = \"Blog ✍️\"\nconst subtitle = \"I share anything that may help others, technologies I\\'m using and cool things I\\'ve made.\"\n\nconst BlogPage = ({ articles }: IProps) => (\n    <Layout title={title} description={subtitle}>\n        <PageTitle\n            title={title}\n            subtitle={subtitle}\n        />\n\n        <Section linebreak>\n            {articles.map(({ title, description, publishedAt, tags, canonical }) => (\n                <ArticleCard\n                    key={title}\n                    title={title}\n                    description={description}\n                    date={publishedAt}\n                    tags={tags}\n                    canonical={canonical}\n                />\n            ))}\n        </Section>\n    </Layout>\n)\n\nexport async function getStaticProps() {\n    // Get all the articles that have a canonical URL pointed to your blog\n    const articles = await getAllBlogArticles();\n\n    // Pass articles to the page via props\n    return { props: { articles } };\n}\n\nexport default BlogPage\n```\n\nEssentially the above code:\n1. Loads the articles from the Dev.to API\n1. Passes them into the component\n1. Maps over each article and creates a summary card for each which links to the dynamic article page created in the previous step.\n\nThe overview page looks like this:\n![Overview Page screenshot](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwxqpqfdbldwky0v8zd2.png)\n\n#### Summary\nAmazing, that's the overview page complete! If you're following along you should now have:\n1. Blog pages being created dynamically\n1. An overview page that links to the dynamic blog pages\n\n### Rebuild each time an article is created or updated\nThe final step that I took to create my Dev.to powered website is to set up a Vercel deploy hook. My website is hosted on Vercel so I am able to use a deploy hook to programmatically trigger a rebuild, refreshing the article content in the process.\n\n> Deploy Hooks allow you to create URLs that accept HTTP POST requests in order to trigger deployments and re-run the Build Step.\n- https://vercel.com/docs/more/deploy-hooks\n\nTo trigger the deploy hook, I have created a [Dev.to API webhook](https://docs.forem.com/api/#tag/webhooks) that calls it each time an article is created or updated.\n\n#### Configuring the automatic rebuild\n*A prereq for this section is that you're website needs to be deployed onto Vercel. [I've created instructions on how to do this](https://dev.to/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o).*\n\nTo create a deploy hook, follow [the Vercel documentation](https://vercel.com/docs/more/deploy-hooks) - it's a lot more simple than you'd think.\n\nOnce you have the deploy URL we can use the Dev.to API to create a webhook to trigger it.\n\nYou can do this using `curl` (make sure you add your API_KEY and change the `target_url` to be your Vercel deploy hook URL):\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -H \"api-key: API_KEY\" \\\n  -d '{\"webhook_endpoint\":{\"target_url\":\"https://example.org/webhooks/webhook1\",\"source\":\"DEV\",\"events\":[\"article_created\", \"article_updated\"]}}' \\\n  https://dev.to/api/webhooks\n```\n[For more information, see the Dev.to API docs](https://docs.forem.com/api/#operation/createWebhook).\n\n#### Summary\n\nNice one, now your website will automatically redeploy each time you create or update an article on Dev.to!\n\n## Next steps\n\nI love my website right now and using Dev.to to manage most of its content has made adding content much more efficient than previously. However, there are a couple of things I want to improve in the future:\n* If a user is viewing a blog on Dev.to and it links to another of my articles, the user should stay on Dev.to. But if they're on [wallis.dev](https://wallis.dev), they should stay on it rather than being taken to Dev.to.\n* Another Dev.to user made a comment in another of my articles and made the point that if Dev.to suddenly turned off, I'd lose my articles. However unlikely, I want to set up a system to take daily backups of my articles to mitigate the risk of losing them.\n\n## Round up\nIn this article, I've taken you through the code that allows Dev.to to power my website. If you venture onto my GitHub you'll see that in addition to having a blog section (https://wallis.dev/blog), I also use Dev.to to display my portfolio entries (https://wallis.dev/portfolio). \n\nIf you want more background on why and how I've used the Dev.to API to power my website, [read my initial post discussing it](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).\n\nIf you found this article interesting or it has helped you to use Next.js and the Dev.to API to build your own website using Dev.to as a CMS, drop me a reaction or let me know in the comments!\n\nAnything I can improve? Let me know in the comments.\n\nThanks for reading!\n\nPS, I'm currently deciding whether I should create a tutorial series that will take you through building a Dev.to powered blog from scratch - is this something you would read/follow?","html":"<h2>Preface</h2>\n<p>I've been <a href=\"https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj\">posting on Dev.to for a few months now</a>. I love the platform, the editor, the ability to draft, edit and publish an article making it available to <a href=\"https://dev.to/devteam/the-future-of-dev-160n\">the millions of Dev.to users</a>.</p>\n<p>Recently, I decided that I wanted to present them on <a href=\"https://wallis.dev\">my own website</a>. After researching different ways to achieve this, I concluded using the Dev.to API to create the blog section of my website would be the perfect solution. I decided that articles would only show up on my website if I'd added a canonical URL to the article on Dev.to - meaning my website is seen as the source of the article (even though it was written on Dev.to).</p>\n<p>Continuing to use Dev.to also means that I don't need to configure storage for saving the articles or any images used. Additionally, I can take advantage of the built-in RSS feed which other blogging sites can read to automatically import my articles.</p>\n<h3>I came up with the following list of requirements:</h3>\n<ol>\n<li><strong>Use the Dev.to API to fetch all my articles</strong> and display them on my website.</li>\n<li><strong>Fetch and render each article at build time</strong> to ensure the website would be fast and to ensure good SEO for the individual blog pages. Using dynamic pages would make the website load slower as it would query the Dev.to API on the client-side and also mean that I would have the same SEO data, such as page title, for each blog page.</li>\n<li><strong>Set the canonical URL of an article on Dev.to and have that be the article's URL on my website</strong>. I wanted to continue to use the Dev.to editor to write and manage my articles, so they should only show on my website once I've added a canonical URL.</li>\n<li><strong>Have a <em>nice</em> URL for the blog posts</strong> on my website that I would be in complete control of. Neither the post ID nor the Dev.to path to the article.</li>\n<li><strong>Rebuild each time an article is created or updated</strong>. This was crucial as the blog would be static - I didn't want to press the <code>rebuild</code> each time I changed something.</li>\n</ol>\n<p><em><strong>I was able to achieve all of this using a combination of Next.js dynamic pages, Vercel deploy hooks and the public Dev.to API.</strong></em></p>\n<hr>\n<h2>Setting up the project</h2>\n<h3>Key technologies used</h3>\n<ol>\n<li><a href=\"https://www.typescriptlang.org/\">TypeScript</a> - if you prefer plain JavaScript for code examples, <a href=\"https://github.com/james-wallis/dev-to-blog\">this GitHub repository</a> has the same functionality as described below but is purely JavaScript.</li>\n<li><a href=\"https://nextjs.org/\">Next.js</a>, React.js etc (required to create a Next.js app).</li>\n<li><a href=\"https://tailwindcss.com/\">Tailwind CSS</a>, <a href=\"https://github.com/tailwindlabs/tailwindcss-typography\">Tailwind CSS Typography plugin</a> (for styling).</li>\n<li><a href=\"https://github.com/remarkjs/remark\">Remark Markdown parser</a> and plugins such as <a href=\"https://github.com/remarkjs/remark-html\">remark-html</a> to convert the Markdown returned by the Dev.to API to HTML. Other plugins I use enable features such as <a href=\"https://github.com/remarkjs/remark-highlight.js\">code highlighting</a>, <a href=\"https://github.com/remarkjs/remark-gfm\">GitHub flavour Markdown compatibility</a> (for <del>strikethrough</del> etc) and <a href=\"https://github.com/remarkjs/remark-highlight.js\">stripping out Front Matter from the displayed HTML</a>.</li>\n<li>The <a href=\"https://docs.dev.to/api/\">Dev.to API</a> and it's <code>https://dev.to/api/articles/me</code> endpoint.</li>\n<li><a href=\"https://vercel.com/docs/more/deploy-hooks\">Vercel deploy hooks</a>. I use Vercel to host my Next.js site and their deploy hooks allow me to rebuild my website automatically when an article is added or edited on Dev.to.</li>\n</ol>\n<p>To see all the packages I'm currently using on my website, <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/package.json\">check out the <code>package.json</code> on GitHub</a>.</p>\n<h3>The two Next.js functions that run my website</h3>\n<p>My personal website is built using Next.js. To ensure that all content continued to be generated at build time, I used two built-in Next.js functions that can be used to fetch data for pre-rendering. These are:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\"><code>getStaticProps</code></a> - fetch data from a source (think API or file) and pass it into the component via props.</li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\"><code>getStaticPaths</code></a>- provides the ability to use dynamic routes with a static site.</li>\n</ul>\n<p>I'll be using both functions to make the dynamic article page called <code>[slug].ts</code> - the square brackets denote that it is a <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">Next.js dynamic page</a> and the name <code>slug</code> is the name of the parameter that will be passed into <code>getStaticProps</code> from <code>getStaticPaths</code>.</p>\n<h3>How do I determine which articles appear on my website?</h3>\n<p>For articles to appear on my website they have to have a canonical URL pointing at <code>https://wallis.dev/blog</code>.</p>\n<p>Whenever I refer to the page <code>slug</code> I'm referring to the last section of the canonical URL (after <code>/blog</code>). When reading the canonical URL from the Dev.to API I use the following function to convert the URL to the slug.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> websiteURL = <span class=\"hljs-string\">'https://wallis.dev/blog/'</span>;\n\n<span class=\"hljs-comment\">// Takes a URL and returns the relative slug to your website</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> convertCanonicalURLToRelative = <span class=\"hljs-function\">(<span class=\"hljs-params\">canonicalURL</span>) =></span> {\n    <span class=\"hljs-keyword\">return</span> canonicalURL.replace(websiteURL, <span class=\"hljs-string\">''</span>);\n}</code></pre>\n<p>When I pass <code>https://wallis.dev/blog/a-new-article</code> to <code>convertCanonicalURLToRelative</code> it will return the <code>slug</code> <code>a-new-article</code>.</p>\n<hr>\n<h2>How to add a blog with using Dev.to as a backend</h2>\n<h3>The individual article pages (<code>/blog/${slug}</code>)</h3>\n<h4>Overview</h4>\n<p>Each individual article page is generated at build time using the <code>getStaticPaths</code> Next.js function that fetches all my Dev.to published articles, and saves them to a cache file. <code>getStaticProps</code> then fetches an individual article from the cache and passes it into the page component via its props.</p>\n<p><em>A cache file must be used</em> because <a href=\"https://github.com/vercel/next.js/discussions/11272\">Next.js doesn't allow passing data from <code>getStaticPaths</code> to <code>getStaticProps</code></a> - aside from the page <code>slug</code>. For this reason, the page slug is used to fetch an article from the cache file.</p>\n<h4>Flow Diagram</h4>\n<p>The diagram below should explain the process that is followed when creating dynamic pages through Next.js using the <code>getStaticPaths</code> and <code>getStaticProps</code> functions. It outlines the most important function calls, briefly explains what they do, and what is returned.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrvoolf5bhth0ri2lzd.jpg\" alt=\"Article Page Diagram\"></p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx\">View on GitHub</a></p>\n<p>Below you will find the code that dynamically creates each article page.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>;\n\n<span class=\"hljs-keyword\">import</span> Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../components/Layout'</span>;\n<span class=\"hljs-keyword\">import</span> PageTitle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../components/PageTitle'</span>;\n<span class=\"hljs-keyword\">import</span> IArticle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../interfaces/IArticle'</span>;\n<span class=\"hljs-keyword\">import</span> { getAllBlogArticles, getArticleFromCache } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../lib/devto'</span>;\n\n<span class=\"hljs-keyword\">const</span> cacheFile = <span class=\"hljs-string\">'.dev-to-cache.json'</span>;\n\n<span class=\"hljs-keyword\">interface</span> IProps {\n    <span class=\"hljs-attr\">article</span>: IArticle\n}\n\n<span class=\"hljs-keyword\">const</span> ArticlePage = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ article }: IProps</span>) =></span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{article.title}</span> <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">{article.description}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n            <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{article.coverImage}</span>\n            <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">Cover</span> <span class=\"hljs-attr\">image</span> <span class=\"hljs-attr\">for</span> ${<span class=\"hljs-attr\">article.title</span>}`}\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"md:mt-6 lg:mt-10 xl:mt-14 h-40 sm:h-48 md:h-52 lg:h-64 xl:h-68 2xl:h-80 mx-auto\"</span>\n        /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PageTitle</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{article.title}</span> <span class=\"hljs-attr\">center</span> <span class=\"hljs-attr\">icons</span>=<span class=\"hljs-string\">{false}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"mt-10 font-light leading-relaxed w-full flex flex-col items-center\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"prose dark:prose-dark lg:prose-lg w-full md:w-5/6 xl:w-9/12\"</span> <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">article.html</span> }} /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Layout</span>></span></span>\n\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\">{ params }: { params: { slug: <span class=\"hljs-built_in\">string</span> }}</span>) </span>{\n    <span class=\"hljs-comment\">// Read cache and parse to object</span>\n    <span class=\"hljs-keyword\">const</span> cacheContents = fs.readFileSync(path.join(process.cwd(), cacheFile), <span class=\"hljs-string\">'utf-8'</span>);\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-built_in\">JSON</span>.parse(cacheContents);\n\n    <span class=\"hljs-comment\">// Fetch the article from the cache</span>\n    <span class=\"hljs-keyword\">const</span> article: IArticle = <span class=\"hljs-keyword\">await</span> getArticleFromCache(cache, params.slug);\n\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { article } }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Get the published articles and cache them for use in getStaticProps</span>\n    <span class=\"hljs-keyword\">const</span> articles: IArticle[] = <span class=\"hljs-keyword\">await</span> getAllBlogArticles();\n\n    <span class=\"hljs-comment\">// Save article data to cache file</span>\n    fs.writeFileSync(path.join(process.cwd(), cacheFile), <span class=\"hljs-built_in\">JSON</span>.stringify(articles));\n\n    <span class=\"hljs-comment\">// Get the paths we want to pre-render based on posts</span>\n    <span class=\"hljs-keyword\">const</span> paths = articles.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ slug }</span>) =></span> {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">params</span>: { slug },\n        }\n    })\n\n    <span class=\"hljs-comment\">// We'll pre-render only these paths at build time.</span>\n    <span class=\"hljs-comment\">// { fallback: false } means other routes should 404.</span>\n    <span class=\"hljs-keyword\">return</span> { paths, <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-literal\">false</span> }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ArticlePage</code></pre>\n<p>The flow diagram above combined with the comments throughout the code should enable a full understanding of the code. If you have any questions, comment below.</p>\n<p>You'll notice that two functions are called from the <code>lib/dev.ts</code> file. <code>getArticleFromCache</code> does what it suggests, it finds an article in the cache and returns it. <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/devto.ts#L60\"><code>getAllBlogArticles</code></a>, on the other hand, is the function that fetches all my articles from Dev.to and converts the supplied markdown into HTML - using functions from <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts\"><code>lib/markdown.ts</code></a>.</p>\n<h5><a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/devto.ts\">Devto.ts</a></h5>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> axios, { AxiosResponse } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n<span class=\"hljs-keyword\">import</span> IArticle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../interfaces/IArticle'</span>;\n<span class=\"hljs-keyword\">import</span> ICachedArticle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../interfaces/ICachedArticle'</span>;\n<span class=\"hljs-keyword\">import</span> { convertMarkdownToHtml, sanitizeDevToMarkdown } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./markdown'</span>;\n\n<span class=\"hljs-keyword\">const</span> username = <span class=\"hljs-string\">'jameswallis'</span>; <span class=\"hljs-comment\">// My Dev.to username</span>\n<span class=\"hljs-keyword\">const</span> blogURL = <span class=\"hljs-string\">'https://wallis.dev/blog/'</span>; <span class=\"hljs-comment\">// Prefix for article pages</span>\n\n<span class=\"hljs-comment\">// Takes a URL and returns the relative slug to your website</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> convertCanonicalURLToRelative = <span class=\"hljs-function\">(<span class=\"hljs-params\">canonical: <span class=\"hljs-built_in\">string</span></span>) =></span> {\n    <span class=\"hljs-keyword\">return</span> canonical.replace(blogURL, <span class=\"hljs-string\">''</span>);\n}\n\n<span class=\"hljs-comment\">// Takes the data for an article returned by the Dev.to API and:</span>\n<span class=\"hljs-comment\">// * Parses it into the IArticle interface</span>\n<span class=\"hljs-comment\">// * Converts the full canonical URL into a relative slug to be used in getStaticPaths</span>\n<span class=\"hljs-comment\">// * Converts the supplied markdown into HTML (it does a little sanitising as Dev.to allows markdown headers (##) with out a trailing space</span>\n<span class=\"hljs-keyword\">const</span> convertDevtoResponseToArticle = (data: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">IArticle</span> =></span> {\n    <span class=\"hljs-keyword\">const</span> slug = convertCanonicalURLToRelative(data.canonical_url);\n    <span class=\"hljs-keyword\">const</span> markdown = sanitizeDevToMarkdown(data.body_markdown);\n    <span class=\"hljs-keyword\">const</span> html = convertMarkdownToHtml(markdown);\n\n    <span class=\"hljs-keyword\">const</span> article: IArticle = {\n        <span class=\"hljs-comment\">// parse into article object</span>\n    }\n    <span class=\"hljs-keyword\">return</span> article;\n}\n\n<span class=\"hljs-comment\">// Filters out any articles that are not meant for the blog page</span>\n<span class=\"hljs-keyword\">const</span> blogFilter = <span class=\"hljs-function\">(<span class=\"hljs-params\">article: IArticle</span>) =></span> article.canonical.startsWith(blogURL);\n\n<span class=\"hljs-comment\">// Get all users articles from Dev.to</span>\n<span class=\"hljs-comment\">// Use the authenticated Dev.to article route to get the article markdown included</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getAllArticles = <span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">const</span> params = { username, <span class=\"hljs-attr\">per_page</span>: <span class=\"hljs-number\">1000</span> };\n    <span class=\"hljs-keyword\">const</span> headers = { <span class=\"hljs-string\">'api-key'</span>: process.env.DEVTO_APIKEY };\n    <span class=\"hljs-keyword\">const</span> { data }: AxiosResponse = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">`https://dev.to/api/articles/me`</span>, { params, headers });\n    <span class=\"hljs-keyword\">const</span> articles: IArticle[] = data.map(convertDevtoResponseToArticle);\n    <span class=\"hljs-keyword\">return</span> articles;\n}\n\n<span class=\"hljs-comment\">// Get all articles from Dev.to meant for the blog page</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getAllBlogArticles = <span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">const</span> articles = <span class=\"hljs-keyword\">await</span> getAllArticles();\n    <span class=\"hljs-keyword\">return</span> articles.filter(blogFilter);\n}\n\n<span class=\"hljs-comment\">// Get my latest published article meant for the blog (and portfolio) pages</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getLatestBlogAndPortfolioArticle = <span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">const</span> articles = <span class=\"hljs-keyword\">await</span> getAllArticles();\n    <span class=\"hljs-keyword\">const</span> [latestBlog] = articles.filter(blogFilter);\n    <span class=\"hljs-keyword\">const</span> [latestPortfolio] = articles.filter(portfolioFilter); <span class=\"hljs-comment\">// ignore this! It's meant for another page (see the wallis.dev GitHub repository for more information)</span>\n    <span class=\"hljs-keyword\">return</span> [latestBlog, latestPortfolio];\n}\n\n<span class=\"hljs-comment\">// Gets an article from Dev.to using the ID that was saved to the cache earlier</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getArticleFromCache = <span class=\"hljs-keyword\">async</span> (cache: ICachedArticle[], <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-built_in\">string</span>) => {\n    <span class=\"hljs-comment\">// Get minified post from cache</span>\n    <span class=\"hljs-keyword\">const</span> article = cache.find(<span class=\"hljs-function\"><span class=\"hljs-params\">cachedArticle</span> =></span> cachedArticle.slug === slug) <span class=\"hljs-keyword\">as</span> IArticle;\n    <span class=\"hljs-keyword\">return</span> article;\n}</code></pre>\n<p>The key points to note about the <code>devto.ts</code> file is:</p>\n<ol>\n<li>\n<p>I've used the authenticated <code>https://dev.to/api/articles/me</code> endpoint to fetch all my articles from Dev.to. This endpoint is the only one that returns all my articles (ok, 1000 max...) and includes the article markdown. Authenticating also gives a slightly higher API limit.</p>\n<ul>\n<li><em>Previously I used the built-in HTML returned in the <code>https://dev.to/api/articles/{id}</code> but I kept hitting the API limit as each build made as many API calls as I had articles</em>.</li>\n<li>Get a Dev.to API Token following the <a href=\"https://docs.forem.com/api/#section/Authentication/api_key\">instructions on the API docs</a>.</li>\n</ul>\n</li>\n<li>\n<p>The <code>convertDevtoResponseToArticle</code> function converts the markdown into HTML using a function from the <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts\"><code>lib/markdown.ts</code></a>.</p>\n</li>\n</ol>\n<h5><a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts\">Markdown.ts</a></h5>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> unified <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'unified'</span>;\n<span class=\"hljs-keyword\">import</span> parse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-parse'</span>;\n<span class=\"hljs-keyword\">import</span> remarkHtml <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-html'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> highlight <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-highlight.js'</span>;\n<span class=\"hljs-keyword\">import</span> gfm <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-gfm'</span>;\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'gray-matter'</span>;\n<span class=\"hljs-keyword\">import</span> stripHtmlComments <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'strip-html-comments'</span>;\n\n<span class=\"hljs-comment\">// Corrects some Markdown specific to Dev.to</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> sanitizeDevToMarkdown = <span class=\"hljs-function\">(<span class=\"hljs-params\">markdown: <span class=\"hljs-built_in\">string</span></span>) =></span> {\n    <span class=\"hljs-keyword\">let</span> correctedMarkdown = <span class=\"hljs-string\">''</span>;\n\n    <span class=\"hljs-comment\">// Dev.to sometimes turns \"# header\" into \"#&#x26;nbsp;header\"</span>\n    <span class=\"hljs-keyword\">const</span> replaceSpaceCharRegex = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-built_in\">String</span>.fromCharCode(<span class=\"hljs-number\">160</span>), <span class=\"hljs-string\">\"g\"</span>);\n    correctedMarkdown = markdown.replace(replaceSpaceCharRegex, <span class=\"hljs-string\">\" \"</span>);\n\n    <span class=\"hljs-comment\">// Dev.to allows headers with no space after the hashtag (I don't use # on Dev.to due to the title)</span>\n    <span class=\"hljs-keyword\">const</span> addSpaceAfterHeaderHashtagRegex = <span class=\"hljs-regexp\">/##(?=[a-z|A-Z])/g</span>;\n    <span class=\"hljs-keyword\">return</span> correctedMarkdown.replace(addSpaceAfterHeaderHashtagRegex, <span class=\"hljs-string\">'$&#x26; '</span>);\n}\n\n<span class=\"hljs-comment\">// Converts given markdown into HTML</span>\n<span class=\"hljs-comment\">// Splits the gray-matter from markdown and returns that as well</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> convertMarkdownToHtml = <span class=\"hljs-function\">(<span class=\"hljs-params\">markdown: <span class=\"hljs-built_in\">string</span></span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> { content } = matter(markdown);\n\n    <span class=\"hljs-keyword\">const</span> html = unified()\n        .use(parse)\n        .use(gfm) <span class=\"hljs-comment\">// Allow GitHub flavoured markdown</span>\n        .use(highlight) <span class=\"hljs-comment\">// Add code highlighting</span>\n        .use(remarkHtml) <span class=\"hljs-comment\">// Convert to HTML</span>\n        .processSync(stripHtmlComments(content)).contents;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(html);\n}</code></pre>\n<p>This file is pretty simple; the comments should explain everything, so I won't add anything more. If you'd like to learn more about using Remark converts with Next.js, you can read my blog titled <a href=\"https://dev.to/jameswallis/how-to-use-the-remark-markdown-converters-with-next-js-projects-a8a\">\"How to use the Remark Markdown converters with Next.js projects\"</a>.</p>\n<h4>Summary</h4>\n<p>Phew, that was a lot. Hopefully, I didn't lose you in the code examples and explanations!</p>\n<p>Everything above explains how I've built the dynamic article pages on my website. I've included all the code that you'll need to create the dynamic blog pages on your own website.</p>\n<p>By the way, when the code above is compiled it produces an article page such as <a href=\"https://wallis.dev/blog/nextjs-serverside-data-fetching\">https://wallis.dev/blog/nextjs-serverside-data-fetching</a>.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewatlfueoo0dqqbxp8zz.png\" alt=\"article page screenshot\"></p>\n<p>Let's move onto the blog overview page (<a href=\"https://wallis.dev/blog\">wallis.dev/blog</a>).</p>\n<h3>The article overview page (<code>/blog</code>)</h3>\n<p>Building a page for each of your Dev.to articles at build time is great but how will a user find them without an overview page?! They probably won't!</p>\n<h4>Overview</h4>\n<p>The overview page is much simpler than the dynamic article pages and only uses functions from the <code>lib/devto.ts</code> file introduced above. So this section will be shorter than the last.</p>\n<h4>Flow Diagram</h4>\n<p>As before, I've made a diagram to display the process followed when displaying all the article summaries on the overview page. You'll notice that this time I'm only using <code>getStaticProps</code> rather than <code>getStaticProps</code> and <code>getStaticPaths</code>. This is because I'm only loading data for one page rather than creating dynamic pages (which is what <code>getStaticPaths</code> allows you to do).</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbyc2vteef4rsmkl74s.jpg\" alt=\"Overview page diagram\"></p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/blog.tsx\">View on GitHub</a></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> Layout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/Layout'</span>\n<span class=\"hljs-keyword\">import</span> PageTitle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/PageTitle'</span>\n<span class=\"hljs-keyword\">import</span> Section <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/Section'</span>\n<span class=\"hljs-keyword\">import</span> ArticleCard <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/ArticleCard'</span>\n<span class=\"hljs-keyword\">import</span> IArticle <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../interfaces/IArticle'</span>\n<span class=\"hljs-keyword\">import</span> { getAllBlogArticles } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../lib/devto'</span>\n\n<span class=\"hljs-keyword\">interface</span> IProps {\n    <span class=\"hljs-attr\">articles</span>: IArticle[]\n}\n\n<span class=\"hljs-keyword\">const</span> title = <span class=\"hljs-string\">\"Blog ✍️\"</span>\n<span class=\"hljs-keyword\">const</span> subtitle = <span class=\"hljs-string\">\"I share anything that may help others, technologies I\\'m using and cool things I\\'ve made.\"</span>\n\n<span class=\"hljs-keyword\">const</span> BlogPage = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ articles }: IProps</span>) =></span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{title}</span> <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">{subtitle}</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PageTitle</span>\n            <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{title}</span>\n            <span class=\"hljs-attr\">subtitle</span>=<span class=\"hljs-string\">{subtitle}</span>\n        /></span>\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Section</span> <span class=\"hljs-attr\">linebreak</span>></span>\n            {articles.map(({ title, description, publishedAt, tags, canonical }) => (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ArticleCard</span>\n                    <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{title}</span>\n                    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{title}</span>\n                    <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">{description}</span>\n                    <span class=\"hljs-attr\">date</span>=<span class=\"hljs-string\">{publishedAt}</span>\n                    <span class=\"hljs-attr\">tags</span>=<span class=\"hljs-string\">{tags}</span>\n                    <span class=\"hljs-attr\">canonical</span>=<span class=\"hljs-string\">{canonical}</span>\n                /></span>\n            ))}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Section</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Layout</span>></span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Get all the articles that have a canonical URL pointed to your blog</span>\n    <span class=\"hljs-keyword\">const</span> articles = <span class=\"hljs-keyword\">await</span> getAllBlogArticles();\n\n    <span class=\"hljs-comment\">// Pass articles to the page via props</span>\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { articles } };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPage</code></pre>\n<p>Essentially the above code:</p>\n<ol>\n<li>Loads the articles from the Dev.to API</li>\n<li>Passes them into the component</li>\n<li>Maps over each article and creates a summary card for each which links to the dynamic article page created in the previous step.</li>\n</ol>\n<p>The overview page looks like this:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwxqpqfdbldwky0v8zd2.png\" alt=\"Overview Page screenshot\"></p>\n<h4>Summary</h4>\n<p>Amazing, that's the overview page complete! If you're following along you should now have:</p>\n<ol>\n<li>Blog pages being created dynamically</li>\n<li>An overview page that links to the dynamic blog pages</li>\n</ol>\n<h3>Rebuild each time an article is created or updated</h3>\n<p>The final step that I took to create my Dev.to powered website is to set up a Vercel deploy hook. My website is hosted on Vercel so I am able to use a deploy hook to programmatically trigger a rebuild, refreshing the article content in the process.</p>\n<blockquote>\n<p>Deploy Hooks allow you to create URLs that accept HTTP POST requests in order to trigger deployments and re-run the Build Step.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://vercel.com/docs/more/deploy-hooks\">https://vercel.com/docs/more/deploy-hooks</a></li>\n</ul>\n<p>To trigger the deploy hook, I have created a <a href=\"https://docs.forem.com/api/#tag/webhooks\">Dev.to API webhook</a> that calls it each time an article is created or updated.</p>\n<h4>Configuring the automatic rebuild</h4>\n<p><em>A prereq for this section is that you're website needs to be deployed onto Vercel. <a href=\"https://dev.to/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o\">I've created instructions on how to do this</a>.</em></p>\n<p>To create a deploy hook, follow <a href=\"https://vercel.com/docs/more/deploy-hooks\">the Vercel documentation</a> - it's a lot more simple than you'd think.</p>\n<p>Once you have the deploy URL we can use the Dev.to API to create a webhook to trigger it.</p>\n<p>You can do this using <code>curl</code> (make sure you add your API_KEY and change the <code>target_url</code> to be your Vercel deploy hook URL):</p>\n<pre><code>curl -X POST -H \"Content-Type: application/json\" \\\n  -H \"api-key: API_KEY\" \\\n  -d '{\"webhook_endpoint\":{\"target_url\":\"https://example.org/webhooks/webhook1\",\"source\":\"DEV\",\"events\":[\"article_created\", \"article_updated\"]}}' \\\n  https://dev.to/api/webhooks\n</code></pre>\n<p><a href=\"https://docs.forem.com/api/#operation/createWebhook\">For more information, see the Dev.to API docs</a>.</p>\n<h4>Summary</h4>\n<p>Nice one, now your website will automatically redeploy each time you create or update an article on Dev.to!</p>\n<h2>Next steps</h2>\n<p>I love my website right now and using Dev.to to manage most of its content has made adding content much more efficient than previously. However, there are a couple of things I want to improve in the future:</p>\n<ul>\n<li>If a user is viewing a blog on Dev.to and it links to another of my articles, the user should stay on Dev.to. But if they're on <a href=\"https://wallis.dev\">wallis.dev</a>, they should stay on it rather than being taken to Dev.to.</li>\n<li>Another Dev.to user made a comment in another of my articles and made the point that if Dev.to suddenly turned off, I'd lose my articles. However unlikely, I want to set up a system to take daily backups of my articles to mitigate the risk of losing them.</li>\n</ul>\n<h2>Round up</h2>\n<p>In this article, I've taken you through the code that allows Dev.to to power my website. If you venture onto my GitHub you'll see that in addition to having a blog section (<a href=\"https://wallis.dev/blog)\">https://wallis.dev/blog)</a>, I also use Dev.to to display my portfolio entries (<a href=\"https://wallis.dev/portfolio)\">https://wallis.dev/portfolio)</a>.</p>\n<p>If you want more background on why and how I've used the Dev.to API to power my website, <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">read my initial post discussing it</a>.</p>\n<p>If you found this article interesting or it has helped you to use Next.js and the Dev.to API to build your own website using Dev.to as a CMS, drop me a reaction or let me know in the comments!</p>\n<p>Anything I can improve? Let me know in the comments.</p>\n<p>Thanks for reading!</p>\n<p>PS, I'm currently deciding whether I should create a tutorial series that will take you through building a Dev.to powered blog from scratch - is this something you would read/follow?</p>\n"},{"id":584359,"title":"Different ways to fetch data in Next.js (server-side) and when to use them","description":"When building an application powered by Next.js it's probable that you'll need to fetch data from eit...","publishedAt":"2021-03-02T23:48:09.840Z","devToSlug":"different-ways-to-fetch-data-in-next-js-server-side-and-when-to-use-them-1jb0","devToPath":"/jameswallis/different-ways-to-fetch-data-in-next-js-server-side-and-when-to-use-them-1jb0","devToURL":"https://dev.to/jameswallis/different-ways-to-fetch-data-in-next-js-server-side-and-when-to-use-them-1jb0","commentsCount":5,"publicReactionsCount":155,"positiveReactionsCount":155,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--IxXTPKxD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zldx65ss1kqgqp0ssny.png","tags":["nextjs","react","javascript","webdev"],"canonical":"https://wallis.dev/blog/nextjs-serverside-data-fetching","collectionId":-1,"slug":"nextjs-serverside-data-fetching","markdown":"When building an application powered by Next.js it's probable that you'll need to fetch data from either a file, an internal API route or an external API [such as the Dev.to API](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje). Moreover, determining what data fetching method to use in a Next.js application can easily become confusing - especially as it isn't as simple as making an API request inside your components render function, as you might in a stock React app.\n\nThe following guide will help you carefully select the server-side data fetching method that suits your app (FYI you can use multiple methods in a single app). For each method, I have outlined when it runs, it's benefits and an example of when you could use the method in your Next.js application.\n\nThe following methods fetch data either at build time or on each request before the data is sent to the client.\n\n### [getStaticProps (Static Generation)](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation)\n> Fetch data at **build time**.\n\nThe `getStaticProps` method can be used inside a page to fetch data at build time, e.g. when you run `next build`. Once the app is built, it won't refresh the data until another build has been run.\n\n*Note: Added in Next 9.3*\n\n#### Usage:\n```jsx\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\n\n#### Benefits:\n* It enables the page to be statically generated and will produce fast load times of all the data fetching methods.\n* If each page in your app uses `getStaticProps` (or no server-side data fetching methods) then Next.js will be able to export it into static HTML using [`next export`](https://nextjs.org/docs/advanced-features/static-html-export). This is advantageous if you want to create a static site that can be hosted on places [such as GitHub Pages](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn).\n* The data is rendered before it reaches the client - great for SEO.\n\n#### Example usage:\nImagine you have a personal blog site that renders pages from markdown files at build time. `getStaticProps` can read the files and pass the data into the page component at build time. When you make a change to a blog entry, you rebuild the site to see the changes. [ameira.me](https://ameira.me), a site I built, uses this method - each time Ameira makes a change to her portfolio, Vercel automatically rebuilds and republishes the site.\n\n### [getServerSideProps (Server-side Rendering)](https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering)\n> Fetch data on **each request**.\n\nThe `getServerSideProps` method fetches data each time a user requests the page. It will fetch the data before sending the page to the client (as opposed to loading the page and fetching the data on the client-side). If the client makes a subsequent request, the data will be fetched again.\n\n*Note: Added in Next 9.3*\n\n#### Usage:\n```jsx\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\n\n#### Benefits:\n* The data is refreshed each time a client loads the page meaning that it is up to date as of when they visit the page.\n* The data is rendered before it reaches the client - great for SEO.\n\n#### Example usage:\n`getServerSideProps` is perfect for building an application that requires the client to see the most up to date information, but isn't refreshed while the client is on the page (see client-side for constantly updating information). For example, if I had a page on my personal site that displayed information about my last GitHub commit or my current Dev.to stats, I'd want these fetched each time a page is viewed.\n\n### [getInitialProps (Server-side Rendering)](https://nextjs.org/docs/api-reference/data-fetching/getInitialProps)\n> Fetch data on **each request**.\n\n`getInitialProps` was the original way to fetch data in a Next.js app on the server-side. As of Next.js 9.3 you should use the previously discussed methods over `getInitialProps` but I'm including it in this article because:\n1. It can still be used - although the Next.js maintainers advise you not to as `getStaticProps` and `getServerSideProps` enable you to choose from static or server-side data fetching.\n1. Knowing about `getInitialProps` helps when you come across an old Stack Overflow query that mentions it, and also that you shouldn't just copy and paste that solution!.\n\n*Note: If you're on Next.js 9.3 or above, use the two methods above.*\n\n#### Usage:\n```jsx\nfunction Page({ stars }) {\n  return <div>Next stars: {stars}</div>\n}\n\nPage.getInitialProps = async (ctx) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default Page\n```\n\n#### Benefits:\nSame as `getServerSideProps` - use `getServerSideProps`!\n\n#### Example usage:\nSame as `getServerSideProps` - use `getServerSideProps`!\n\n### How to decide which one to use?\nWhen using Next.js, I always aim to make each page static. This means that I try to avoid using `getServerSideProps` and favour `getStaticProps`. However, if the data that I am fetching changes often then of course I will use `getServerSideProps`. I never use `getInitialProps` anymore.\n\nSo normally I try `getStaticProps` and if that is causing data to become outdated then I move to `getServerSideProps`.\n\n### A word on client-side data fetching\n\nThis article hasn't covered any client-side data fetching methods but you can use the `useEffect` hook to make the request or the [`useSwr`](https://swr.vercel.app) custom hook made by Vercel engineers which implements `stale-while-revalidate`.\n\n> SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.\n\n*- [swr.vercel.app](https://swr.vercel.app)*\n\n#### SWR Usage:\n```jsx\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetcher)\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\n## Final words\nIn this article, I've introduced three Next.js methods that can be used to fetch data either at build time or before each client request.\n\nLiked this article? Hit the like button!\n\nThanks for reading!\n","html":"<p>When building an application powered by Next.js it's probable that you'll need to fetch data from either a file, an internal API route or an external API <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">such as the Dev.to API</a>. Moreover, determining what data fetching method to use in a Next.js application can easily become confusing - especially as it isn't as simple as making an API request inside your components render function, as you might in a stock React app.</p>\n<p>The following guide will help you carefully select the server-side data fetching method that suits your app (FYI you can use multiple methods in a single app). For each method, I have outlined when it runs, it's benefits and an example of when you could use the method in your Next.js application.</p>\n<p>The following methods fetch data either at build time or on each request before the data is sent to the client.</p>\n<h3><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\">getStaticProps (Static Generation)</a></h3>\n<blockquote>\n<p>Fetch data at <strong>build time</strong>.</p>\n</blockquote>\n<p>The <code>getStaticProps</code> method can be used inside a page to fetch data at build time, e.g. when you run <code>next build</code>. Once the app is built, it won't refresh the data until another build has been run.</p>\n<p><em>Note: Added in Next 9.3</em></p>\n<h4>Usage:</h4>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`https://.../data`</span>)\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json()\n\n  <span class=\"hljs-keyword\">if</span> (!data) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">notFound</span>: <span class=\"hljs-literal\">true</span>,\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {}, <span class=\"hljs-comment\">// will be passed to the page component as props</span>\n  }\n}</code></pre>\n<h4>Benefits:</h4>\n<ul>\n<li>It enables the page to be statically generated and will produce fast load times of all the data fetching methods.</li>\n<li>If each page in your app uses <code>getStaticProps</code> (or no server-side data fetching methods) then Next.js will be able to export it into static HTML using <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\"><code>next export</code></a>. This is advantageous if you want to create a static site that can be hosted on places <a href=\"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn\">such as GitHub Pages</a>.</li>\n<li>The data is rendered before it reaches the client - great for SEO.</li>\n</ul>\n<h4>Example usage:</h4>\n<p>Imagine you have a personal blog site that renders pages from markdown files at build time. <code>getStaticProps</code> can read the files and pass the data into the page component at build time. When you make a change to a blog entry, you rebuild the site to see the changes. <a href=\"https://ameira.me\">ameira.me</a>, a site I built, uses this method - each time Ameira makes a change to her portfolio, Vercel automatically rebuilds and republishes the site.</p>\n<h3><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering\">getServerSideProps (Server-side Rendering)</a></h3>\n<blockquote>\n<p>Fetch data on <strong>each request</strong>.</p>\n</blockquote>\n<p>The <code>getServerSideProps</code> method fetches data each time a user requests the page. It will fetch the data before sending the page to the client (as opposed to loading the page and fetching the data on the client-side). If the client makes a subsequent request, the data will be fetched again.</p>\n<p><em>Note: Added in Next 9.3</em></p>\n<h4>Usage:</h4>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getServerSideProps</span>(<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`https://...`</span>)\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json()\n\n  <span class=\"hljs-keyword\">if</span> (!data) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">notFound</span>: <span class=\"hljs-literal\">true</span>,\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {}, <span class=\"hljs-comment\">// will be passed to the page component as props</span>\n  }\n}</code></pre>\n<h4>Benefits:</h4>\n<ul>\n<li>The data is refreshed each time a client loads the page meaning that it is up to date as of when they visit the page.</li>\n<li>The data is rendered before it reaches the client - great for SEO.</li>\n</ul>\n<h4>Example usage:</h4>\n<p><code>getServerSideProps</code> is perfect for building an application that requires the client to see the most up to date information, but isn't refreshed while the client is on the page (see client-side for constantly updating information). For example, if I had a page on my personal site that displayed information about my last GitHub commit or my current Dev.to stats, I'd want these fetched each time a page is viewed.</p>\n<h3><a href=\"https://nextjs.org/docs/api-reference/data-fetching/getInitialProps\">getInitialProps (Server-side Rendering)</a></h3>\n<blockquote>\n<p>Fetch data on <strong>each request</strong>.</p>\n</blockquote>\n<p><code>getInitialProps</code> was the original way to fetch data in a Next.js app on the server-side. As of Next.js 9.3 you should use the previously discussed methods over <code>getInitialProps</code> but I'm including it in this article because:</p>\n<ol>\n<li>It can still be used - although the Next.js maintainers advise you not to as <code>getStaticProps</code> and <code>getServerSideProps</code> enable you to choose from static or server-side data fetching.</li>\n<li>Knowing about <code>getInitialProps</code> helps when you come across an old Stack Overflow query that mentions it, and also that you shouldn't just copy and paste that solution!.</li>\n</ol>\n<p><em>Note: If you're on Next.js 9.3 or above, use the two methods above.</em></p>\n<h4>Usage:</h4>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Page</span>(<span class=\"hljs-params\">{ stars }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Next stars: {stars}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}\n\nPage.getInitialProps = <span class=\"hljs-keyword\">async</span> (ctx) => {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'https://api.github.com/repos/vercel/next.js'</span>)\n  <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">await</span> res.json()\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">stars</span>: json.stargazers_count }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Page</code></pre>\n<h4>Benefits:</h4>\n<p>Same as <code>getServerSideProps</code> - use <code>getServerSideProps</code>!</p>\n<h4>Example usage:</h4>\n<p>Same as <code>getServerSideProps</code> - use <code>getServerSideProps</code>!</p>\n<h3>How to decide which one to use?</h3>\n<p>When using Next.js, I always aim to make each page static. This means that I try to avoid using <code>getServerSideProps</code> and favour <code>getStaticProps</code>. However, if the data that I am fetching changes often then of course I will use <code>getServerSideProps</code>. I never use <code>getInitialProps</code> anymore.</p>\n<p>So normally I try <code>getStaticProps</code> and if that is causing data to become outdated then I move to <code>getServerSideProps</code>.</p>\n<h3>A word on client-side data fetching</h3>\n<p>This article hasn't covered any client-side data fetching methods but you can use the <code>useEffect</code> hook to make the request or the <a href=\"https://swr.vercel.app\"><code>useSwr</code></a> custom hook made by Vercel engineers which implements <code>stale-while-revalidate</code>.</p>\n<blockquote>\n<p>SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.</p>\n</blockquote>\n<p><em>- <a href=\"https://swr.vercel.app\">swr.vercel.app</a></em></p>\n<h4>SWR Usage:</h4>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> useSWR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'swr'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Profile</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { data, error } = useSWR(<span class=\"hljs-string\">'/api/user'</span>, fetcher)\n\n  <span class=\"hljs-keyword\">if</span> (error) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>failed to load<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  <span class=\"hljs-keyword\">if</span> (!data) <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>hello {data.name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}</code></pre>\n<h2>Final words</h2>\n<p>In this article, I've introduced three Next.js methods that can be used to fetch data either at build time or before each client request.</p>\n<p>Liked this article? Hit the like button!</p>\n<p>Thanks for reading!</p>\n"},{"id":557761,"title":"5 APIs to use in your next project","description":"Being a developer is great - you can build almost anything you want! Sometimes, however, it's difficu...","publishedAt":"2021-02-23T23:28:30.186Z","devToSlug":"5-apis-to-use-in-your-next-project-575o","devToPath":"/jameswallis/5-apis-to-use-in-your-next-project-575o","devToURL":"https://dev.to/jameswallis/5-apis-to-use-in-your-next-project-575o","commentsCount":1,"publicReactionsCount":54,"positiveReactionsCount":54,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--Mrw1O4Cx--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stld3v4ng9ckw9sxi66h.png","tags":["webdev","beginners","api"],"canonical":"https://wallis.dev/blog/5-apis-to-play-with","collectionId":-1,"slug":"5-apis-to-play-with","markdown":"Being a developer is great - you can build *almost anything* you want! Sometimes, however, it's difficult to decide what to build next as there are so many different project ideas out there. To help you find your next project, I've come up with a list of APIs that you can play with and provided potential project ideas.\n\n## [Dev.to](https://docs.dev.to/api)\nUsing Dev.to's own API you could create your own personal editor that can create and publish new posts as well as edit old ones. While creating this app you'd have to build a markdown editor and a system to publish your articles to Dev.to.\n\nAdditionally, you could use the Dev.to API to dynamically display your articles on your own personal website. [In fact, I recently rewrote my website to use Dev.to as a CMS to make the blog and portfolio sections easier to manage.](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje) \n\n## [Unsplash](https://unsplash.com/developers)\nUnsplash is a website that hosts \"beautiful, free images and photos that you can download and use for any project\". It's API can be used to fetch photos from Unsplash.\n\nThe Unsplash API could be used to make an application with a background that changes to a random image at different times during the day. For example, you could build your own Chrome new tab page that has a beautiful changing background and contains links that you find useful. Bonus points if the background reflects the time of day e.g. light during the day and darker at night.\n\n## [Spotify API](https://developer.spotify.com/discover/)\nThe Spotify API is one I've used in the past to create a home automation dashboard that shows what song I'm currently playing and has controls to play, pause, skip tracks and set the volume (in addition to other functionality). In addition to these features, Spotify also has APIs that:\n* Provide audio analysis to learn about a tracks danceability, energy, valence, and more\n* Control playback and can use the Web SDK to play full tracks\n* Customize and display a user's recommendations\n* Search for tracks in a user's region or anywhere\n* For others and further app ideas check the [discover page](https://developer.spotify.com/discover/).\n\n## [Hue](https://developers.meethue.com)\nIf you have any products from the Phillips Hue family, it's likely that they can be controlled using the Hue API. The official app can become a bit busy when you have multiple devices, so you could build an app that can control Hue bulbs around the house, changing their colour and brightness. You could also go back to basics and build a command-line app to control your lights!\n\n## [Slack](https://api.slack.com)\nUsing the Slack API you can build tools that integrate directly with Slack. The Slack API can be used to build a chatbot that can carry out various functions such as setting reminders, checking the weather or communicating with other APIs I've introduced above - for example, a chatbot that can control your Hue lights.\n\n## Bonus - A Dashboard to rule them all\nIf you're looking for a larger project to take on, you could combine all the APIs I've listed above to create a dashboard that can:\n* Display your total views/reactions using the Dev.to API\n* Have a beautiful background using the Unsplash API\n* Control your currently playing track and volume level through the Spotify API.\n* Display the state of lights around your house and control them using the Hue API.\n* Integrate the Slack API to make a chatbot that can directly control the whole dashboard!\n\n## Final words\nThese are just a few services that have APIs that you can use to build your next project. Hopefully, this article has given you that little bit of inspiration you needed to developer your next app!\n\nUsed any of these APIs before or have any to suggest? Pop them in the comments.\n\nLiked this article? Hit the like button!\n\nThanks for reading!\n\n","html":"<p>Being a developer is great - you can build <em>almost anything</em> you want! Sometimes, however, it's difficult to decide what to build next as there are so many different project ideas out there. To help you find your next project, I've come up with a list of APIs that you can play with and provided potential project ideas.</p>\n<h2><a href=\"https://docs.dev.to/api\">Dev.to</a></h2>\n<p>Using Dev.to's own API you could create your own personal editor that can create and publish new posts as well as edit old ones. While creating this app you'd have to build a markdown editor and a system to publish your articles to Dev.to.</p>\n<p>Additionally, you could use the Dev.to API to dynamically display your articles on your own personal website. <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">In fact, I recently rewrote my website to use Dev.to as a CMS to make the blog and portfolio sections easier to manage.</a></p>\n<h2><a href=\"https://unsplash.com/developers\">Unsplash</a></h2>\n<p>Unsplash is a website that hosts \"beautiful, free images and photos that you can download and use for any project\". It's API can be used to fetch photos from Unsplash.</p>\n<p>The Unsplash API could be used to make an application with a background that changes to a random image at different times during the day. For example, you could build your own Chrome new tab page that has a beautiful changing background and contains links that you find useful. Bonus points if the background reflects the time of day e.g. light during the day and darker at night.</p>\n<h2><a href=\"https://developer.spotify.com/discover/\">Spotify API</a></h2>\n<p>The Spotify API is one I've used in the past to create a home automation dashboard that shows what song I'm currently playing and has controls to play, pause, skip tracks and set the volume (in addition to other functionality). In addition to these features, Spotify also has APIs that:</p>\n<ul>\n<li>Provide audio analysis to learn about a tracks danceability, energy, valence, and more</li>\n<li>Control playback and can use the Web SDK to play full tracks</li>\n<li>Customize and display a user's recommendations</li>\n<li>Search for tracks in a user's region or anywhere</li>\n<li>For others and further app ideas check the <a href=\"https://developer.spotify.com/discover/\">discover page</a>.</li>\n</ul>\n<h2><a href=\"https://developers.meethue.com\">Hue</a></h2>\n<p>If you have any products from the Phillips Hue family, it's likely that they can be controlled using the Hue API. The official app can become a bit busy when you have multiple devices, so you could build an app that can control Hue bulbs around the house, changing their colour and brightness. You could also go back to basics and build a command-line app to control your lights!</p>\n<h2><a href=\"https://api.slack.com\">Slack</a></h2>\n<p>Using the Slack API you can build tools that integrate directly with Slack. The Slack API can be used to build a chatbot that can carry out various functions such as setting reminders, checking the weather or communicating with other APIs I've introduced above - for example, a chatbot that can control your Hue lights.</p>\n<h2>Bonus - A Dashboard to rule them all</h2>\n<p>If you're looking for a larger project to take on, you could combine all the APIs I've listed above to create a dashboard that can:</p>\n<ul>\n<li>Display your total views/reactions using the Dev.to API</li>\n<li>Have a beautiful background using the Unsplash API</li>\n<li>Control your currently playing track and volume level through the Spotify API.</li>\n<li>Display the state of lights around your house and control them using the Hue API.</li>\n<li>Integrate the Slack API to make a chatbot that can directly control the whole dashboard!</li>\n</ul>\n<h2>Final words</h2>\n<p>These are just a few services that have APIs that you can use to build your next project. Hopefully, this article has given you that little bit of inspiration you needed to developer your next app!</p>\n<p>Used any of these APIs before or have any to suggest? Pop them in the comments.</p>\n<p>Liked this article? Hit the like button!</p>\n<p>Thanks for reading!</p>\n"},{"id":592011,"title":"5 places to get pre-crafted Tailwind CSS components for free","description":"One of my favourite reasons to use Tailwind CSS is the vast amount of premade components available - for free. I've made a list of the best places to find them.","publishedAt":"2021-02-10T17:50:06.773Z","devToSlug":"5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","devToPath":"/jameswallis/5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","devToURL":"https://dev.to/jameswallis/5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","commentsCount":3,"publicReactionsCount":69,"positiveReactionsCount":69,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--wItrmFEH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/9txqlyg261jiu8blq1mj.jpg","tags":["react","css","tailwindcss"],"canonical":"https://wallis.dev/blog/5-places-to-get-free-tailwind-css-components","collectionId":-1,"slug":"5-places-to-get-free-tailwind-css-components","markdown":"---\ndescription: \"One of my favourite reasons to use Tailwind CSS is the vast amount of premade components available - for free. I've made a list of the best places to find them.\"\n---\n## Introduction\nI've been using [Tailwind CSS](https://tailwindcss.com) pretty heavily in the last few months. I've been using it both at work and at home on personal projects, [most recently when I created my Dev.to powered personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).\n\nOne of the best things about using Tailwind CSS to style your application is the large variety of premade components scattered across the web. Need a design for a form? Chances are a designer, likely more skilled than yourself (in my case anyway), has already created one that you can just copy into your app - **no extra dependencies, no modifying existing functionality**.\n\n**I intend for this article to be a living list that I can update each time I find a new high-quality Tailwind CSS component supplier.** Most of the websites listed below I've accidentally stumbled onto so this article will help me find them in the future. I've provided a summary for each website to highlight my favourite components both for you and so I know for the future!\n\n## Sites you should check out 🤩\nBelow, I have selected five websites that, to my knowledge, provide the highest quality components available online - **completely for free**.\n\n1. **[Tailblocks](https://tailblocks.cc)**.\n    * Contains over 60 components.\n    * Each component comes with dark mode, responsive sizing and colour variants.\n    * All the components are high quality. In fact, the website itself provides a great user experience. You can select the emphasis colour and navigate through all the components using the arrow keys on your keyboard.\n\n1. **[Tailwind Components](https://tailwindcomponents.com/)**.\n    * Components made by the community.\n    * The quality is hit and miss but it's good to check on when searching for a component as you never know what will be added.\n    * Does contain some paid \"premium\" components but these are mainly page layouts - not the components themselves.\n\n1. **[Meraki UI Components](https://merakiui.com)**.\n    * Meraki contains 49 components.\n    * Although they supply a relatively small amount of components, I especially like their design of components that are half image, half content.\n\n1. **[Tailwind Kit](https://www.tailwind-kit.com/)**. \n    * Tailwind Kit contains over 200 components.\n    * Originally announced on [Dev.to earlier this year by a French developer named Charlie](https://dev.to/charlie85270/tail-kit-200-tailwind-css-components-templates-38ol). \n    * There is the ability to [request components](https://www.tailwind-kit.com/request) based on existing designs from places like Dribbble.\n\n1. **[Tailwind Toolbox](https://www.tailwindtoolbox.com)**.\n    * More components made by the community. Additionally has templates, builder kits, generators, plugins and useful tools for use with Tailwind projects.\n    * Can suggest components to add to the site.\n\n## Bonus\nBit of a half baked bonus...\n\n1. **[Tailwind UI - from the creators of TailwindCSS](https://tailwindui.com/)**. \n    * This site contains over 300 of the most polished pre-made components around - they're made by Tailwind experts. \n    * [The few free components they supply look incredible](https://tailwindui.com/preview). *However*, only a few are free and the rest are part of a paid offering. The price for full access is over $150, likely too much for anyone but serious frontend developers who use Tailwind CSS at work every day. If you purchase access to the library, they promise more components every month until they run out of ideas.\n    * Personally, *I'm tempted*. If I can justify the cost in the future (i.e. use Tailwind CSS more at work) I'd 💯 purchase access to the library. It would take my website designs to the next level without having to invest hours of time fiddling with CSS styling.\n\n## Final words\nThese are just a few places that you can get premade Tailwind CSS components from. I'll keep adding more as and when I find them!\n\nIf you know another source of components, drop them in a comment and I'll add them to the list!\n\nLiked this article? Hit the like button!\n\nThanks for reading!","html":"<h2>Introduction</h2>\n<p>I've been using <a href=\"https://tailwindcss.com\">Tailwind CSS</a> pretty heavily in the last few months. I've been using it both at work and at home on personal projects, <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">most recently when I created my Dev.to powered personal website</a>.</p>\n<p>One of the best things about using Tailwind CSS to style your application is the large variety of premade components scattered across the web. Need a design for a form? Chances are a designer, likely more skilled than yourself (in my case anyway), has already created one that you can just copy into your app - <strong>no extra dependencies, no modifying existing functionality</strong>.</p>\n<p><strong>I intend for this article to be a living list that I can update each time I find a new high-quality Tailwind CSS component supplier.</strong> Most of the websites listed below I've accidentally stumbled onto so this article will help me find them in the future. I've provided a summary for each website to highlight my favourite components both for you and so I know for the future!</p>\n<h2>Sites you should check out 🤩</h2>\n<p>Below, I have selected five websites that, to my knowledge, provide the highest quality components available online - <strong>completely for free</strong>.</p>\n<ol>\n<li>\n<p><strong><a href=\"https://tailblocks.cc\">Tailblocks</a></strong>.</p>\n<ul>\n<li>Contains over 60 components.</li>\n<li>Each component comes with dark mode, responsive sizing and colour variants.</li>\n<li>All the components are high quality. In fact, the website itself provides a great user experience. You can select the emphasis colour and navigate through all the components using the arrow keys on your keyboard.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://tailwindcomponents.com/\">Tailwind Components</a></strong>.</p>\n<ul>\n<li>Components made by the community.</li>\n<li>The quality is hit and miss but it's good to check on when searching for a component as you never know what will be added.</li>\n<li>Does contain some paid \"premium\" components but these are mainly page layouts - not the components themselves.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://merakiui.com\">Meraki UI Components</a></strong>.</p>\n<ul>\n<li>Meraki contains 49 components.</li>\n<li>Although they supply a relatively small amount of components, I especially like their design of components that are half image, half content.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://www.tailwind-kit.com/\">Tailwind Kit</a></strong>.</p>\n<ul>\n<li>Tailwind Kit contains over 200 components.</li>\n<li>Originally announced on <a href=\"https://dev.to/charlie85270/tail-kit-200-tailwind-css-components-templates-38ol\">Dev.to earlier this year by a French developer named Charlie</a>.</li>\n<li>There is the ability to <a href=\"https://www.tailwind-kit.com/request\">request components</a> based on existing designs from places like Dribbble.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://www.tailwindtoolbox.com\">Tailwind Toolbox</a></strong>.</p>\n<ul>\n<li>More components made by the community. Additionally has templates, builder kits, generators, plugins and useful tools for use with Tailwind projects.</li>\n<li>Can suggest components to add to the site.</li>\n</ul>\n</li>\n</ol>\n<h2>Bonus</h2>\n<p>Bit of a half baked bonus...</p>\n<ol>\n<li><strong><a href=\"https://tailwindui.com/\">Tailwind UI - from the creators of TailwindCSS</a></strong>.\n<ul>\n<li>This site contains over 300 of the most polished pre-made components around - they're made by Tailwind experts.</li>\n<li><a href=\"https://tailwindui.com/preview\">The few free components they supply look incredible</a>. <em>However</em>, only a few are free and the rest are part of a paid offering. The price for full access is over $150, likely too much for anyone but serious frontend developers who use Tailwind CSS at work every day. If you purchase access to the library, they promise more components every month until they run out of ideas.</li>\n<li>Personally, <em>I'm tempted</em>. If I can justify the cost in the future (i.e. use Tailwind CSS more at work) I'd 💯 purchase access to the library. It would take my website designs to the next level without having to invest hours of time fiddling with CSS styling.</li>\n</ul>\n</li>\n</ol>\n<h2>Final words</h2>\n<p>These are just a few places that you can get premade Tailwind CSS components from. I'll keep adding more as and when I find them!</p>\n<p>If you know another source of components, drop them in a comment and I'll add them to the list!</p>\n<p>Liked this article? Hit the like button!</p>\n<p>Thanks for reading!</p>\n"},{"id":588193,"title":"I completely rewrote my personal website using Dev.to as a CMS","description":"I spent a weekend rebuilding my website from scratch using TypeScript, Next.js, Tailwind CSS and Dev.to as a CMS for my blog and portfolio pages.","publishedAt":"2021-02-03T19:40:55.235Z","devToSlug":"i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","devToPath":"/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","devToURL":"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","commentsCount":12,"publicReactionsCount":212,"positiveReactionsCount":212,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--uchyF_zE--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/syqrfb4e2kbsid9elpkh.png","tags":["showdev","javascript","react","nextjs"],"canonical":"https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms","collectionId":-1,"slug":"rewriting-my-website-with-a-devto-cms","markdown":"---\ndescription: \"I spent a weekend rebuilding my website from scratch using TypeScript, Next.js, Tailwind CSS and Dev.to as a CMS for my blog and portfolio pages.\"\n---\nThe final weekend of January 2021 was uneventful in comparison with other years - in the UK we were in full lockdown due to the Coronavirus. It was, however, the perfect opportunity to completely rewrite [my personal website](https://wallis.dev).\n\n## Why?\nI decided to redesign and rewrite my website for several reasons:\n* I wanted to move from JavaScript to TypeScript.\n* The website was styled using [styled-jsx](https://github.com/vercel/styled-jsx), which can be a pain to maintain and IMO is a bit messy. At the moment I'm using Tailwind CSS and so far loving it and its utility-style nature; I wanted my personal website to reflect this.\n* I no longer liked the design and wanted it to be cleaner and simpler.\n* I wanted my blog and portfolio to be loaded dynamically from a CMS rather than having to copy+paste a new page for each entry - See the *`Originally published at wallis.dev`* at the top of this article.\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rs1bvowr8eyxg3gly85p.png\" alt=\"The old wallis.dev home page\">\n  <figcaption>My old home page</figcaption>\n</figure>\n\n## Technologies used\n* **[TypeScript](https://www.typescriptlang.org)** - Since being introduced to TypeScript at work, I've started to understand the benefits over plain JavaScript.\n* **[Next.js](https://nextjs.org)** - I don't try to hide the fact that I love Next.js, it's so simple to use and to date [most of my articles contain Next.js in some way](https://dev.to/jameswallis).\n* **[Tailwind CSS](https://tailwindcss.com)** - Lately I've been using Tailwind CSS heavily. To quote their homepage, it enables me to \"rapidly build modern websites without ever leaving [my React component]\". Tailwind CSS also made it incredibly easy to add a [dark mode](https://tailwindcss.com/docs/dark-mode). Also [Tailwind Typography](https://github.com/tailwindlabs/tailwindcss-typography).\n* **[Dev.to API](https://docs.dev.to/api)** to dynamically build the blog and portfolio pages ⬅️  *My favourite feature*.\n\n## Using Dev.to as a CMS\nMy favourite part of my website is the use of Dev.to as a Content Management System for the blog and portfolio pages. I've seen the Dev.to API utilised before to display a user's articles on their website but, AFAIK, not quite in the same way as I've applied it.\n\nThe benefits of using Dev.to as a CMS are:\n1. Dev.to stores the articles and any images that are uploaded and used.\n1. I can use Dev.to's editor and the ability to draft an article and publish it later.\n1. Has a built-in RSS feed that I can use to share my articles to other sites such as [CodeNewbie](https://community.codenewbie.org/) and Medium.\n1. Although Dev.to has the article first, the use of a canonical URL ensures that Google and other sites see my personal website as the source site for the articles.\n1. ~~Converts the article into HTML for me.~~ *I ended up rendering the HTML from the article markdown myself, as it required fewer requests to the Dev.to API.*\n\n### Disclaimer\nBefore I continue I want to *stress* that I intend to use Dev.to purely for my blog and portfolio (past projects / `showdev`). **I won't be using Dev.to to create pages which are not articles** and would cause Dev.to to become cluttered with spam if others follow suit. For example, the about section on the home page is hardcoded into the website and if I created a page for my education history, I'd keep that purely for the website and wouldn't post it to Dev.to - [I'd probably use Markdown for these](https://dev.to/jameswallis/combining-markdown-and-dynamic-routes-to-make-a-more-maintainable-next-js-website-3ogl).\n\n### How it works\n[View the code on GitHub](https://github.com/james-wallis/wallis.dev)\n\nBuilt using Next.js, the website uses two dynamic routing functions ([`getStaticPaths`](https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation) and [`getStaticProps`](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation)) to generate the [blog](https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx) and [portfolio](https://github.com/james-wallis/wallis.dev/blob/master/pages/portfolio/%5Bslug%5D.tsx) pages.\n\nBefore an article is displayed on my website, it must meet the two following requirements:\n1. Must be published (obviously)\n1. Must have a canonical URL directing to my website. This enables me to pick which articles are displayed, what the article's path will be on my website (not the post ID). Moreover, an article with a canonical URL pointing to `https://wallis.dev/blog/...` will be built as part of my blog whereas, if its canonical URL is `https://wallis.dev/portfolio/...` it will be a portfolio piece.\n\nFor every article that meets the requirements, the subsequent build process is followed:\n1. At build time, Next.js calls the `getStaticPaths` function which \n    1. Fetches a list of my published articles using the Dev.to API ([`/api/articles/me`](https://docs.dev.to/api/#operation/getUserArticles)).\n    1. Converts the article's markdown to HTML.\n    1. Saves the articles to a cache file for use in the next step. \n    1. A dynamic page is created within the Next.js context for each article - the page `slug` will be the canonical URL path.\n\n1. For each page, Next.js calls `getStaticProps` which fetches the page's article from the cache. The article contains the name, description and HTML. \n    * *I also attempted making another API request to the Dev.to API ([`/api/articles/{id}`](https://docs.dev.to/api/#operation/getArticleById)) to fetch the page's article, so I could use the HTML rendered by Dev.to. However, this caused build failures as I was making too many API requests at once - so now I render the markdown using [`remark-html`](https://github.com/remarkjs/remark-html).*\n1. Finally, the page is rendered. I use custom elements to display the article `name` and `description` and then display the HTML I [rendered earlier in `getStaticPaths` using `remark-html`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L19-L29). For styling, I use the [Tailwind Typography plugin](https://github.com/tailwindlabs/tailwindcss-typography).\n\nTo ensure that the website is always in sync with my articles on Dev.to, I use a [Vercel Deploy hook](https://vercel.com/docs/more/deploy-hooks) which is triggered each time I create or update an article using a [Dev.to webhook](https://docs.dev.to/api/#tag/webhooks). I use a Deploy Hook rather than [Incremental Static Regeneration](https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration) so that the blog is only rebuilt when something has changed rather than at random intervals.\n\n*Note: I use Dev.to APIs that require authorisation as they seem to have a higher request limit compared to the public routes. When using public APIs and fetching each article via the article API, I found that my builds were failing with a `429` error which is Dev.to rate-limiting requests. - I probably could switch to using public APIs now that I'm using a cache to read the articles from.*\n\n**I'm currently writing a detailed article which describes in greater detail how my website utilises Dev.to as a CMS, stay tuned (and follow on Dev.to to be notified when I release it)!**\n\n\n### How it looks\n[Visit wallis.dev](https://wallis.dev)\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7apbs7bdr6o1fwiouwc5.gif\" alt=\"Navigating through my website\">\n  <figcaption>Navigating through wallis.dev</figcaption>\n</figure>\n\n### Future improvements\n1. ~~Add syntax highlighting to code blocks like on Dev.to.~~ [Completed using `highlight.js` and `remark-highlight.js`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L24).\n1. Add a [contact form using EmailJS](https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g).\n1. Only rebuild the website if the content of an article has changed or one is created - reduces the website being needlessly redeployed.\n\n## Summary\nIn this article, I discussed rewriting my personal website from the ground up using Dev.to as a Content Management System for the blog and portfolio pages.\n\nLike the idea of using Dev.to as a CMS for your blog? React! Found something I could improve or that you would have done differently? Let me know in the comments.\n\nThanks for reading!\n\n**[By the way, you can view this article live on my website here.](https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms)**\n\n","html":"<p>The final weekend of January 2021 was uneventful in comparison with other years - in the UK we were in full lockdown due to the Coronavirus. It was, however, the perfect opportunity to completely rewrite <a href=\"https://wallis.dev\">my personal website</a>.</p>\n<h2>Why?</h2>\n<p>I decided to redesign and rewrite my website for several reasons:</p>\n<ul>\n<li>I wanted to move from JavaScript to TypeScript.</li>\n<li>The website was styled using <a href=\"https://github.com/vercel/styled-jsx\">styled-jsx</a>, which can be a pain to maintain and IMO is a bit messy. At the moment I'm using Tailwind CSS and so far loving it and its utility-style nature; I wanted my personal website to reflect this.</li>\n<li>I no longer liked the design and wanted it to be cleaner and simpler.</li>\n<li>I wanted my blog and portfolio to be loaded dynamically from a CMS rather than having to copy+paste a new page for each entry - See the <em><code>Originally published at wallis.dev</code></em> at the top of this article.</li>\n</ul>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rs1bvowr8eyxg3gly85p.png\" alt=\"The old wallis.dev home page\">\n  <figcaption>My old home page</figcaption>\n</figure>\n<h2>Technologies used</h2>\n<ul>\n<li><strong><a href=\"https://www.typescriptlang.org\">TypeScript</a></strong> - Since being introduced to TypeScript at work, I've started to understand the benefits over plain JavaScript.</li>\n<li><strong><a href=\"https://nextjs.org\">Next.js</a></strong> - I don't try to hide the fact that I love Next.js, it's so simple to use and to date <a href=\"https://dev.to/jameswallis\">most of my articles contain Next.js in some way</a>.</li>\n<li><strong><a href=\"https://tailwindcss.com\">Tailwind CSS</a></strong> - Lately I've been using Tailwind CSS heavily. To quote their homepage, it enables me to \"rapidly build modern websites without ever leaving [my React component]\". Tailwind CSS also made it incredibly easy to add a <a href=\"https://tailwindcss.com/docs/dark-mode\">dark mode</a>. Also <a href=\"https://github.com/tailwindlabs/tailwindcss-typography\">Tailwind Typography</a>.</li>\n<li><strong><a href=\"https://docs.dev.to/api\">Dev.to API</a></strong> to dynamically build the blog and portfolio pages ⬅️  <em>My favourite feature</em>.</li>\n</ul>\n<h2>Using Dev.to as a CMS</h2>\n<p>My favourite part of my website is the use of Dev.to as a Content Management System for the blog and portfolio pages. I've seen the Dev.to API utilised before to display a user's articles on their website but, AFAIK, not quite in the same way as I've applied it.</p>\n<p>The benefits of using Dev.to as a CMS are:</p>\n<ol>\n<li>Dev.to stores the articles and any images that are uploaded and used.</li>\n<li>I can use Dev.to's editor and the ability to draft an article and publish it later.</li>\n<li>Has a built-in RSS feed that I can use to share my articles to other sites such as <a href=\"https://community.codenewbie.org/\">CodeNewbie</a> and Medium.</li>\n<li>Although Dev.to has the article first, the use of a canonical URL ensures that Google and other sites see my personal website as the source site for the articles.</li>\n<li><del>Converts the article into HTML for me.</del> <em>I ended up rendering the HTML from the article markdown myself, as it required fewer requests to the Dev.to API.</em></li>\n</ol>\n<h3>Disclaimer</h3>\n<p>Before I continue I want to <em>stress</em> that I intend to use Dev.to purely for my blog and portfolio (past projects / <code>showdev</code>). <strong>I won't be using Dev.to to create pages which are not articles</strong> and would cause Dev.to to become cluttered with spam if others follow suit. For example, the about section on the home page is hardcoded into the website and if I created a page for my education history, I'd keep that purely for the website and wouldn't post it to Dev.to - <a href=\"https://dev.to/jameswallis/combining-markdown-and-dynamic-routes-to-make-a-more-maintainable-next-js-website-3ogl\">I'd probably use Markdown for these</a>.</p>\n<h3>How it works</h3>\n<p><a href=\"https://github.com/james-wallis/wallis.dev\">View the code on GitHub</a></p>\n<p>Built using Next.js, the website uses two dynamic routing functions (<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\"><code>getStaticPaths</code></a> and <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\"><code>getStaticProps</code></a>) to generate the <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx\">blog</a> and <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/portfolio/%5Bslug%5D.tsx\">portfolio</a> pages.</p>\n<p>Before an article is displayed on my website, it must meet the two following requirements:</p>\n<ol>\n<li>Must be published (obviously)</li>\n<li>Must have a canonical URL directing to my website. This enables me to pick which articles are displayed, what the article's path will be on my website (not the post ID). Moreover, an article with a canonical URL pointing to <code>https://wallis.dev/blog/...</code> will be built as part of my blog whereas, if its canonical URL is <code>https://wallis.dev/portfolio/...</code> it will be a portfolio piece.</li>\n</ol>\n<p>For every article that meets the requirements, the subsequent build process is followed:</p>\n<ol>\n<li>\n<p>At build time, Next.js calls the <code>getStaticPaths</code> function which</p>\n<ol>\n<li>Fetches a list of my published articles using the Dev.to API (<a href=\"https://docs.dev.to/api/#operation/getUserArticles\"><code>/api/articles/me</code></a>).</li>\n<li>Converts the article's markdown to HTML.</li>\n<li>Saves the articles to a cache file for use in the next step.</li>\n<li>A dynamic page is created within the Next.js context for each article - the page <code>slug</code> will be the canonical URL path.</li>\n</ol>\n</li>\n<li>\n<p>For each page, Next.js calls <code>getStaticProps</code> which fetches the page's article from the cache. The article contains the name, description and HTML.</p>\n<ul>\n<li><em>I also attempted making another API request to the Dev.to API (<a href=\"https://docs.dev.to/api/#operation/getArticleById\"><code>/api/articles/{id}</code></a>) to fetch the page's article, so I could use the HTML rendered by Dev.to. However, this caused build failures as I was making too many API requests at once - so now I render the markdown using <a href=\"https://github.com/remarkjs/remark-html\"><code>remark-html</code></a>.</em></li>\n</ul>\n</li>\n<li>\n<p>Finally, the page is rendered. I use custom elements to display the article <code>name</code> and <code>description</code> and then display the HTML I <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L19-L29\">rendered earlier in <code>getStaticPaths</code> using <code>remark-html</code></a>. For styling, I use the <a href=\"https://github.com/tailwindlabs/tailwindcss-typography\">Tailwind Typography plugin</a>.</p>\n</li>\n</ol>\n<p>To ensure that the website is always in sync with my articles on Dev.to, I use a <a href=\"https://vercel.com/docs/more/deploy-hooks\">Vercel Deploy hook</a> which is triggered each time I create or update an article using a <a href=\"https://docs.dev.to/api/#tag/webhooks\">Dev.to webhook</a>. I use a Deploy Hook rather than <a href=\"https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration\">Incremental Static Regeneration</a> so that the blog is only rebuilt when something has changed rather than at random intervals.</p>\n<p><em>Note: I use Dev.to APIs that require authorisation as they seem to have a higher request limit compared to the public routes. When using public APIs and fetching each article via the article API, I found that my builds were failing with a <code>429</code> error which is Dev.to rate-limiting requests. - I probably could switch to using public APIs now that I'm using a cache to read the articles from.</em></p>\n<p><strong>I'm currently writing a detailed article which describes in greater detail how my website utilises Dev.to as a CMS, stay tuned (and follow on Dev.to to be notified when I release it)!</strong></p>\n<h3>How it looks</h3>\n<p><a href=\"https://wallis.dev\">Visit wallis.dev</a></p>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7apbs7bdr6o1fwiouwc5.gif\" alt=\"Navigating through my website\">\n  <figcaption>Navigating through wallis.dev</figcaption>\n</figure>\n<h3>Future improvements</h3>\n<ol>\n<li><del>Add syntax highlighting to code blocks like on Dev.to.</del> <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L24\">Completed using <code>highlight.js</code> and <code>remark-highlight.js</code></a>.</li>\n<li>Add a <a href=\"https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g\">contact form using EmailJS</a>.</li>\n<li>Only rebuild the website if the content of an article has changed or one is created - reduces the website being needlessly redeployed.</li>\n</ol>\n<h2>Summary</h2>\n<p>In this article, I discussed rewriting my personal website from the ground up using Dev.to as a Content Management System for the blog and portfolio pages.</p>\n<p>Like the idea of using Dev.to as a CMS for your blog? React! Found something I could improve or that you would have done differently? Let me know in the comments.</p>\n<p>Thanks for reading!</p>\n<p><strong><a href=\"https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms\">By the way, you can view this article live on my website here.</a></strong></p>\n"},{"id":582548,"title":"5 built-in Next.js features you absolutely should check out","description":"When you start to use Next.js, it’s easy to overlook some incredible built-in features such as exporting as a static app and Incremental Static Regeneration","publishedAt":"2021-01-26T23:42:27.568Z","devToSlug":"5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","devToPath":"/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","devToURL":"https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","commentsCount":3,"publicReactionsCount":57,"positiveReactionsCount":57,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--rFOZu6vi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/nywah7c3642ro5euoaqs.png","tags":["webdev","javascript","nextjs","react"],"canonical":"https://wallis.dev/blog/5-built-in-nextjs-features-to-check-out","collectionId":-1,"slug":"5-built-in-nextjs-features-to-check-out","markdown":"---\ndescription: \"When you start to use Next.js, it’s easy to overlook some incredible built-in features such as exporting as a static app and Incremental Static Regeneration\"\n---\n## Introduction\n\nRecently I've been using [Next.js](https://nextjs.org/) both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React. \n\nWith Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using [`create-next-app`](https://nextjs.org/docs/api-reference/create-next-app) as opposed to [`create-react-app`](https://github.com/facebook/create-react-app).\n\nDuring my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application. \n\n## Features you should check out 🤩\n\n1. **Export your Next.js application into [static HTML using `next export`](https://nextjs.org/docs/advanced-features/static-html-export)**. \n    * Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using `getStaticProps`. This feature bridges the gap between Next.js and its longtime alternative [Gatsby](https://www.gatsbyjs.com/) which is exclusively a static site generator.\n    * *I've used `next export` to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).*\n\n1. **The `next.config.js` [`assetPrefix`](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix) and [`basePath`](https://nextjs.org/docs/api-reference/next.config.js/basepath) options**. \n    * On its own `assetPrefix` allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While `basePath` provides the ability to host the app on the subpath of a domain such as `https://domain.com/app-on-this-subpath`.\n    * *[In the past I've utilised `next export`, `assetPrefix` and `basePath` together to host a Next.js app on GitHub Pages](https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba) - without `assetPrefix` and `basePath` you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.*\n\n1. **[Incremental Static Regeneration](https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration)**. \n    * A feature of `getStaticProps` which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.\n    * *I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.*\n\n1. **[Internationalized (i18n) routing](https://nextjs.org/docs/advanced-features/i18n-routing)**. \n    * If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (`example.com`, `example.fr`) and subpath routing (`example.com/en`, `example.com/fr`) meaning it doesn't restrict how you plan to host your application.\n    * *If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.*\n\n1. **[Measuring Performance - `reportWebVitals`](https://nextjs.org/docs/advanced-features/measuring-performance)**.\n    * Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function `reportWebVitals`. Next.js calls `reportWebVitals` with a single `metrics` parameter, an object containing various properties such as an `id`, the `startTime` of a metric and a `value` which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, [you can use this function to send the `metrics` to your own analytical service](https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics). They supply an example of this for use with Google Analytics.\n    * *~~I haven't used `reportWebVitals` but~~ in the future I'll add it to [my Google Analytics article](https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1). I use `reportWebVitals` on [my personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).*\n    * Using the following function should provide more accurate metrics than plain Google Analytics usage:\n```javascript\nexport function reportWebVitals({ id, name, label, value }) {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js\n  window.gtag('event', name, {\n    event_category:\n      label === 'web-vital' ? 'Web Vitals' : 'Next.js custom metric',\n    value: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n    event_label: id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n}\n```\n\n## Bonus\n* **The incredible amount of examples available in the Next.js GitHub repository**.\n    * If you haven't already stumbled onto them, the [Next.js GitHub repository contains an examples directory](https://github.com/vercel/next.js/tree/canary/examples) that is full of examples. These show you how to use technologies such as [Tailwind CSS](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss), [TypeScript](https://github.com/vercel/next.js/tree/canary/examples/with-typescript) and various CMSs such as [Contentful](https://github.com/vercel/next.js/tree/canary/examples/cms-contentful) with Next.js. You can use `create-next-app` to download an example.\n\n    * *When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.*\n\n## Final words\nThese are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.\n\nIf you liked this article, hit the like button. Something I can do better? Leave a comment!\n\nThanks for reading!","html":"<h2>Introduction</h2>\n<p>Recently I've been using <a href=\"https://nextjs.org/\">Next.js</a> both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React.</p>\n<p>With Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using <a href=\"https://nextjs.org/docs/api-reference/create-next-app\"><code>create-next-app</code></a> as opposed to <a href=\"https://github.com/facebook/create-react-app\"><code>create-react-app</code></a>.</p>\n<p>During my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application.</p>\n<h2>Features you should check out 🤩</h2>\n<ol>\n<li>\n<p><strong>Export your Next.js application into <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">static HTML using <code>next export</code></a></strong>.</p>\n<ul>\n<li>Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using <code>getStaticProps</code>. This feature bridges the gap between Next.js and its longtime alternative <a href=\"https://www.gatsbyjs.com/\">Gatsby</a> which is exclusively a static site generator.</li>\n<li><em>I've used <code>next export</code> to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).</em></li>\n</ul>\n</li>\n<li>\n<p><strong>The <code>next.config.js</code> <a href=\"https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix\"><code>assetPrefix</code></a> and <a href=\"https://nextjs.org/docs/api-reference/next.config.js/basepath\"><code>basePath</code></a> options</strong>.</p>\n<ul>\n<li>On its own <code>assetPrefix</code> allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While <code>basePath</code> provides the ability to host the app on the subpath of a domain such as <code>https://domain.com/app-on-this-subpath</code>.</li>\n<li><em><a href=\"https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba\">In the past I've utilised <code>next export</code>, <code>assetPrefix</code> and <code>basePath</code> together to host a Next.js app on GitHub Pages</a> - without <code>assetPrefix</code> and <code>basePath</code> you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration\">Incremental Static Regeneration</a></strong>.</p>\n<ul>\n<li>A feature of <code>getStaticProps</code> which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.</li>\n<li><em>I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/advanced-features/i18n-routing\">Internationalized (i18n) routing</a></strong>.</p>\n<ul>\n<li>If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (<code>example.com</code>, <code>example.fr</code>) and subpath routing (<code>example.com/en</code>, <code>example.com/fr</code>) meaning it doesn't restrict how you plan to host your application.</li>\n<li><em>If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/advanced-features/measuring-performance\">Measuring Performance - <code>reportWebVitals</code></a></strong>.</p>\n<ul>\n<li>Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function <code>reportWebVitals</code>. Next.js calls <code>reportWebVitals</code> with a single <code>metrics</code> parameter, an object containing various properties such as an <code>id</code>, the <code>startTime</code> of a metric and a <code>value</code> which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, <a href=\"https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics\">you can use this function to send the <code>metrics</code> to your own analytical service</a>. They supply an example of this for use with Google Analytics.</li>\n<li><em><del>I haven't used <code>reportWebVitals</code> but</del> in the future I'll add it to <a href=\"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1\">my Google Analytics article</a>. I use <code>reportWebVitals</code> on <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">my personal website</a>.</em></li>\n<li>Using the following function should provide more accurate metrics than plain Google Analytics usage:</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reportWebVitals</span>(<span class=\"hljs-params\">{ id, name, label, value }</span>) </span>{\n  <span class=\"hljs-comment\">// Use `window.gtag` if you initialized Google Analytics as this example:</span>\n  <span class=\"hljs-comment\">// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js</span>\n  <span class=\"hljs-built_in\">window</span>.gtag(<span class=\"hljs-string\">'event'</span>, name, {\n    <span class=\"hljs-attr\">event_category</span>:\n      label === <span class=\"hljs-string\">'web-vital'</span> ? <span class=\"hljs-string\">'Web Vitals'</span> : <span class=\"hljs-string\">'Next.js custom metric'</span>,\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">Math</span>.round(name === <span class=\"hljs-string\">'CLS'</span> ? value * <span class=\"hljs-number\">1000</span> : value), <span class=\"hljs-comment\">// values must be integers</span>\n    <span class=\"hljs-attr\">event_label</span>: id, <span class=\"hljs-comment\">// id unique to current page load</span>\n    <span class=\"hljs-attr\">non_interaction</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// avoids affecting bounce rate.</span>\n  })\n}</code></pre>\n<h2>Bonus</h2>\n<ul>\n<li><strong>The incredible amount of examples available in the Next.js GitHub repository</strong>.\n<ul>\n<li>\n<p>If you haven't already stumbled onto them, the <a href=\"https://github.com/vercel/next.js/tree/canary/examples\">Next.js GitHub repository contains an examples directory</a> that is full of examples. These show you how to use technologies such as <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">Tailwind CSS</a>, <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-typescript\">TypeScript</a> and various CMSs such as <a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful\">Contentful</a> with Next.js. You can use <code>create-next-app</code> to download an example.</p>\n</li>\n<li>\n<p><em>When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.</em></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Final words</h2>\n<p>These are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.</p>\n<p>If you liked this article, hit the like button. Something I can do better? Leave a comment!</p>\n<p>Thanks for reading!</p>\n"},{"id":571577,"title":"How to use Socket.io with Next.js, Express and TypeScript (ES6 import instead of require statements)","description":"I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.j...","publishedAt":"2021-01-14T17:41:55.721Z","devToSlug":"how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","devToPath":"/jameswallis/how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","devToURL":"https://dev.to/jameswallis/how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","commentsCount":3,"publicReactionsCount":23,"positiveReactionsCount":23,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--64f1pRnW--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/7vw9o474rip6cz4nat0c.png","tags":["javascript","tutorial","nextjs","typescript"],"canonical":"https://wallis.dev/blog/socketio-with-nextjs-and-es6-import","collectionId":-1,"slug":"socketio-with-nextjs-and-es6-import","markdown":"I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.js frontend and a custom Express server backend.\n\nWhile setting up Socket.io I struggled to find documentation explaining how you could set up Socket.io in a TypeScript project using the ES6 `import` syntax rather than `require`. It was even more difficult to find anything that explained how it should all fit together with Next.js.\n\n*And so this post was born...*\n\n## If you're starting from scratch...\n\nIf you want to make a TypeScript/Express custom server Next.js project, mine was created by combining the [custom Express Server example](https://github.com/vercel/next.js/tree/canary/examples/custom-server-express) and [custom TypeScript Server example](https://github.com/vercel/next.js/blob/canary/examples/custom-server-typescript/server/index.ts) located in the Next.js repository.\n\nFirst I created the project using the command `npx create-next-app --example custom-server-typescript` to create the custom TypeScript server. Then I retrofitted Express into it by looking at the custom Express server example. The resulting `server.ts` is at the bottom of this post.\n\n## Why didn't I follow another example?\n\nMost of the examples I saw online want you to do something like the following:\n\n```javascript\nimport express from 'express';\n\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\n```\n\nBut I didn't want two or any random `require` statements in my TypeScript code if I thought they could be avoided.\n\n## My `server.ts` with only ES6 import\n\nThe dependencies you need (In addition to Next.js/React/TypeScript):\n```bash\nnpm install -s express @types/express socket-io\n```\n\nThe code you've been waiting for:\n\n```typescript\nimport express, { Express, Request, Response } from 'express';\nimport * as http from 'http';\nimport next, { NextApiHandler } from 'next';\nimport * as socketio from 'socket.io';\n\nconst port: number = parseInt(process.env.PORT || '3000', 10);\nconst dev: boolean = process.env.NODE_ENV !== 'production';\nconst nextApp = next({ dev });\nconst nextHandler: NextApiHandler = nextApp.getRequestHandler();\n\nnextApp.prepare().then(async() => {\n    const app: Express = express();\n    const server: http.Server = http.createServer(app);\n    const io: socketio.Server = new socketio.Server();\n    io.attach(server);\n\n    app.get('/hello', async (_: Request, res: Response) => {\n        res.send('Hello World')\n    });\n\n    io.on('connection', (socket: socketio.Socket) => {\n        console.log('connection');\n        socket.emit('status', 'Hello from Socket.io');\n\n        socket.on('disconnect', () => {\n            console.log('client disconnected');\n        })\n    });\n\n    app.all('*', (req: any, res: any) => nextHandler(req, res));\n\n    server.listen(port, () => {\n        console.log(`> Ready on http://localhost:${port}`);\n    });\n});\n```\n\n### `server.ts` explanation\n\nThe main difference between my `server.ts` and the ones produced by the Next.js examples is the use of the `http` module to run the server whereas before Express ran it. This is required so that Socket.io can attach to the server once it's setup.\n\nAdditional changes:\n* Changed `app` to be `nextApp` so that it is clearer that it was a `next` app, also changed `handler` to `nextHandler` for the same reason. In addition, it's the convention to use the `app` variable with Express.\n* Used `http.CreateServer()` rather than `const server = require(\"http\").Server(app);` to create the HTTP server.\n* Used `io.attach()` to attach to the HTTP server rather than using require e.g. `const io = require(\"socket.io\")(server);`.\n\n## Summary\n\nThis post demonstrates how to use Socket.io with a Next.js custom server using ES6 `import` rather than `require`.\n\nIf this post helped you drop me a reaction! Found something I could improve? Let me know in the comments.\n\nThanks for reading!\n\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif\">\n","html":"<p>I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.js frontend and a custom Express server backend.</p>\n<p>While setting up Socket.io I struggled to find documentation explaining how you could set up Socket.io in a TypeScript project using the ES6 <code>import</code> syntax rather than <code>require</code>. It was even more difficult to find anything that explained how it should all fit together with Next.js.</p>\n<p><em>And so this post was born...</em></p>\n<h2>If you're starting from scratch...</h2>\n<p>If you want to make a TypeScript/Express custom server Next.js project, mine was created by combining the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/custom-server-express\">custom Express Server example</a> and <a href=\"https://github.com/vercel/next.js/blob/canary/examples/custom-server-typescript/server/index.ts\">custom TypeScript Server example</a> located in the Next.js repository.</p>\n<p>First I created the project using the command <code>npx create-next-app --example custom-server-typescript</code> to create the custom TypeScript server. Then I retrofitted Express into it by looking at the custom Express server example. The resulting <code>server.ts</code> is at the bottom of this post.</p>\n<h2>Why didn't I follow another example?</h2>\n<p>Most of the examples I saw online want you to do something like the following:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n\n<span class=\"hljs-keyword\">const</span> app = express();\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>).Server(app);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>)(server);</code></pre>\n<p>But I didn't want two or any random <code>require</code> statements in my TypeScript code if I thought they could be avoided.</p>\n<h2>My <code>server.ts</code> with only ES6 import</h2>\n<p>The dependencies you need (In addition to Next.js/React/TypeScript):</p>\n<pre><code class=\"hljs language-bash\">npm install -s express @types/express socket-io</code></pre>\n<p>The code you've been waiting for:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> express, { Express, Request, Response } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http'</span>;\n<span class=\"hljs-keyword\">import</span> next, { NextApiHandler } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> socketio <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'socket.io'</span>;\n\n<span class=\"hljs-keyword\">const</span> port: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-built_in\">parseInt</span>(process.env.PORT || <span class=\"hljs-string\">'3000'</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-keyword\">const</span> dev: <span class=\"hljs-built_in\">boolean</span> = process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>;\n<span class=\"hljs-keyword\">const</span> nextApp = next({ dev });\n<span class=\"hljs-keyword\">const</span> nextHandler: NextApiHandler = nextApp.getRequestHandler();\n\nnextApp.prepare().then(<span class=\"hljs-keyword\">async</span>() => {\n    <span class=\"hljs-keyword\">const</span> app: Express = express();\n    <span class=\"hljs-keyword\">const</span> server: http.Server = http.createServer(app);\n    <span class=\"hljs-keyword\">const</span> io: socketio.Server = <span class=\"hljs-keyword\">new</span> socketio.Server();\n    io.attach(server);\n\n    app.get(<span class=\"hljs-string\">'/hello'</span>, <span class=\"hljs-keyword\">async</span> (_: Request, <span class=\"hljs-attr\">res</span>: Response) => {\n        res.send(<span class=\"hljs-string\">'Hello World'</span>)\n    });\n\n    io.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">socket: socketio.Socket</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'connection'</span>);\n        socket.emit(<span class=\"hljs-string\">'status'</span>, <span class=\"hljs-string\">'Hello from Socket.io'</span>);\n\n        socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'client disconnected'</span>);\n        })\n    });\n\n    app.all(<span class=\"hljs-string\">'*'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req: <span class=\"hljs-built_in\">any</span>, res: <span class=\"hljs-built_in\">any</span></span>) =></span> nextHandler(req, res));\n\n    server.listen(port, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`> Ready on http://localhost:<span class=\"hljs-subst\">${port}</span>`</span>);\n    });\n});</code></pre>\n<h3><code>server.ts</code> explanation</h3>\n<p>The main difference between my <code>server.ts</code> and the ones produced by the Next.js examples is the use of the <code>http</code> module to run the server whereas before Express ran it. This is required so that Socket.io can attach to the server once it's setup.</p>\n<p>Additional changes:</p>\n<ul>\n<li>Changed <code>app</code> to be <code>nextApp</code> so that it is clearer that it was a <code>next</code> app, also changed <code>handler</code> to <code>nextHandler</code> for the same reason. In addition, it's the convention to use the <code>app</code> variable with Express.</li>\n<li>Used <code>http.CreateServer()</code> rather than <code>const server = require(\"http\").Server(app);</code> to create the HTTP server.</li>\n<li>Used <code>io.attach()</code> to attach to the HTTP server rather than using require e.g. <code>const io = require(\"socket.io\")(server);</code>.</li>\n</ul>\n<h2>Summary</h2>\n<p>This post demonstrates how to use Socket.io with a Next.js custom server using ES6 <code>import</code> rather than <code>require</code>.</p>\n<p>If this post helped you drop me a reaction! Found something I could improve? Let me know in the comments.</p>\n<p>Thanks for reading!</p>\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif\">\n"},{"id":570490,"title":"20,000 views milestone, what I've learnt about blogging so far","description":"🎉 Last week I hit 20,000 total views! 🎉  When I posted my first article on dev.to last July (2020) I...","publishedAt":"2021-01-13T10:15:00.445Z","devToSlug":"20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj","devToPath":"/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj","devToURL":"https://dev.to/jameswallis/20-000-views-milestone-what-i-ve-learnt-about-blogging-so-far-4laj","commentsCount":4,"publicReactionsCount":9,"positiveReactionsCount":9,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--37WKnhPU--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/wlx9k4sdb7sn59k2qqj2.png","tags":["writing","devjournal","gratitude","yearinreview"],"canonical":"https://wallis.dev/blog/20000-devto-view-milestone","collectionId":-1,"slug":"20000-devto-view-milestone","markdown":"🎉 Last week I hit 20,000 total views! 🎉\n\nWhen I posted [my first article on dev.to last July (2020)](https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g) I never imagined that I'd be sitting here a few months later seeing +20,000 total post views on my stats dashboard but somehow I've achieved it. Big shout out if you've read one of my articles!\n\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/a0h7sAqON67nO/giphy.gif\">\n\n## Why am I creating an article around this?\n\nAnswer: For more views... joking... sort of.\n\nWhen I was approaching 20,000 total views I realised that the best way to celebrate this milestone was with a post, given that this is a blogging platform. I decided that I wanted to discuss my experience during my first few months of blogging. Hopefully, this will achieve a few things:\n1. Inspire someone to start blogging. The most difficult thing is just to start and publish that first article, it took me years.\n2. Document lessons that I've learnt so far. In life we're almost constantly improving, writing articles if definitely no different.\n3. Describe my process. How do I develop ideas and turn them into full-blown articles?\n\n    3.1 Hope that someone calls me out regarding my process in the comments with a differing opinion or advice so that I can continue to improve the standard of my posts. I'd massively appreciate the feedback 🙏 .\n\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/l2YWqlRiYoZIpNRe0/giphy.gif\">\n\n## What I've learnt\n*In no particular order.*\n\n* **Post titles matter.** They're displayed on the Dev.to homepage and are what Google displays. Ideally, they should both summarise your article and entice users to read it! A couple of months ago, I posted an article which gained 25 views over two months. I modified the title to include the technology used and a few days later the count has tripled. It's not much but it proves it has an impact. - [The post in question.](https://dev.to/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c)\n\n* **Keep posting.** Sounds obvious right? My first few posts didn't get many views but over time the view count has risen. Additionally, every post that you complete you're becoming a better writer as you gain more experience.\n\n* **Don't be discouraged by a low amount of reactions.** I'll be honest, I usually forget to react to a post once I've read it, I'm sure many other people do too. Moreover, I have a tutorial that explains [how to use EmailJS with React](https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g). That post doesn't have many reactions, however, I get notifications when the form is used and so far I've had a lot more `test` emails than post reactions.\n\n* **Post what you find interesting.** Most of the posts I've read regarding how to increase your views tell you to research which search terms are popular. While I might have been able to get more views this way, for me that would make blogging feel like a chore. When writing an article my primary aim is to teach the reader something, whether that introduces them to something interesting or guides them through a tutorial. Then when I gain a view or a reaction, I know that I've had a positive impact on their developer journey.\n\n* **Write about what you're working on.** When I'm working on a project I try to determine whether there is an angle I can use to write about it. My first series of blogs was documenting how I rebuilt my Dad's website in Next.js and contains my most popular posts.\n\n* **Use a grammar checker.** So many articles I read on blogging sites have little grammatical errors that distract the reader and ruin the flow of an article. I use Grammarly (free) in an attempt to keep my writing to a high standard.\n\n## My process\nWhen I create an article for my blog this is the rough process that I follow.\n* Starting a new post usually goes one of three ways:\n    1. Jot down a random idea as a new post title and let it sit there for a few days/weeks until I feel motivated to write about that particular subject or create the project in mind.\n    2. Have an idea alongside a sudden burst of motivation, start writing straight away (rarely happens btw).\n    3. Realise I'm working on something that would be cool to tell people about. Write a rough post while developing the project - this is my favourite approach as I find it the most efficient, especially for tutorials.\n\n*The point is I don't have a strict method for starting a blog post, I just do it when I'm feeling it.*\n\nOnce I'm in the zone and am focussing, the rest of the writing goes like this:\n* Determine the focus of the blog. What part of the initial idea is going to be the most unique and helpful to readers. Should the blog be a tutorial for people to follow or just to build knowledge on a subject?\n* Read the article back a few times, editing sentence length and changing some words.\n* Add 4 tags (Dev.to max). I try to go for ones that have descriptions as they are usually the most viewed ones. Only add tags that actually describe the article.\n* Edit the title from the initial idea to reflect the articles finished state. See above for more information on how I write my titles. \n* Post! Then sit back and pray for some views!\n\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/xUA7aYtwwIjmCa8JzO/giphy.gif\">\n\n## What I plan to do next\nIn the next six months, I'm aiming to reach 50,000 views. And, by the end of the year, I want to achieve 100,000 views.\nTo achieve this I will:\n* Create more posts!\n* Update old posts with new content and correcting tutorials where the underlying software has changed.\n* Publicise my posts across the web and share them on Linkedin and other social sites. So far I haven't advertised them at all and rely on followers on dev.to, it's algorithm and Google rankings to gain views on my articles. *This would be beneficial to gain more views, but means advertising my writing to people that know me - so we'll see whether I actually do it or not.*\n\n## Summary\n\nI've thoroughly enjoyed my first few months of blogging on Dev.to. Now that I've crossed the initial \"do I really want people to read what I think\" stage, I'm starting to find writing actually quite relaxing.\n\nLet me know in the comments what you think about my thoughts, what I've learnt and my process, and tell me yours so I can improve mine.\n\nThanks for reading!","html":"<p>🎉 Last week I hit 20,000 total views! 🎉</p>\n<p>When I posted <a href=\"https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g\">my first article on dev.to last July (2020)</a> I never imagined that I'd be sitting here a few months later seeing +20,000 total post views on my stats dashboard but somehow I've achieved it. Big shout out if you've read one of my articles!</p>\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/a0h7sAqON67nO/giphy.gif\">\n<h2>Why am I creating an article around this?</h2>\n<p>Answer: For more views... joking... sort of.</p>\n<p>When I was approaching 20,000 total views I realised that the best way to celebrate this milestone was with a post, given that this is a blogging platform. I decided that I wanted to discuss my experience during my first few months of blogging. Hopefully, this will achieve a few things:</p>\n<ol>\n<li>\n<p>Inspire someone to start blogging. The most difficult thing is just to start and publish that first article, it took me years.</p>\n</li>\n<li>\n<p>Document lessons that I've learnt so far. In life we're almost constantly improving, writing articles if definitely no different.</p>\n</li>\n<li>\n<p>Describe my process. How do I develop ideas and turn them into full-blown articles?</p>\n<p>3.1 Hope that someone calls me out regarding my process in the comments with a differing opinion or advice so that I can continue to improve the standard of my posts. I'd massively appreciate the feedback 🙏 .</p>\n</li>\n</ol>\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/l2YWqlRiYoZIpNRe0/giphy.gif\">\n<h2>What I've learnt</h2>\n<p><em>In no particular order.</em></p>\n<ul>\n<li>\n<p><strong>Post titles matter.</strong> They're displayed on the Dev.to homepage and are what Google displays. Ideally, they should both summarise your article and entice users to read it! A couple of months ago, I posted an article which gained 25 views over two months. I modified the title to include the technology used and a few days later the count has tripled. It's not much but it proves it has an impact. - <a href=\"https://dev.to/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c\">The post in question.</a></p>\n</li>\n<li>\n<p><strong>Keep posting.</strong> Sounds obvious right? My first few posts didn't get many views but over time the view count has risen. Additionally, every post that you complete you're becoming a better writer as you gain more experience.</p>\n</li>\n<li>\n<p><strong>Don't be discouraged by a low amount of reactions.</strong> I'll be honest, I usually forget to react to a post once I've read it, I'm sure many other people do too. Moreover, I have a tutorial that explains <a href=\"https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g\">how to use EmailJS with React</a>. That post doesn't have many reactions, however, I get notifications when the form is used and so far I've had a lot more <code>test</code> emails than post reactions.</p>\n</li>\n<li>\n<p><strong>Post what you find interesting.</strong> Most of the posts I've read regarding how to increase your views tell you to research which search terms are popular. While I might have been able to get more views this way, for me that would make blogging feel like a chore. When writing an article my primary aim is to teach the reader something, whether that introduces them to something interesting or guides them through a tutorial. Then when I gain a view or a reaction, I know that I've had a positive impact on their developer journey.</p>\n</li>\n<li>\n<p><strong>Write about what you're working on.</strong> When I'm working on a project I try to determine whether there is an angle I can use to write about it. My first series of blogs was documenting how I rebuilt my Dad's website in Next.js and contains my most popular posts.</p>\n</li>\n<li>\n<p><strong>Use a grammar checker.</strong> So many articles I read on blogging sites have little grammatical errors that distract the reader and ruin the flow of an article. I use Grammarly (free) in an attempt to keep my writing to a high standard.</p>\n</li>\n</ul>\n<h2>My process</h2>\n<p>When I create an article for my blog this is the rough process that I follow.</p>\n<ul>\n<li>Starting a new post usually goes one of three ways:\n<ol>\n<li>Jot down a random idea as a new post title and let it sit there for a few days/weeks until I feel motivated to write about that particular subject or create the project in mind.</li>\n<li>Have an idea alongside a sudden burst of motivation, start writing straight away (rarely happens btw).</li>\n<li>Realise I'm working on something that would be cool to tell people about. Write a rough post while developing the project - this is my favourite approach as I find it the most efficient, especially for tutorials.</li>\n</ol>\n</li>\n</ul>\n<p><em>The point is I don't have a strict method for starting a blog post, I just do it when I'm feeling it.</em></p>\n<p>Once I'm in the zone and am focussing, the rest of the writing goes like this:</p>\n<ul>\n<li>Determine the focus of the blog. What part of the initial idea is going to be the most unique and helpful to readers. Should the blog be a tutorial for people to follow or just to build knowledge on a subject?</li>\n<li>Read the article back a few times, editing sentence length and changing some words.</li>\n<li>Add 4 tags (Dev.to max). I try to go for ones that have descriptions as they are usually the most viewed ones. Only add tags that actually describe the article.</li>\n<li>Edit the title from the initial idea to reflect the articles finished state. See above for more information on how I write my titles.</li>\n<li>Post! Then sit back and pray for some views!</li>\n</ul>\n<img width=\"100%\" style=\"width:100%\" src=\"https://media.giphy.com/media/xUA7aYtwwIjmCa8JzO/giphy.gif\">\n<h2>What I plan to do next</h2>\n<p>In the next six months, I'm aiming to reach 50,000 views. And, by the end of the year, I want to achieve 100,000 views.\nTo achieve this I will:</p>\n<ul>\n<li>Create more posts!</li>\n<li>Update old posts with new content and correcting tutorials where the underlying software has changed.</li>\n<li>Publicise my posts across the web and share them on Linkedin and other social sites. So far I haven't advertised them at all and rely on followers on dev.to, it's algorithm and Google rankings to gain views on my articles. <em>This would be beneficial to gain more views, but means advertising my writing to people that know me - so we'll see whether I actually do it or not.</em></li>\n</ul>\n<h2>Summary</h2>\n<p>I've thoroughly enjoyed my first few months of blogging on Dev.to. Now that I've crossed the initial \"do I really want people to read what I think\" stage, I'm starting to find writing actually quite relaxing.</p>\n<p>Let me know in the comments what you think about my thoughts, what I've learnt and my process, and tell me yours so I can improve mine.</p>\n<p>Thanks for reading!</p>\n"},{"id":566589,"title":"Deploying a Next.js project on Vercel in less than three minutes - with a custom domain","description":"My personal website, wallis.dev, used to be hosted in a Docker container on a Digital Ocean droplet t...","publishedAt":"2021-01-10T14:24:38.934Z","devToSlug":"deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","devToPath":"/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","devToURL":"https://dev.to/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","commentsCount":0,"publicReactionsCount":13,"positiveReactionsCount":13,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--DWovAEyS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/lr4rm1p2pcezmxqs5dqk.png","tags":["nextjs","javascript","tutorial","react"],"canonical":"https://wallis.dev/blog/deploy-nextjs-on-vercel","collectionId":-1,"slug":"deploy-nextjs-on-vercel","markdown":"[My personal website, wallis.dev,](https://wallis.dev) used to be hosted in a Docker container on a Digital Ocean droplet that cost me about £5 a month and a few hours each year of effort to maintain. Last week I deployed a website onto Vercel and was immediately impressed with the seamless deployment process - even with the knowledge that Vercel is the company behind Next.js. Since then, I've deployed my website onto Vercel and sunset my Digital Ocean droplet.\n\n## In this blog\n1. [How I used to host my website](#preface)\n1. [Motivations behind moving to Vercel](#motivation)\n1. [Deploying a GitHub project to Vercel](#deploy)\n1. [Adding a custom domain to a Vercel project](#domain)\n\n## Preface <a name=\"preface\"></a>\n\nI first developed [wallis.dev](https://wallis.dev) just over 2 years ago using Next.js 7.0.2. At the time static exporting didn't exist and, as far as I can remember, Vercel's hosting (then Zeit) was in its infancy. As a result, I hosted it as a constantly running Docker container on a Digital Ocean droplet.\n\nMy site had been hosted on Digital Ocean droplet ever since. Not once did I run into issues aside from having to update versions of software I was using to host the site, such as Docker and [Traefik](https://traefik.io/traefik/). However, after researching Vercel and deploying another project on it, it was totally obvious that the droplet was overkill, an item of unnecessary expenditure and a waste of time maintaining it.\n\n## Motivation behind moving to Vercel <a name=\"motivation\"></a>\n\n1. **Better CI/CD pipeline.** Through Vercel's first-class integration with GitHub I was able to move from having to `ssh` onto my droplet, `docker pull` my updated image and restart it's Docker container to just committing the code to GitHub and allowing Vercel automagically build and publish it for me. \n2. **Preview URLs.** Vercel automatically creates a preview URL for every pull request you make. Meaning I can send changes to other people for them to proofread and give feedback on changes without committing them to the main site itself. \n3. **No server maintenance required.** Currently I have to ensure that software on my droplet, such as Docker, Docker Compose and a [Traefik](https://traefik.io/traefik/) container (reverse proxy that makes the website accessible outside the droplet) is kept up-to-date. Moving to Vercel means I can delete the droplet and forget about the complicated Traefik setup.\n4. Last but not least, **to save money**. While £5 a month isn't a huge amount it adds up (£60 a year). If I could host my site for free why wouldn't I!\n\nThose are the 4 major reasons I decided to switch my deployment strategy. Now I'll take you through connecting Vercel and a GitHub repository and deploying your site for the first time.\n\n## Deploying my website onto Vercel for the first time <a name=\"deploy\"></a>\n\nFirst, create an account with Vercel if don't already have one. Then navigate to https://vercel.com/new - the site that is used to create a new project with Vercel.\n\nOnce you've navigated to https://vercel.com/new you should see an `Import Git Repository` input that looks like the following:\n\n![Import Git Repository screen](https://dev-to-uploads.s3.amazonaws.com/i/wq065v0sko16iexzv1tq.png)\n\nYou want to select the `Import` button next to the GitHub repository of your choice. If it isn't appearing use the search to locate your repository:\n\n![Import Git Repository screen narrowed down using search](https://dev-to-uploads.s3.amazonaws.com/i/tdbbx2d06bib197vfqm3.png)\n\nNext, you'll be asked to `Select Vercel Scope`. As this is my personal website I'll be using my `Personal Account` - If you like you can create a team but beware this costs money! I'd stick to your personal account unless you know what you're doing.\n\n![Select Vercel Scope screen](https://dev-to-uploads.s3.amazonaws.com/i/kkxm2tzrr9qursvsrbdn.png)\n\nThen you'll see the `Import Project` screen. Here you can name your project within Vercel and select the `Framework Preset`. If you're using a Next.js project it should auto-fill both the Name and Framework by scanning your GitHub repository. \n* If you're using a non-standard build command (i.e. not `npm run build`) or a non-standard build output directory you can enter those into the `Build and Output Settings` input area. This will advise Vercel on how to build your project and where to find it once it's built.\n* To use custom environment variables with your project add them through the `Environment Variables` input area.\n\nAside from changing the `Project Name`, I left all values as default. This is how my `Import Project` screen looked:\n\n![Import Project screen](https://dev-to-uploads.s3.amazonaws.com/i/a830ctjpmgjwbkbc3j5o.png)\n\nThen just hit `Deploy`! Vercel will verify that your project builds before creating an initial deployment for your website, publishing it to a placeholder URL which will look something like `personal-website.james-wallis.vercel.app`.\n\nWhen you clicked `Deploy` you should have seen the deployment screen appear alongside the, now greyed out, setup wizard:\n\n![Initial Deployment screen](https://dev-to-uploads.s3.amazonaws.com/i/i4rpetnnh9hitbhd6g1t.png)\n\nWhen the deploy has succeeded you will be greeted by this screen:\n\n![Congratulations screen](https://dev-to-uploads.s3.amazonaws.com/i/vwliv7jv61etk3yvhaxu.png)\n\nWell done, you've deployed your website onto Vercel! From the `Congratulations` screen, you can both visit it in your browser and see it live and also open the Vercel Dashboard to see the live state of your project.\n\n## Adding a custom domain to your Vercel project <a name=\"domain\"></a>\n\n*Prereqs: You already need to own the desired domain name and have access to its DNS records.*\n\nThe second step to hosting [wallis.dev](https://wallis.dev) through Vercel is to connect the `wallis.dev` domain name to my Vercel project.\n\nFollow these instructions to do this:\n\nNavigate to your Vercel Dashboard using the button in the last section. It'll look like this:\n\n![Vercel Dashboard screen](https://dev-to-uploads.s3.amazonaws.com/i/9akpxtzlh7e5fh5lzpi8.png)\n\nThen select `Settings` from the navigation and `Domains` in the side menu of Project Settings. The page should look like so:\n\n![Domain settings screen](https://dev-to-uploads.s3.amazonaws.com/i/h7tk6rw3ni9lcqwfzpw7.png)\n\nThis is the screen where you can add a custom domain to your Vercel project. Using the input box, enter your desired domain name. Then click `Add`. *I'm using `wallis.dev` but you can use a subdomain such as `www.youdomain.com` or `mywebsite.customdomain.com` if you prefer.*\n\n![Domain input](https://dev-to-uploads.s3.amazonaws.com/i/vrib8zsnc8bzcwsg1nsg.png)\n\nYour domain will be added but it will display an \"Invalid Configuration\" error because you need to modify your domain's DNS settings to point at Vercel. Fortunately, Vercel tells you exactly what you need to do to point your domain at your website.\n\nAs I'm using `wallis.dev` I need to add an `A` record to my DNS settings. You can do this by navigating to your domain providers website and you should be able to find provider-specific instructions online.\n\nIf you're using a subdomain such as `www.wallis.dev` you'll need to add a `CNAME` record instead of an `A` record.\n\n*By the way an A record uses a domain name to find the IP address of a computer connected to the internet. The A in A record stands for Address. A CNAME record is a Canonical Name record and maps one domain, rather than an IP address, to another.*\n\nOnce you've configured your DNS settings the Vercel dashboard should appear as the following:\n\n![Working domain screen](https://dev-to-uploads.s3.amazonaws.com/i/px9rw0jwu18ed2x7hwxj.png)\n\nDouble congratulations! You've successfully launched your website onto Vercel and configured it to use your custom domain. Don't worry if you can't reach your project using your custom domain straight away, it might likely take some time for DNS changes to apply - make a coffee and check again later.\n\n## Final words\nHopefully, this article has convinced you to drop whatever complicated hosting solution you created years ago and join the easy life on Vercel!\n\nI know for sure that my development cycle has been dramatically improved by the change, let me know in the comments if yours has too. Maybe you disagree with my motivations and prefer to be in total control? Let me know in any case!\n\nThanks for reading!\n\n## Read my Wallis Consultancy blogs?\n\nIf you've read my Wallis Consultancy blog you'd have seen that I [launched that Next.js project on GitHub Pages](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn). Well since writing them I've moved it to Vercel as well so that I can take advantage of the greater settings available such as having multiple domain names that redirect to one website. \n\n![Wallis Consultancy launched](https://dev-to-uploads.s3.amazonaws.com/i/xz1q6txq43t3r251vztm.png)\n\n\n\n","html":"<p><a href=\"https://wallis.dev\">My personal website, wallis.dev,</a> used to be hosted in a Docker container on a Digital Ocean droplet that cost me about £5 a month and a few hours each year of effort to maintain. Last week I deployed a website onto Vercel and was immediately impressed with the seamless deployment process - even with the knowledge that Vercel is the company behind Next.js. Since then, I've deployed my website onto Vercel and sunset my Digital Ocean droplet.</p>\n<h2>In this blog</h2>\n<ol>\n<li><a href=\"#preface\">How I used to host my website</a></li>\n<li><a href=\"#motivation\">Motivations behind moving to Vercel</a></li>\n<li><a href=\"#deploy\">Deploying a GitHub project to Vercel</a></li>\n<li><a href=\"#domain\">Adding a custom domain to a Vercel project</a></li>\n</ol>\n<h2>Preface <a name=\"preface\"></a></h2>\n<p>I first developed <a href=\"https://wallis.dev\">wallis.dev</a> just over 2 years ago using Next.js 7.0.2. At the time static exporting didn't exist and, as far as I can remember, Vercel's hosting (then Zeit) was in its infancy. As a result, I hosted it as a constantly running Docker container on a Digital Ocean droplet.</p>\n<p>My site had been hosted on Digital Ocean droplet ever since. Not once did I run into issues aside from having to update versions of software I was using to host the site, such as Docker and <a href=\"https://traefik.io/traefik/\">Traefik</a>. However, after researching Vercel and deploying another project on it, it was totally obvious that the droplet was overkill, an item of unnecessary expenditure and a waste of time maintaining it.</p>\n<h2>Motivation behind moving to Vercel <a name=\"motivation\"></a></h2>\n<ol>\n<li><strong>Better CI/CD pipeline.</strong> Through Vercel's first-class integration with GitHub I was able to move from having to <code>ssh</code> onto my droplet, <code>docker pull</code> my updated image and restart it's Docker container to just committing the code to GitHub and allowing Vercel automagically build and publish it for me.</li>\n<li><strong>Preview URLs.</strong> Vercel automatically creates a preview URL for every pull request you make. Meaning I can send changes to other people for them to proofread and give feedback on changes without committing them to the main site itself.</li>\n<li><strong>No server maintenance required.</strong> Currently I have to ensure that software on my droplet, such as Docker, Docker Compose and a <a href=\"https://traefik.io/traefik/\">Traefik</a> container (reverse proxy that makes the website accessible outside the droplet) is kept up-to-date. Moving to Vercel means I can delete the droplet and forget about the complicated Traefik setup.</li>\n<li>Last but not least, <strong>to save money</strong>. While £5 a month isn't a huge amount it adds up (£60 a year). If I could host my site for free why wouldn't I!</li>\n</ol>\n<p>Those are the 4 major reasons I decided to switch my deployment strategy. Now I'll take you through connecting Vercel and a GitHub repository and deploying your site for the first time.</p>\n<h2>Deploying my website onto Vercel for the first time <a name=\"deploy\"></a></h2>\n<p>First, create an account with Vercel if don't already have one. Then navigate to <a href=\"https://vercel.com/new\">https://vercel.com/new</a> - the site that is used to create a new project with Vercel.</p>\n<p>Once you've navigated to <a href=\"https://vercel.com/new\">https://vercel.com/new</a> you should see an <code>Import Git Repository</code> input that looks like the following:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/wq065v0sko16iexzv1tq.png\" alt=\"Import Git Repository screen\"></p>\n<p>You want to select the <code>Import</code> button next to the GitHub repository of your choice. If it isn't appearing use the search to locate your repository:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/tdbbx2d06bib197vfqm3.png\" alt=\"Import Git Repository screen narrowed down using search\"></p>\n<p>Next, you'll be asked to <code>Select Vercel Scope</code>. As this is my personal website I'll be using my <code>Personal Account</code> - If you like you can create a team but beware this costs money! I'd stick to your personal account unless you know what you're doing.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/kkxm2tzrr9qursvsrbdn.png\" alt=\"Select Vercel Scope screen\"></p>\n<p>Then you'll see the <code>Import Project</code> screen. Here you can name your project within Vercel and select the <code>Framework Preset</code>. If you're using a Next.js project it should auto-fill both the Name and Framework by scanning your GitHub repository.</p>\n<ul>\n<li>If you're using a non-standard build command (i.e. not <code>npm run build</code>) or a non-standard build output directory you can enter those into the <code>Build and Output Settings</code> input area. This will advise Vercel on how to build your project and where to find it once it's built.</li>\n<li>To use custom environment variables with your project add them through the <code>Environment Variables</code> input area.</li>\n</ul>\n<p>Aside from changing the <code>Project Name</code>, I left all values as default. This is how my <code>Import Project</code> screen looked:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/a830ctjpmgjwbkbc3j5o.png\" alt=\"Import Project screen\"></p>\n<p>Then just hit <code>Deploy</code>! Vercel will verify that your project builds before creating an initial deployment for your website, publishing it to a placeholder URL which will look something like <code>personal-website.james-wallis.vercel.app</code>.</p>\n<p>When you clicked <code>Deploy</code> you should have seen the deployment screen appear alongside the, now greyed out, setup wizard:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/i4rpetnnh9hitbhd6g1t.png\" alt=\"Initial Deployment screen\"></p>\n<p>When the deploy has succeeded you will be greeted by this screen:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vwliv7jv61etk3yvhaxu.png\" alt=\"Congratulations screen\"></p>\n<p>Well done, you've deployed your website onto Vercel! From the <code>Congratulations</code> screen, you can both visit it in your browser and see it live and also open the Vercel Dashboard to see the live state of your project.</p>\n<h2>Adding a custom domain to your Vercel project <a name=\"domain\"></a></h2>\n<p><em>Prereqs: You already need to own the desired domain name and have access to its DNS records.</em></p>\n<p>The second step to hosting <a href=\"https://wallis.dev\">wallis.dev</a> through Vercel is to connect the <code>wallis.dev</code> domain name to my Vercel project.</p>\n<p>Follow these instructions to do this:</p>\n<p>Navigate to your Vercel Dashboard using the button in the last section. It'll look like this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/9akpxtzlh7e5fh5lzpi8.png\" alt=\"Vercel Dashboard screen\"></p>\n<p>Then select <code>Settings</code> from the navigation and <code>Domains</code> in the side menu of Project Settings. The page should look like so:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/h7tk6rw3ni9lcqwfzpw7.png\" alt=\"Domain settings screen\"></p>\n<p>This is the screen where you can add a custom domain to your Vercel project. Using the input box, enter your desired domain name. Then click <code>Add</code>. <em>I'm using <code>wallis.dev</code> but you can use a subdomain such as <code>www.youdomain.com</code> or <code>mywebsite.customdomain.com</code> if you prefer.</em></p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vrib8zsnc8bzcwsg1nsg.png\" alt=\"Domain input\"></p>\n<p>Your domain will be added but it will display an \"Invalid Configuration\" error because you need to modify your domain's DNS settings to point at Vercel. Fortunately, Vercel tells you exactly what you need to do to point your domain at your website.</p>\n<p>As I'm using <code>wallis.dev</code> I need to add an <code>A</code> record to my DNS settings. You can do this by navigating to your domain providers website and you should be able to find provider-specific instructions online.</p>\n<p>If you're using a subdomain such as <code>www.wallis.dev</code> you'll need to add a <code>CNAME</code> record instead of an <code>A</code> record.</p>\n<p><em>By the way an A record uses a domain name to find the IP address of a computer connected to the internet. The A in A record stands for Address. A CNAME record is a Canonical Name record and maps one domain, rather than an IP address, to another.</em></p>\n<p>Once you've configured your DNS settings the Vercel dashboard should appear as the following:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/px9rw0jwu18ed2x7hwxj.png\" alt=\"Working domain screen\"></p>\n<p>Double congratulations! You've successfully launched your website onto Vercel and configured it to use your custom domain. Don't worry if you can't reach your project using your custom domain straight away, it might likely take some time for DNS changes to apply - make a coffee and check again later.</p>\n<h2>Final words</h2>\n<p>Hopefully, this article has convinced you to drop whatever complicated hosting solution you created years ago and join the easy life on Vercel!</p>\n<p>I know for sure that my development cycle has been dramatically improved by the change, let me know in the comments if yours has too. Maybe you disagree with my motivations and prefer to be in total control? Let me know in any case!</p>\n<p>Thanks for reading!</p>\n<h2>Read my Wallis Consultancy blogs?</h2>\n<p>If you've read my Wallis Consultancy blog you'd have seen that I <a href=\"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn\">launched that Next.js project on GitHub Pages</a>. Well since writing them I've moved it to Vercel as well so that I can take advantage of the greater settings available such as having multiple domain names that redirect to one website.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/xz1q6txq43t3r251vztm.png\" alt=\"Wallis Consultancy launched\"></p>\n"},{"id":530778,"title":"Quickly adding Google Analytics to Next.js with FAQs","description":"This article not only demonstrates how to add Google Analytics to a Next.js app but also explains what you're actually doing.","publishedAt":"2020-12-30T14:44:44.789Z","devToSlug":"adding-google-analytics-to-any-next-js-app-46h1","devToPath":"/jameswallis/adding-google-analytics-to-any-next-js-app-46h1","devToURL":"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1","commentsCount":2,"publicReactionsCount":21,"positiveReactionsCount":21,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--DK3KN3Uz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/mvf2e7bf9m74bgku1ovm.png","tags":["tutorial","react","javascript","nextjs"],"canonical":"https://wallis.dev/blog/nextjs-google-analytics","collectionId":-1,"slug":"nextjs-google-analytics","markdown":"---\ndescription: \"This article not only demonstrates how to add Google Analytics to a Next.js app but also explains what you're actually doing.\"\n---\nI use Google Analytics to track how many users are visiting websites that I develop on a weekly basis, how long they stay on the site and what are the most popular pages.\n\nIt's easy to add to your site and in minutes you'll go from having no clue how people are using your website to being able to record and analyse every detail on every interaction a user has with your website.\n\nI'll split this post up into 3 parts:\n1. What we're doing\n2. How to add Google Analytics to Next.js\n3. FAQs - A lot of the Google Analytics tutorials don't explain why you should do things a certain way. For example, why are we using this Next.js `_document.js` file and what does it do? or how to I get a `GA_MEASUREMENT_ID`?\n\n**Key takeaway** if you're glancing at this article:\n> *Adding Google Analytics to a Next.js project is easy and you can copy and paste the code below. I wouldn't use an external NPM module as you're just adding another dependency that can become outdated in the future.*\n\n## Why add Google Analytics\n\n> Google Analytics is a web analytics service offered by Google that tracks and reports website traffic.\n\nI've recently begun adding Google Analytics to every website that I've developed including [wallisconsultancy.co.uk which I recently developed alongside a series of tutorial blog posts](https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g). Google Analytics is great at tracking website usage and more, although I currently use it purely to monitor user count, most popular pages and page performance which is all reported on the Google Analytics dashboard.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3cew7a2pc9gsnwiq4fyt.png)\n*A Google Analytics dashboard*\n\nIn addition to the above, it's **free** and takes minutes to set up with a Next.js project (if you follow this post 😉).\n\n## Adding Google Analytics to a Next.js project\n\n### Prerequisites\n\n1. A Next.js project hosted on a domain that can be used with Google Analytics preferably with at least one page. - [Vercel (creators of Next.js) is the easiest place to host your website](https://vercel.com/solutions/nextjs).\n2. A Google Analytics account with a created property and the ID (known as a `GA_MEASUREMENT_ID`) that is given to you and is used to identify your website with Google. Keep the `GA_MEASUREMENT_ID` handy, you'll need it. - *I've covered this in the FAQs if you haven't used Google Analytics before*.\n\n### Add/modify the `_document.js` file in your Next.js project\n\nCreate a [custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document) file in your `pages` directory and add the following code:\n*If you're using TypeScript, check out this [custom `_document.tsx` on GitHub](https://github.com/james-wallis/TheVECentre/blob/main/pages/_document.tsx) instead.*\n\n```jsx\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    const GA_MEASUREMENT_ID = 'GA_MEASUREMENT_ID'; // Paste your GTAG here\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <script\n            async\n            src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n          />\n          <script\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${GA_MEASUREMENT_ID}', {\n                  page_path: window.location.pathname,\n                });\n              `,\n            }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\nIf you've already got a custom `_document.js` then the key parts are within the `Head` component (remember to add the `GA_MEASUREMENT_ID` variable):\n```jsx\n<Head>\n  <script\n    async\n    src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n  />\n  <script\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML={{\n      __html: `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('config', '${GA_MEASUREMENT_ID}', {\n          page_path: window.location.pathname,\n        });\n      `,\n    }}\n  />\n</Head>\n```\n\nExplanation:\n* In the first `script` tag the Google Analytics JavaScript file is loaded into the browser.\n* In the second `script` tag the Google Analytics code is initialised and tracking is started on the current page.\n\nOnce you've added your `GA_MEASUREMENT_ID` and pushed your changes into a live environment such as Vercel, you should see data appearing on your Google Analytics dashboard - if you don't, try visiting your website!\n\nAnd that is all it takes to add Google Analytics to your Next.js application - told you it was easy! \n\n## FAQs\n\n### What does the code above load onto my website?\n\nThe `gtag.js` is a script which allows you to send event data to Google, in this case it's used for Google Analytics. Read more about it and the `GA_MEASUREMENT_ID` at [Google Developers - `gtag.js`](https://developers.google.com/analytics/devguides/collection/gtagjs).\n\n### What is a `GA_MEASUREMENT_ID` and how do I get one?\n\nThe `GA_MEASUREMENT_ID` is the ID of the Google Analytics property that you want to collect data for. To get a `GA_MEASUREMENT_ID` you need to create a new property on Google Analytics - you can follow this [Google Support article to learn how to sign up to Google Analytics and create a property](https://support.google.com/analytics/answer/10269537).\n\n### What are the `_document.js` and `_app.js` files in a Next.js project?\n\nThe Next.js specific `_document.js` and `_app.js` are two special files that live in the `pages` directory but are not rendered as pages by Next.js (you can't reach `/_document` in your browser).\n\n*Note: The `Head` component used in `_document.js`'s `Head` different to `next/head` and should be used for common code on every page.*\n\n`_document.js` is rendered server-side only and controls the `<html>` and `<body>` tags of HTML. It can be used to add custom elements into your `<html>` tag that will be the same on every page such as the Google Analytics code or a favicon.\n\n`_app.js` is rendered client-side, potentially on every page change. It's essentially a wrapper around each Next.js page that you have. It can be used to maintain a consistent layout on each page, add a custom CSS stylesheet or persist state on a page change.\n\nYou can read more about these on the Next.js website:\n* [Custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document)\n* [Custom `_app.js`](https://nextjs.org/docs/advanced-features/custom-app)\n\n### Why use the `_document.js` file over `_app.js`?\n\nThe `Head` component (from `next/document`) that is used in `_document.js` is rendered serverside whereas the `Head` component (from `next/head`) in `_app.js` will update on each page change meaning that the Google Analytics script may be reloaded which could slow down the site.\n\n## Round up\n\nIf anything I've said has helped you add Google Analytics to your site, give me a reaction.\n\nAny more questions? Let me know in the comments!\n\nThanks for reading the article!\n","html":"<p>I use Google Analytics to track how many users are visiting websites that I develop on a weekly basis, how long they stay on the site and what are the most popular pages.</p>\n<p>It's easy to add to your site and in minutes you'll go from having no clue how people are using your website to being able to record and analyse every detail on every interaction a user has with your website.</p>\n<p>I'll split this post up into 3 parts:</p>\n<ol>\n<li>What we're doing</li>\n<li>How to add Google Analytics to Next.js</li>\n<li>FAQs - A lot of the Google Analytics tutorials don't explain why you should do things a certain way. For example, why are we using this Next.js <code>_document.js</code> file and what does it do? or how to I get a <code>GA_MEASUREMENT_ID</code>?</li>\n</ol>\n<p><strong>Key takeaway</strong> if you're glancing at this article:</p>\n<blockquote>\n<p><em>Adding Google Analytics to a Next.js project is easy and you can copy and paste the code below. I wouldn't use an external NPM module as you're just adding another dependency that can become outdated in the future.</em></p>\n</blockquote>\n<h2>Why add Google Analytics</h2>\n<blockquote>\n<p>Google Analytics is a web analytics service offered by Google that tracks and reports website traffic.</p>\n</blockquote>\n<p>I've recently begun adding Google Analytics to every website that I've developed including <a href=\"https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g\">wallisconsultancy.co.uk which I recently developed alongside a series of tutorial blog posts</a>. Google Analytics is great at tracking website usage and more, although I currently use it purely to monitor user count, most popular pages and page performance which is all reported on the Google Analytics dashboard.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/3cew7a2pc9gsnwiq4fyt.png\" alt=\"Alt Text\">\n<em>A Google Analytics dashboard</em></p>\n<p>In addition to the above, it's <strong>free</strong> and takes minutes to set up with a Next.js project (if you follow this post 😉).</p>\n<h2>Adding Google Analytics to a Next.js project</h2>\n<h3>Prerequisites</h3>\n<ol>\n<li>A Next.js project hosted on a domain that can be used with Google Analytics preferably with at least one page. - <a href=\"https://vercel.com/solutions/nextjs\">Vercel (creators of Next.js) is the easiest place to host your website</a>.</li>\n<li>A Google Analytics account with a created property and the ID (known as a <code>GA_MEASUREMENT_ID</code>) that is given to you and is used to identify your website with Google. Keep the <code>GA_MEASUREMENT_ID</code> handy, you'll need it. - <em>I've covered this in the FAQs if you haven't used Google Analytics before</em>.</li>\n</ol>\n<h3>Add/modify the <code>_document.js</code> file in your Next.js project</h3>\n<p>Create a <a href=\"https://nextjs.org/docs/advanced-features/custom-document\">custom <code>_document.js</code></a> file in your <code>pages</code> directory and add the following code:\n<em>If you're using TypeScript, check out this <a href=\"https://github.com/james-wallis/TheVECentre/blob/main/pages/_document.tsx\">custom <code>_document.tsx</code> on GitHub</a> instead.</em></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> Document, {\n  Html, Head, Main, NextScript,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/document'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Document</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInitialProps</span>(<span class=\"hljs-params\">ctx</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> Document.getInitialProps(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> GA_MEASUREMENT_ID = <span class=\"hljs-string\">'GA_MEASUREMENT_ID'</span>; <span class=\"hljs-comment\">// Paste your GTAG here</span>\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n            <span class=\"hljs-attr\">async</span>\n            <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">www.googletagmanager.com</span>/<span class=\"hljs-attr\">gtag</span>/<span class=\"hljs-attr\">js</span>?<span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">${GA_MEASUREMENT_ID}</span>`}\n          /></span><span class=\"handlebars\"><span class=\"xml\">\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n            // <span class=\"hljs-attr\">eslint-disable-next-line</span> <span class=\"hljs-attr\">react</span>/<span class=\"hljs-attr\">no-danger</span>\n            <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=</span></span><span class=\"hljs-template-variable\">{{\n              <span class=\"hljs-name\">__html:</span> `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(<span class=\"hljs-name\">arguments</span>);}\n                gtag(<span class=\"hljs-name\">'js'</span>, new Date());\n                gtag(<span class=\"hljs-name\">'config'</span>, <span class=\"hljs-string\">'${GA_MEASUREMENT_ID}'</span>, {\n                  page_path: window.location.pathname,\n                });\n              `,\n            }}</span><span class=\"xml\"><span class=\"hljs-tag\">\n          /></span><span class=\"handlebars\"><span class=\"xml\">\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Main</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NextScript</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Html</span>></span></span></span></span></span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyDocument;</code></pre>\n<p>If you've already got a custom <code>_document.js</code> then the key parts are within the <code>Head</code> component (remember to add the <code>GA_MEASUREMENT_ID</code> variable):</p>\n<pre><code class=\"hljs language-jsx\">&#x3C;Head>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n    <span class=\"hljs-attr\">async</span>\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">www.googletagmanager.com</span>/<span class=\"hljs-attr\">gtag</span>/<span class=\"hljs-attr\">js</span>?<span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">${GA_MEASUREMENT_ID}</span>`}\n  /></span></span>\n  <span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n    // <span class=\"hljs-attr\">eslint-disable-next-line</span> <span class=\"hljs-attr\">react</span>/<span class=\"hljs-attr\">no-danger</span>\n    <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=</span></span><span class=\"hljs-template-variable\">{{\n      <span class=\"hljs-name\">__html:</span> `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(<span class=\"hljs-name\">arguments</span>);}\n        gtag(<span class=\"hljs-name\">'js'</span>, new Date());\n        gtag(<span class=\"hljs-name\">'config'</span>, <span class=\"hljs-string\">'${GA_MEASUREMENT_ID}'</span>, {\n          page_path: window.location.pathname,\n        });\n      `,\n    }}</span><span class=\"xml\"><span class=\"hljs-tag\">\n  /></span></span></span></span>\n&#x3C;/Head></code></pre>\n<p>Explanation:</p>\n<ul>\n<li>In the first <code>script</code> tag the Google Analytics JavaScript file is loaded into the browser.</li>\n<li>In the second <code>script</code> tag the Google Analytics code is initialised and tracking is started on the current page.</li>\n</ul>\n<p>Once you've added your <code>GA_MEASUREMENT_ID</code> and pushed your changes into a live environment such as Vercel, you should see data appearing on your Google Analytics dashboard - if you don't, try visiting your website!</p>\n<p>And that is all it takes to add Google Analytics to your Next.js application - told you it was easy!</p>\n<h2>FAQs</h2>\n<h3>What does the code above load onto my website?</h3>\n<p>The <code>gtag.js</code> is a script which allows you to send event data to Google, in this case it's used for Google Analytics. Read more about it and the <code>GA_MEASUREMENT_ID</code> at <a href=\"https://developers.google.com/analytics/devguides/collection/gtagjs\">Google Developers - <code>gtag.js</code></a>.</p>\n<h3>What is a <code>GA_MEASUREMENT_ID</code> and how do I get one?</h3>\n<p>The <code>GA_MEASUREMENT_ID</code> is the ID of the Google Analytics property that you want to collect data for. To get a <code>GA_MEASUREMENT_ID</code> you need to create a new property on Google Analytics - you can follow this <a href=\"https://support.google.com/analytics/answer/10269537\">Google Support article to learn how to sign up to Google Analytics and create a property</a>.</p>\n<h3>What are the <code>_document.js</code> and <code>_app.js</code> files in a Next.js project?</h3>\n<p>The Next.js specific <code>_document.js</code> and <code>_app.js</code> are two special files that live in the <code>pages</code> directory but are not rendered as pages by Next.js (you can't reach <code>/_document</code> in your browser).</p>\n<p><em>Note: The <code>Head</code> component used in <code>_document.js</code>'s <code>Head</code> different to <code>next/head</code> and should be used for common code on every page.</em></p>\n<p><code>_document.js</code> is rendered server-side only and controls the <code>&#x3C;html></code> and <code>&#x3C;body></code> tags of HTML. It can be used to add custom elements into your <code>&#x3C;html></code> tag that will be the same on every page such as the Google Analytics code or a favicon.</p>\n<p><code>_app.js</code> is rendered client-side, potentially on every page change. It's essentially a wrapper around each Next.js page that you have. It can be used to maintain a consistent layout on each page, add a custom CSS stylesheet or persist state on a page change.</p>\n<p>You can read more about these on the Next.js website:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/advanced-features/custom-document\">Custom <code>_document.js</code></a></li>\n<li><a href=\"https://nextjs.org/docs/advanced-features/custom-app\">Custom <code>_app.js</code></a></li>\n</ul>\n<h3>Why use the <code>_document.js</code> file over <code>_app.js</code>?</h3>\n<p>The <code>Head</code> component (from <code>next/document</code>) that is used in <code>_document.js</code> is rendered serverside whereas the <code>Head</code> component (from <code>next/head</code>) in <code>_app.js</code> will update on each page change meaning that the Google Analytics script may be reloaded which could slow down the site.</p>\n<h2>Round up</h2>\n<p>If anything I've said has helped you add Google Analytics to your site, give me a reaction.</p>\n<p>Any more questions? Let me know in the comments!</p>\n<p>Thanks for reading the article!</p>\n"},{"id":549550,"title":"What I learnt using TDD for Advent of Code (2020)","description":"2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my...","publishedAt":"2020-12-23T10:25:35.309Z","devToSlug":"what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","devToPath":"/jameswallis/what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","devToURL":"https://dev.to/jameswallis/what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","commentsCount":3,"publicReactionsCount":9,"positiveReactionsCount":9,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--enY4_sOO--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/sm7wdlfj65mqh5u9trrz.png","tags":["adventofcode","tdd","go","devjournal"],"canonical":"https://wallis.dev/blog/advent-of-code","collectionId":-1,"slug":"advent-of-code","markdown":"2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my morning commute to about 30 seconds. As it's December now, I figured I could use the time I've gained from missing the commute and try my hand at this year's Advent of Code.\n\nI used Go and Test Driven Development to complete Advent of Code. I opted for Go over JavaScript, my *usual* language of choice for projects, as one of my goals for the year was to learn it and use it in a personal project. Although I had to pause this due to other comittments. AoC provided a great opportunity to use a different language and pick up some skills!\n\n### Real quick - What is Advent of Code?\n> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\n*[Eric Wastl - creator of Advent of Code.](https://adventofcode.com/2020/about)*\n\n### Why did I use TDD?\nOriginally I had no intention of using Test Driven Development to complete Advent of Code. I figured that I could log on each day, write a program and submit the answer - because of course my code would always be 100% flawless. \n\nI found out pretty early on that this approach was wrong for myself as my code, like most, was not always going to work correctly on its first iteration. After attempting the first day and having an answer that *wasn't quite right*, I decided that blindly creating a program was not the correct approach, I needed to have more faith that I was on the right track before submitting my answer.\n\nMoreover, if you look at the way that each Advent of Code task is structured, you'll see that it favours a TDD approach.\n\n**General AoC task structure**\n1. Introduction\n2. Explanation of task\n3. Example input and output\n4. Your task and an input file (which you can copy and paste into a file locally on your machine)\n5. Answer submission box\n\nThe important section for TDD is the example input and output. While their primary function is to further explain the task, we can use them to base our TDD around - instead of using the input we're given for the actual solution, we can use the example input and ensure that when it is used by our program, it always returns the example output.\n\n### What I gained by using TDD\n\nThrough using Test Driven Development to complete tasks in Advent of Code I was able to gain:\n* Confidence that my solution was correct\n  * This was a **huge benefit**, AoC doesn't give you any hints if you supply an incorrect answer so it is easy to get lost trying to find tiny bugs in the program. Using TDD meant that I could have full faith that each function was working as expected.\n* Less time spent debugging the program.\n  * You'll have to debug when a test fails but splitting it up makes bugs so much easier to find.\n* Code quality is improved.\n  * Each function is better defined as time is spent focusing purely on it rather than the whole program.\n* Skills in Go\n  * Learning the language itself.\n  * Reinforcing how I could both write tests and develop using TDD.\n* Skills and experience using TDD to design and write a program.\n  * Obviously.\n\n### Example - How I used TDD for AoC day 4\n\nAs usual the code can be found on my GitHub: [Advent of Code, Day 4 solution - GitHub](https://github.com/james-wallis/adventofcode/tree/main/4).\n\n#### Task overview\n\nI won't go into huge detail to describe the task for day 4 and I'll only focus on part 1. I recommend you read the [brief for AoC day 4 (Passport Processing) on the AoC website.](https://adventofcode.com/2020/day/4)\n\nEssentially the task was to take an input consisting of multiple \"passports\" (if you are already lost - read the brief) and determine how many are valid when compared to the given set of rules.\n\nEach passport was represented by these items:\n```\nbyr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID) - not required to be a valid passport\n```\n\nThe given rules for part one state that each field is required in a passport apart from `cid` (Country ID) which is optional.\n\nSome example passports (separated by a blank line):\n```bash\n# Valid passport\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\n# Invalid passport - missing hgt (height)\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\n# Valid passport - missing cid (Country ID) but the rules state this isn't required\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\n# Invalid passport - missing cid (fine) and byr (Birth Year)\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\n```\n\n#### Using TDD to solve day 4\n\nI split up the task into separate parts like this:\n1. Read input and convert into a passport\n2. Determine which passports are valid according to the given rules\n3. Count valid passports\n4. Print answer (not tested)\n\nFor **part 1** I created a function called `ConvertLineToPassport` and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L12) which would convert a given string into a passport. Once the test were created, I implemented the `ConvertLineToPassport` function to read all known parameters (`ecl`, `hgt`, etc) and assign them either their provided value or an empty string if they were not present.\n\nOne of the tests:\n```go\nt.Run(\"converts a valid string into a Passport\", func(t *testing.T) {\n  line := \"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\"\n\n  want := Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"860033327\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  }\n  got := ConvertLineToPassport(line)\n\n  if got != want {\n    t.Errorf(\"got %+v want %+v given, %s and\", got, want, line)\n  }\n})\n```\n\nOnce I had confidence that my code was 100% working, I moved onto part 2.\n\nFor **part 2** I needed to determine whether a given passport was valid. I created the `IsPassportValidPart1` function and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L74). \n\nAn example test:\n```go\nt.Run(\"returns false as passportID is blank (required)\", func(t *testing.T) {\n  want := false\n  got := IsPassportValidPart1(Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  })\n\n  if got != want {\n    t.Errorf(\"got %t want %t\", got, want)\n  }\n})\n```\n\nUsing TDD for these parts gave me complete confidence that my code was working as expected meaning that once I'd counted the valid passports, I was sure that my answer would be correct - and it was!\n\nThis task may have been a little simple to highlight the benefits of TDD, but day 4 part 2 required stricter rules and TDD came into its own by ensuring that each rule was implemented correctly. [Check out the tests on GitHub if you don't believe me!](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L130)\n\n### Summary\n\nIf you check my GitHub you'll see that I've fallen behind on this years Advent of Code, I aim to complete it during the Christmas holidays! Nevertheless I've already gained more than enough skills and experience with Go, TDD and general programming to see that Advent of Code is definitely worth doing each year.\n\nIf you do take on Advent of Code I recommend:\n1. Using TDD and the examples given as input/output - it gives you so much confidence in your solution.\n2. Pick a language that you're not 100% confident in/are learning, you can always change later if the problems become too difficult - you'll gain a lot of skills at a relatively fast pace.\n\nHopefully this was an interesting read!\n\nLet me know in the comments why you took on the 2020 Advent of Code challenge, how far you've got and what approach you took!\n\n\n","html":"<p>2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my morning commute to about 30 seconds. As it's December now, I figured I could use the time I've gained from missing the commute and try my hand at this year's Advent of Code.</p>\n<p>I used Go and Test Driven Development to complete Advent of Code. I opted for Go over JavaScript, my <em>usual</em> language of choice for projects, as one of my goals for the year was to learn it and use it in a personal project. Although I had to pause this due to other comittments. AoC provided a great opportunity to use a different language and pick up some skills!</p>\n<h3>Real quick - What is Advent of Code?</h3>\n<blockquote>\n<p>Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.</p>\n</blockquote>\n<p><em><a href=\"https://adventofcode.com/2020/about\">Eric Wastl - creator of Advent of Code.</a></em></p>\n<h3>Why did I use TDD?</h3>\n<p>Originally I had no intention of using Test Driven Development to complete Advent of Code. I figured that I could log on each day, write a program and submit the answer - because of course my code would always be 100% flawless.</p>\n<p>I found out pretty early on that this approach was wrong for myself as my code, like most, was not always going to work correctly on its first iteration. After attempting the first day and having an answer that <em>wasn't quite right</em>, I decided that blindly creating a program was not the correct approach, I needed to have more faith that I was on the right track before submitting my answer.</p>\n<p>Moreover, if you look at the way that each Advent of Code task is structured, you'll see that it favours a TDD approach.</p>\n<p><strong>General AoC task structure</strong></p>\n<ol>\n<li>Introduction</li>\n<li>Explanation of task</li>\n<li>Example input and output</li>\n<li>Your task and an input file (which you can copy and paste into a file locally on your machine)</li>\n<li>Answer submission box</li>\n</ol>\n<p>The important section for TDD is the example input and output. While their primary function is to further explain the task, we can use them to base our TDD around - instead of using the input we're given for the actual solution, we can use the example input and ensure that when it is used by our program, it always returns the example output.</p>\n<h3>What I gained by using TDD</h3>\n<p>Through using Test Driven Development to complete tasks in Advent of Code I was able to gain:</p>\n<ul>\n<li>Confidence that my solution was correct\n<ul>\n<li>This was a <strong>huge benefit</strong>, AoC doesn't give you any hints if you supply an incorrect answer so it is easy to get lost trying to find tiny bugs in the program. Using TDD meant that I could have full faith that each function was working as expected.</li>\n</ul>\n</li>\n<li>Less time spent debugging the program.\n<ul>\n<li>You'll have to debug when a test fails but splitting it up makes bugs so much easier to find.</li>\n</ul>\n</li>\n<li>Code quality is improved.\n<ul>\n<li>Each function is better defined as time is spent focusing purely on it rather than the whole program.</li>\n</ul>\n</li>\n<li>Skills in Go\n<ul>\n<li>Learning the language itself.</li>\n<li>Reinforcing how I could both write tests and develop using TDD.</li>\n</ul>\n</li>\n<li>Skills and experience using TDD to design and write a program.\n<ul>\n<li>Obviously.</li>\n</ul>\n</li>\n</ul>\n<h3>Example - How I used TDD for AoC day 4</h3>\n<p>As usual the code can be found on my GitHub: <a href=\"https://github.com/james-wallis/adventofcode/tree/main/4\">Advent of Code, Day 4 solution - GitHub</a>.</p>\n<h4>Task overview</h4>\n<p>I won't go into huge detail to describe the task for day 4 and I'll only focus on part 1. I recommend you read the <a href=\"https://adventofcode.com/2020/day/4\">brief for AoC day 4 (Passport Processing) on the AoC website.</a></p>\n<p>Essentially the task was to take an input consisting of multiple \"passports\" (if you are already lost - read the brief) and determine how many are valid when compared to the given set of rules.</p>\n<p>Each passport was represented by these items:</p>\n<pre><code>byr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID) - not required to be a valid passport\n</code></pre>\n<p>The given rules for part one state that each field is required in a passport apart from <code>cid</code> (Country ID) which is optional.</p>\n<p>Some example passports (separated by a blank line):</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Valid passport</span>\necl:gry pid:860033327 eyr:2020 hcl:<span class=\"hljs-comment\">#fffffd</span>\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\n<span class=\"hljs-comment\"># Invalid passport - missing hgt (height)</span>\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:<span class=\"hljs-comment\">#cfa07d byr:1929</span>\n\n<span class=\"hljs-comment\"># Valid passport - missing cid (Country ID) but the rules state this isn't required</span>\nhcl:<span class=\"hljs-comment\">#ae17e1 iyr:2013</span>\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\n<span class=\"hljs-comment\"># Invalid passport - missing cid (fine) and byr (Birth Year)</span>\nhcl:<span class=\"hljs-comment\">#cfa07d eyr:2025 pid:166559648</span>\niyr:2011 ecl:brn hgt:59in</code></pre>\n<h4>Using TDD to solve day 4</h4>\n<p>I split up the task into separate parts like this:</p>\n<ol>\n<li>Read input and convert into a passport</li>\n<li>Determine which passports are valid according to the given rules</li>\n<li>Count valid passports</li>\n<li>Print answer (not tested)</li>\n</ol>\n<p>For <strong>part 1</strong> I created a function called <code>ConvertLineToPassport</code> and <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L12\">three test cases</a> which would convert a given string into a passport. Once the test were created, I implemented the <code>ConvertLineToPassport</code> function to read all known parameters (<code>ecl</code>, <code>hgt</code>, etc) and assign them either their provided value or an empty string if they were not present.</p>\n<p>One of the tests:</p>\n<pre><code class=\"hljs language-go\">t.Run(<span class=\"hljs-string\">\"converts a valid string into a Passport\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n  line := <span class=\"hljs-string\">\"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\"</span>\n\n  want := Passport{\n    eyeColor:       <span class=\"hljs-string\">\"gry\"</span>,\n    passportID:     <span class=\"hljs-string\">\"860033327\"</span>,\n    expirationYear: <span class=\"hljs-string\">\"2020\"</span>,\n    hairColor:      <span class=\"hljs-string\">\"#fffffd\"</span>,\n    birthYear:      <span class=\"hljs-string\">\"1937\"</span>,\n    issueYear:      <span class=\"hljs-string\">\"2017\"</span>,\n    countryID:      <span class=\"hljs-string\">\"147\"</span>,\n    height:         <span class=\"hljs-string\">\"183cm\"</span>,\n  }\n  got := ConvertLineToPassport(line)\n\n  <span class=\"hljs-keyword\">if</span> got != want {\n    t.Errorf(<span class=\"hljs-string\">\"got %+v want %+v given, %s and\"</span>, got, want, line)\n  }\n})</code></pre>\n<p>Once I had confidence that my code was 100% working, I moved onto part 2.</p>\n<p>For <strong>part 2</strong> I needed to determine whether a given passport was valid. I created the <code>IsPassportValidPart1</code> function and <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L74\">three test cases</a>.</p>\n<p>An example test:</p>\n<pre><code class=\"hljs language-go\">t.Run(<span class=\"hljs-string\">\"returns false as passportID is blank (required)\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n  want := <span class=\"hljs-literal\">false</span>\n  got := IsPassportValidPart1(Passport{\n    eyeColor:       <span class=\"hljs-string\">\"gry\"</span>,\n    passportID:     <span class=\"hljs-string\">\"\"</span>,\n    expirationYear: <span class=\"hljs-string\">\"2020\"</span>,\n    hairColor:      <span class=\"hljs-string\">\"#fffffd\"</span>,\n    birthYear:      <span class=\"hljs-string\">\"1937\"</span>,\n    issueYear:      <span class=\"hljs-string\">\"2017\"</span>,\n    countryID:      <span class=\"hljs-string\">\"147\"</span>,\n    height:         <span class=\"hljs-string\">\"183cm\"</span>,\n  })\n\n  <span class=\"hljs-keyword\">if</span> got != want {\n    t.Errorf(<span class=\"hljs-string\">\"got %t want %t\"</span>, got, want)\n  }\n})</code></pre>\n<p>Using TDD for these parts gave me complete confidence that my code was working as expected meaning that once I'd counted the valid passports, I was sure that my answer would be correct - and it was!</p>\n<p>This task may have been a little simple to highlight the benefits of TDD, but day 4 part 2 required stricter rules and TDD came into its own by ensuring that each rule was implemented correctly. <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L130\">Check out the tests on GitHub if you don't believe me!</a></p>\n<h3>Summary</h3>\n<p>If you check my GitHub you'll see that I've fallen behind on this years Advent of Code, I aim to complete it during the Christmas holidays! Nevertheless I've already gained more than enough skills and experience with Go, TDD and general programming to see that Advent of Code is definitely worth doing each year.</p>\n<p>If you do take on Advent of Code I recommend:</p>\n<ol>\n<li>Using TDD and the examples given as input/output - it gives you so much confidence in your solution.</li>\n<li>Pick a language that you're not 100% confident in/are learning, you can always change later if the problems become too difficult - you'll gain a lot of skills at a relatively fast pace.</li>\n</ol>\n<p>Hopefully this was an interesting read!</p>\n<p>Let me know in the comments why you took on the 2020 Advent of Code challenge, how far you've got and what approach you took!</p>\n"},{"id":473822,"title":"Ensuring your OpenAPI (Swagger) Specification is never outdated through testing with Chai or Jest ","description":"Testing your OpenAPI Specification using Chai OpenAPI response validator or Jest OpenAPI. Additional...","publishedAt":"2020-11-03T13:51:39.033Z","devToSlug":"ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","devToPath":"/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","devToURL":"https://dev.to/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","commentsCount":0,"publicReactionsCount":9,"positiveReactionsCount":9,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--MBcGxP-f--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/z611f1xh7nxqlhh63bmr.png","tags":["javascript","testing","webdev","node"],"canonical":"https://wallis.dev/blog/openapi-validator","collectionId":-1,"slug":"openapi-validator","markdown":"**Testing your OpenAPI Specification using [Chai OpenAPI response validator](https://www.npmjs.com/package/chai-openapi-response-validator) or [Jest OpenAPI](https://www.npmjs.com/package/jest-openapi). Additional Chai/Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.**\n\nThe OpenAPI Initiative, previously known as the Swagger Specification, is a machine readable specification to describe RESTful web services such as an API. It's used by many to describe what API queries an application can handle and when combined with the use of tools such as [Swagger UI](https://swagger.io/tools/swagger-ui/) can make even the most complex APIs easy for developers to understand.\n\nUsing an OpenAPI Specification in your project should make it more understandable and easier for new developers to consume it. It is, however, easy for it to become outdated when changes are made to the functionality of the application, an unfortunately common issue that is present in documentation all over the web. Even the smallest detachment between actual function and documentation can cause hours of frustration for a user of your product. \n\nIn fact, when developing an application which communicates with a third-party API, incorrect OpenAPI Specifications can make it impossible to carryout critical functionality and stop a project in its tracks. I have experienced this first hand when trying to use a certain bank's API to create a money handling application while at University.\n\n## So how can we ensure that OpenAPI Specifications are up-to-date?\n\nShort answer: **With tests!**\n\nLonger answer:\n\nThe [open source OpenAPIValidators](https://github.com/openapi-library/OpenAPIValidators) project on GitHub contains two packages that extend both the [Chai Assertion Library](https://www.chaijs.com/) and [Jest](https://jestjs.io/) two popular JavaScript testing frameworks.\n\nIt describes itself as a plugin that will \"automatically test whether your server's behaviour and documentation match\". It is as simple to use as it sounds, to make an assertion you add `expect(responseObject).toSatisfyApiSpec()` in your tests, pretty nice.\n\nIn addition to being used to ensure documentation is updated, the testing plugins can also aid Test Driven Development practices by introducing the opportunity to design your OpenAPI Specification first and implement the API second. This means that the team implementing the API will have strict documentation to follow with the plugins ensuring that the correct responses are sent with the correct response codes. Moreover, in a time where frontend and backend development teams are not co-located, both teams can agree on a specification and not worry that one will deviate from the agreed design.\n\nThe two plugins can be found on NPM:\n\n* [chai-openapi-response-validator](https://www.npmjs.com/package/chai-openapi-response-validator)\n\n* [jest-openapi](https://www.npmjs.com/package/jest-openapi)\n\n## How does it work?\n\n1. You pass it your OpenAPI Specification via an object or by absolute path.\n2. You add `expect(responseObject).toSatisfyApiSpec()` to each test where you want to validate the response.\n3. It matches the request path and HTTP response code returned from the API call with your OpenAPI Specification and then asserts that the response is what is defined in the Specification.\n4. If the response matches the Specification then the test passes, if it doesn't then the test will fail with a helpful error.\n\n## What does it look like to use?\n\nTake the test below and the Specification that follows, it makes a GET request, asserts that the HTTP response code will be 200 and then, using the OpenAPIValidators package, asserts that the response from the request matches exactly the OpenAPI Specification.\n\n```javascript\nit('should make a GET request and satisfy OpenAPI spec', async () => {\n  // Make request (supertest used here)\n  // /hello should return the code 200 with the body \"hello world\"\n  const res = await supertest(server).get('/hello');\n  // Make any assertions as normal\n  expect(res.status).toEqual(200);\n  // Assert that the HTTP response satisfies the OpenAPI spec\n  expect(res).toSatisfyApiSpec();\n});\n```\n\nThe OpenAPI Specification used for this test:\n```yaml\nopenapi: 3.0.3\ninfo:\n  title: Open Api Validator\n  version: 0.0.1\npaths:\n  /hello:\n    get:\n      responses:\n        200:\n          description: Response body should be a string\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Hello World\n```\n\nWhen the response matches the OpenAPI Specification the test will pass as expected with no additional output:\n\n![Passing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/kyjifm1rqxt00przl6fi.png)\n\nbut when the response does not match the OpenAPI Specification the test fails and provides helpful output so you can either change the implementation or update the Specification:\n\n![Failing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/f9d6la5dh8xguh21t0g2.png)\n\nThe screenshot above shows a failure where the actual API response has returned an *object* rather than the *string* that is documented in the OpenAPI Specification.\n\nWhen the OpenAPI validator fails to match an API call to the Specification it fails with this error:\n\n![Unknown OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/koa4rsj2qcm78i4d31yb.png)\n\nWhich will prompt you to either remove the assertion from the test or update the OpenAPI Specification to contain the new route, preferably the latter.\n\n## Round up\n\nIn this blog I've introduced the OpenAPI Validators which can be used in conjunction with Jest or Chai and an OpenAPI Specification to ensure that both your API documentation is kept up to date and that APIs are not accidentally modified to return incorrect responses. Additionally, frontend and backend developers can use the testing plugins to ensure that an agreed API Specification is implemented correctly.\n\nIn the future I will release another post where I demonstrate how the [jest-openapi](https://www.npmjs.com/package/jest-openapi) validator can be used with an Express API.\n\nDrop me a reaction if this post has helped or if outdated API documentation has inconvenienced you in the past!\n\n\n\n\n","html":"<p><strong>Testing your OpenAPI Specification using <a href=\"https://www.npmjs.com/package/chai-openapi-response-validator\">Chai OpenAPI response validator</a> or <a href=\"https://www.npmjs.com/package/jest-openapi\">Jest OpenAPI</a>. Additional Chai/Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.</strong></p>\n<p>The OpenAPI Initiative, previously known as the Swagger Specification, is a machine readable specification to describe RESTful web services such as an API. It's used by many to describe what API queries an application can handle and when combined with the use of tools such as <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger UI</a> can make even the most complex APIs easy for developers to understand.</p>\n<p>Using an OpenAPI Specification in your project should make it more understandable and easier for new developers to consume it. It is, however, easy for it to become outdated when changes are made to the functionality of the application, an unfortunately common issue that is present in documentation all over the web. Even the smallest detachment between actual function and documentation can cause hours of frustration for a user of your product.</p>\n<p>In fact, when developing an application which communicates with a third-party API, incorrect OpenAPI Specifications can make it impossible to carryout critical functionality and stop a project in its tracks. I have experienced this first hand when trying to use a certain bank's API to create a money handling application while at University.</p>\n<h2>So how can we ensure that OpenAPI Specifications are up-to-date?</h2>\n<p>Short answer: <strong>With tests!</strong></p>\n<p>Longer answer:</p>\n<p>The <a href=\"https://github.com/openapi-library/OpenAPIValidators\">open source OpenAPIValidators</a> project on GitHub contains two packages that extend both the <a href=\"https://www.chaijs.com/\">Chai Assertion Library</a> and <a href=\"https://jestjs.io/\">Jest</a> two popular JavaScript testing frameworks.</p>\n<p>It describes itself as a plugin that will \"automatically test whether your server's behaviour and documentation match\". It is as simple to use as it sounds, to make an assertion you add <code>expect(responseObject).toSatisfyApiSpec()</code> in your tests, pretty nice.</p>\n<p>In addition to being used to ensure documentation is updated, the testing plugins can also aid Test Driven Development practices by introducing the opportunity to design your OpenAPI Specification first and implement the API second. This means that the team implementing the API will have strict documentation to follow with the plugins ensuring that the correct responses are sent with the correct response codes. Moreover, in a time where frontend and backend development teams are not co-located, both teams can agree on a specification and not worry that one will deviate from the agreed design.</p>\n<p>The two plugins can be found on NPM:</p>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com/package/chai-openapi-response-validator\">chai-openapi-response-validator</a></p>\n</li>\n<li>\n<p><a href=\"https://www.npmjs.com/package/jest-openapi\">jest-openapi</a></p>\n</li>\n</ul>\n<h2>How does it work?</h2>\n<ol>\n<li>You pass it your OpenAPI Specification via an object or by absolute path.</li>\n<li>You add <code>expect(responseObject).toSatisfyApiSpec()</code> to each test where you want to validate the response.</li>\n<li>It matches the request path and HTTP response code returned from the API call with your OpenAPI Specification and then asserts that the response is what is defined in the Specification.</li>\n<li>If the response matches the Specification then the test passes, if it doesn't then the test will fail with a helpful error.</li>\n</ol>\n<h2>What does it look like to use?</h2>\n<p>Take the test below and the Specification that follows, it makes a GET request, asserts that the HTTP response code will be 200 and then, using the OpenAPIValidators package, asserts that the response from the request matches exactly the OpenAPI Specification.</p>\n<pre><code class=\"hljs language-javascript\">it(<span class=\"hljs-string\">'should make a GET request and satisfy OpenAPI spec'</span>, <span class=\"hljs-keyword\">async</span> () => {\n  <span class=\"hljs-comment\">// Make request (supertest used here)</span>\n  <span class=\"hljs-comment\">// /hello should return the code 200 with the body \"hello world\"</span>\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> supertest(server).get(<span class=\"hljs-string\">'/hello'</span>);\n  <span class=\"hljs-comment\">// Make any assertions as normal</span>\n  expect(res.status).toEqual(<span class=\"hljs-number\">200</span>);\n  <span class=\"hljs-comment\">// Assert that the HTTP response satisfies the OpenAPI spec</span>\n  expect(res).toSatisfyApiSpec();\n});</code></pre>\n<p>The OpenAPI Specification used for this test:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">openapi:</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-number\">.3</span>\n<span class=\"hljs-attr\">info:</span>\n  <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">Open</span> <span class=\"hljs-string\">Api</span> <span class=\"hljs-string\">Validator</span>\n  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-attr\">paths:</span>\n  <span class=\"hljs-string\">/hello:</span>\n    <span class=\"hljs-attr\">get:</span>\n      <span class=\"hljs-attr\">responses:</span>\n        <span class=\"hljs-attr\">200:</span>\n          <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Response</span> <span class=\"hljs-string\">body</span> <span class=\"hljs-string\">should</span> <span class=\"hljs-string\">be</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">string</span>\n          <span class=\"hljs-attr\">content:</span>\n            <span class=\"hljs-attr\">text/plain:</span>\n              <span class=\"hljs-attr\">schema:</span>\n                <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n                <span class=\"hljs-attr\">example:</span> <span class=\"hljs-string\">Hello</span> <span class=\"hljs-string\">World</span></code></pre>\n<p>When the response matches the OpenAPI Specification the test will pass as expected with no additional output:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/kyjifm1rqxt00przl6fi.png\" alt=\"Passing OpenAPI test\"></p>\n<p>but when the response does not match the OpenAPI Specification the test fails and provides helpful output so you can either change the implementation or update the Specification:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/f9d6la5dh8xguh21t0g2.png\" alt=\"Failing OpenAPI test\"></p>\n<p>The screenshot above shows a failure where the actual API response has returned an <em>object</em> rather than the <em>string</em> that is documented in the OpenAPI Specification.</p>\n<p>When the OpenAPI validator fails to match an API call to the Specification it fails with this error:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/koa4rsj2qcm78i4d31yb.png\" alt=\"Unknown OpenAPI test\"></p>\n<p>Which will prompt you to either remove the assertion from the test or update the OpenAPI Specification to contain the new route, preferably the latter.</p>\n<h2>Round up</h2>\n<p>In this blog I've introduced the OpenAPI Validators which can be used in conjunction with Jest or Chai and an OpenAPI Specification to ensure that both your API documentation is kept up to date and that APIs are not accidentally modified to return incorrect responses. Additionally, frontend and backend developers can use the testing plugins to ensure that an agreed API Specification is implemented correctly.</p>\n<p>In the future I will release another post where I demonstrate how the <a href=\"https://www.npmjs.com/package/jest-openapi\">jest-openapi</a> validator can be used with an Express API.</p>\n<p>Drop me a reaction if this post has helped or if outdated API documentation has inconvenienced you in the past!</p>\n"},{"id":421456,"title":"Next.js and GitHub Pages, how the basePath and assetPrefix configuration options will fix your website","description":"tl;dr: When hosting a Next.js project on GitHub Pages (without a custom domain name) your internal li...","publishedAt":"2020-08-13T16:48:53.274Z","devToSlug":"next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba","devToPath":"/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba","devToURL":"https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba","commentsCount":2,"publicReactionsCount":11,"positiveReactionsCount":11,"coverImage":null,"tags":["react","javascript","nextjs","webdev"],"canonical":"https://wallis.dev/blog/next-js-basepath-and-assetprefix","collectionId":-1,"slug":"next-js-basepath-and-assetprefix","markdown":"**tl;dr:** When hosting a Next.js project on GitHub Pages (without a custom domain name) your internal links won't work as your project will be hosted on a subpath (e.g. `https://user.github.io/repository`). The `basePath` configuration property will fix this. Combine it with `assetPrefix` which fixes the paths for images and CSS stylesheets.\n\n## Preface\n\n[Next.js 9.5](https://nextjs.org/blog/next-9-5#customizable-base-path) contains a few really good enhancements to the React.js framework. Included in it is the new `basePath` configuration variable for the `next.config.js` file.\n\n## What is it?\n\nThe `basePath` configurator allows you to serve your website pages under a subpath with no complex configuration. For example, if you're hosting docs you might want them to be at `example.com/docs` rather than `example.com`. In addition to this, Next.js will automatically prefix any `<Link>` components to the `basePath`.\n\nTo use a custom `basePath` all you need to do is add the following to your `next.config.js`.\n```javascript\nmodule.exports = {\n  basePath: '/docs'\n}\n```\n\nOnce thats added, all your content will be available on `/docs` without changing any of your `<Link>`'s to other pages. Neat.\n\n## Why is it awesome?\n\nUsually you'll find a website available on it's root path (`example.com/`) but some free hosting platforms allow you to host using their domain but on a path.\n\nGitHub Pages is one such platform.\n\nWhen you host a static website on GitHub Pages (without a custom domain) you will be allocated a domain specific to GitHub Pages in the format `user.github.io`. For me this is `james-wallis.github.io`. You will also be allocated a subpath on a per repository basis. This means the final address for the website will be `user.github.io/repository`.\n\nPrevious to the `basePath` variable, to host a Next.js static website on GitHub Pages you were required to manually prefix each `<Link>` with the subpath, this required extra configuration and meant that if you forgot to add it on a single link, user's would be sent to the `404` page.\n\nUsing `basePath` we can now simply add it to the `next.config.js` file and set its value to whatever your repository is with 0 other configuration around your codebase. Simple.\n\n[I demonstrated the difference between these two methods in-depth in a previous blog where I hosted a Next.js site on GitHub Pages.](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn)\n\n## Ok cool, give me an example...\n\nSo you have a Next.js application, works great on your machine and you want to launch it through GitHub Pages. You create a GitHub action or Travis job to run the `next build` and `next export` to turn your application into a static website and you push your website to GitHub expecting to see it available at your GitHub Pages URL but:\n\n1. All the links are directed at `/` rather than your `repository` subpath.\n2. The page has no styling, the CSS is pointing to the wrong path.\n\nTo solve these you need to add `basePath` and `assetPrefix` to your `next.config.js` file.\n*`assetPrefix` does the same as `basePath` but for static assets such as CSS files and images.*\n\nSteps:\n1. In your Next.js application create a `next.config.js` file.\n2. Get the name of your GitHub repository.\n3. Add the following code to your `next.config.js` file, replacing `repository` with the name of your GitHub repository.\n\n```javascript\nmodule.exports = {\n  basePath: '/repository',\n  assetPrefix: '/repository/', // assetPrefix requires the trailing slash\n}\n```\n\nAnd that's it, push those changes to your GitHub and once your static Next.js website is rebuilt using `next build` and `next export` it will work as you intended it to in the first place.\n\nThanks for reading!\n ","html":"<p><strong>tl;dr:</strong> When hosting a Next.js project on GitHub Pages (without a custom domain name) your internal links won't work as your project will be hosted on a subpath (e.g. <code>https://user.github.io/repository</code>). The <code>basePath</code> configuration property will fix this. Combine it with <code>assetPrefix</code> which fixes the paths for images and CSS stylesheets.</p>\n<h2>Preface</h2>\n<p><a href=\"https://nextjs.org/blog/next-9-5#customizable-base-path\">Next.js 9.5</a> contains a few really good enhancements to the React.js framework. Included in it is the new <code>basePath</code> configuration variable for the <code>next.config.js</code> file.</p>\n<h2>What is it?</h2>\n<p>The <code>basePath</code> configurator allows you to serve your website pages under a subpath with no complex configuration. For example, if you're hosting docs you might want them to be at <code>example.com/docs</code> rather than <code>example.com</code>. In addition to this, Next.js will automatically prefix any <code>&#x3C;Link></code> components to the <code>basePath</code>.</p>\n<p>To use a custom <code>basePath</code> all you need to do is add the following to your <code>next.config.js</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/docs'</span>\n}</code></pre>\n<p>Once thats added, all your content will be available on <code>/docs</code> without changing any of your <code>&#x3C;Link></code>'s to other pages. Neat.</p>\n<h2>Why is it awesome?</h2>\n<p>Usually you'll find a website available on it's root path (<code>example.com/</code>) but some free hosting platforms allow you to host using their domain but on a path.</p>\n<p>GitHub Pages is one such platform.</p>\n<p>When you host a static website on GitHub Pages (without a custom domain) you will be allocated a domain specific to GitHub Pages in the format <code>user.github.io</code>. For me this is <code>james-wallis.github.io</code>. You will also be allocated a subpath on a per repository basis. This means the final address for the website will be <code>user.github.io/repository</code>.</p>\n<p>Previous to the <code>basePath</code> variable, to host a Next.js static website on GitHub Pages you were required to manually prefix each <code>&#x3C;Link></code> with the subpath, this required extra configuration and meant that if you forgot to add it on a single link, user's would be sent to the <code>404</code> page.</p>\n<p>Using <code>basePath</code> we can now simply add it to the <code>next.config.js</code> file and set its value to whatever your repository is with 0 other configuration around your codebase. Simple.</p>\n<p><a href=\"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn\">I demonstrated the difference between these two methods in-depth in a previous blog where I hosted a Next.js site on GitHub Pages.</a></p>\n<h2>Ok cool, give me an example...</h2>\n<p>So you have a Next.js application, works great on your machine and you want to launch it through GitHub Pages. You create a GitHub action or Travis job to run the <code>next build</code> and <code>next export</code> to turn your application into a static website and you push your website to GitHub expecting to see it available at your GitHub Pages URL but:</p>\n<ol>\n<li>All the links are directed at <code>/</code> rather than your <code>repository</code> subpath.</li>\n<li>The page has no styling, the CSS is pointing to the wrong path.</li>\n</ol>\n<p>To solve these you need to add <code>basePath</code> and <code>assetPrefix</code> to your <code>next.config.js</code> file.\n<em><code>assetPrefix</code> does the same as <code>basePath</code> but for static assets such as CSS files and images.</em></p>\n<p>Steps:</p>\n<ol>\n<li>In your Next.js application create a <code>next.config.js</code> file.</li>\n<li>Get the name of your GitHub repository.</li>\n<li>Add the following code to your <code>next.config.js</code> file, replacing <code>repository</code> with the name of your GitHub repository.</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/repository'</span>,\n  <span class=\"hljs-attr\">assetPrefix</span>: <span class=\"hljs-string\">'/repository/'</span>, <span class=\"hljs-comment\">// assetPrefix requires the trailing slash</span>\n}</code></pre>\n<p>And that's it, push those changes to your GitHub and once your static Next.js website is rebuilt using <code>next build</code> and <code>next export</code> it will work as you intended it to in the first place.</p>\n<p>Thanks for reading!</p>\n"},{"id":421391,"title":"Using a custom domain with GitHub Pages","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-08-07T14:42:38.871Z","devToSlug":"using-a-custom-domain-with-github-pages-1g1m","devToPath":"/jameswallis/using-a-custom-domain-with-github-pages-1g1m","devToURL":"https://dev.to/jameswallis/using-a-custom-domain-with-github-pages-1g1m","commentsCount":0,"publicReactionsCount":5,"positiveReactionsCount":5,"coverImage":null,"tags":["github","webdev","devops"],"canonical":"https://wallis.dev/blog/using-a-custom-domain-with-github-pages","collectionId":-1,"slug":"using-a-custom-domain-with-github-pages","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website (hosted on GitHub Pages): https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n## Using a custom domain with GitHub Pages\n[Configuring a custom domain for your GitHub Pages site - GitHub Docs](https://docs.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site)\n\nIn my [previous blog](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn) I demonstrated how to run a static website on GitHub Pages. But it was using a default domain name specific to GitHub as wasn't very professional. We can fix this by making it accessible using our own domain name of choosing (wallisconsultancy.co.uk in my case).\n\nLet's modify GitHub Pages to use a custom domain. This will be done in three steps:\n1. Modify `.travis.yml`\n2. Add custom domain to GitHub Pages\n3. Update DNS settings\n\n### Modify `.travis.yml`\nFirst we need to modify the `.travis.yml` file we created in the previous to add a `fqdn` field.\n\nThe `fqdn` field tells Travis to create a `CNAME` file with our domain in each time we push to the `gh-pages` branch. If we don't keep creating this, it will be deleted on the next push.\n\n```yaml\nlanguage: node_js\nnode_js:\n  - 12\ncache:\n  directories:\n  - node_modules\nscript:\n  - npm run eslint\n  - npm run build\n  - npm run export\n  - touch out/.nojekyll\ndeploy:\n  provider: pages\n  skip_cleanup: true\n  github_token: $github_token\n  local_dir: out\n  fqdn: wallisconsultancy.co.uk # This instructs Travis to create a CNAME file with wallisconsultancy.co.uk as the contents on every deployment to the gh-pages branch\n  on:\n    branch: master\n```\n\n### Add custom domain to GitHub Pages\n\nNext we need to tell GitHub that we are going to use a custom domain.\n\nTo do this:\n  1. Go to the settings of your GitHub repository for the project\n  2. Scroll to the GitHub Pages section\n  3. Enter your domain in the Custom Domain section\n\n![GitHub Pages settings with a custom domain](https://dev-to-uploads.s3.amazonaws.com/i/g0j4lb41uyijrfopzjj0.jpg)\n*GitHub Pages settings with a custom domain*\n\nYour `.github.io/repository` domain will now redirect to your custom domain. \n\nHowever, the website will not yet be reachable as we need to update the DNS settings for the domain name.\n\n### Update DNS settings to point to GitHub Pages\n\nNow GitHub Pages is expecting to be reached via a custom domain and will redirect the old `user.github.io/` to it. We now need to set the domain up so that it points to the GitHub server where the website is being hosted.\n\nTo update the DNS settings you need to go to your DNS provider and do the following:\n*Note: I am using Digital Ocean so all the examples are using their UI*\n\nCreate a `CNAME` for `www.yoursite.com` that points to your `.github.io` address without the subpath.\n\nExample:\n![CNAME record settings Digital Ocean](https://dev-to-uploads.s3.amazonaws.com/i/236sslsn2bseivwxdts2.jpg)\n*My CNAME record settings on Digital Ocean*\n\n*Optional, using an apex domain rather than `www.`*\n\nIf you want your domain to be `yoursite.com` rather than `www.yoursite.com` you need to do a further step.\n\nCreate an `A` record to point to the following IP addresses ([check the GitHub docs to verify they haven't changed since the writing of this post](https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain).\n\nExample:\n![A record settings Digital Ocean](https://dev-to-uploads.s3.amazonaws.com/i/rcxyw55khfe8vw2oeat7.jpg)\n*My A record settings on Digital Ocean*\n\n**That's it**\nYou've successfully setup your website to run on GitHub pages using a custom domain name. It might take a few minutes for the DNS changes to update but soon your website will be production ready!\n\n*Note: If you modified your code for the GitHub subPath issue above, you can now tear this code out.*\n\n## Roundup\nThis blog demonstrated how to setup a Next.js website onto GitHub Pages with a custom domain name.\n\nThe Wallis Consultancy website is now published into production. This marks the end of the series of blog posts in which I rebuilt the old Wallis Consultancy website that ran using Bootstrap in React.js using Next.js and finally hosted it on GitHub Pages.","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website (hosted on GitHub Pages): <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h2>Using a custom domain with GitHub Pages</h2>\n<p><a href=\"https://docs.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site\">Configuring a custom domain for your GitHub Pages site - GitHub Docs</a></p>\n<p>In my <a href=\"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn\">previous blog</a> I demonstrated how to run a static website on GitHub Pages. But it was using a default domain name specific to GitHub as wasn't very professional. We can fix this by making it accessible using our own domain name of choosing (wallisconsultancy.co.uk in my case).</p>\n<p>Let's modify GitHub Pages to use a custom domain. This will be done in three steps:</p>\n<ol>\n<li>Modify <code>.travis.yml</code></li>\n<li>Add custom domain to GitHub Pages</li>\n<li>Update DNS settings</li>\n</ol>\n<h3>Modify <code>.travis.yml</code></h3>\n<p>First we need to modify the <code>.travis.yml</code> file we created in the previous to add a <code>fqdn</code> field.</p>\n<p>The <code>fqdn</code> field tells Travis to create a <code>CNAME</code> file with our domain in each time we push to the <code>gh-pages</code> branch. If we don't keep creating this, it will be deleted on the next push.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span>\n<span class=\"hljs-attr\">node_js:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">12</span>\n<span class=\"hljs-attr\">cache:</span>\n  <span class=\"hljs-attr\">directories:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node_modules</span>\n<span class=\"hljs-attr\">script:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">eslint</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">export</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">touch</span> <span class=\"hljs-string\">out/.nojekyll</span>\n<span class=\"hljs-attr\">deploy:</span>\n  <span class=\"hljs-attr\">provider:</span> <span class=\"hljs-string\">pages</span>\n  <span class=\"hljs-attr\">skip_cleanup:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">github_token:</span> <span class=\"hljs-string\">$github_token</span>\n  <span class=\"hljs-attr\">local_dir:</span> <span class=\"hljs-string\">out</span>\n  <span class=\"hljs-attr\">fqdn:</span> <span class=\"hljs-string\">wallisconsultancy.co.uk</span> <span class=\"hljs-comment\"># This instructs Travis to create a CNAME file with wallisconsultancy.co.uk as the contents on every deployment to the gh-pages branch</span>\n  <span class=\"hljs-attr\">on:</span>\n    <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span></code></pre>\n<h3>Add custom domain to GitHub Pages</h3>\n<p>Next we need to tell GitHub that we are going to use a custom domain.</p>\n<p>To do this:</p>\n<ol>\n<li>Go to the settings of your GitHub repository for the project</li>\n<li>Scroll to the GitHub Pages section</li>\n<li>Enter your domain in the Custom Domain section</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/g0j4lb41uyijrfopzjj0.jpg\" alt=\"GitHub Pages settings with a custom domain\">\n<em>GitHub Pages settings with a custom domain</em></p>\n<p>Your <code>.github.io/repository</code> domain will now redirect to your custom domain.</p>\n<p>However, the website will not yet be reachable as we need to update the DNS settings for the domain name.</p>\n<h3>Update DNS settings to point to GitHub Pages</h3>\n<p>Now GitHub Pages is expecting to be reached via a custom domain and will redirect the old <code>user.github.io/</code> to it. We now need to set the domain up so that it points to the GitHub server where the website is being hosted.</p>\n<p>To update the DNS settings you need to go to your DNS provider and do the following:\n<em>Note: I am using Digital Ocean so all the examples are using their UI</em></p>\n<p>Create a <code>CNAME</code> for <code>www.yoursite.com</code> that points to your <code>.github.io</code> address without the subpath.</p>\n<p>Example:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/236sslsn2bseivwxdts2.jpg\" alt=\"CNAME record settings Digital Ocean\">\n<em>My CNAME record settings on Digital Ocean</em></p>\n<p><em>Optional, using an apex domain rather than <code>www.</code></em></p>\n<p>If you want your domain to be <code>yoursite.com</code> rather than <code>www.yoursite.com</code> you need to do a further step.</p>\n<p>Create an <code>A</code> record to point to the following IP addresses (<a href=\"https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain\">check the GitHub docs to verify they haven't changed since the writing of this post</a>.</p>\n<p>Example:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rcxyw55khfe8vw2oeat7.jpg\" alt=\"A record settings Digital Ocean\">\n<em>My A record settings on Digital Ocean</em></p>\n<p><strong>That's it</strong>\nYou've successfully setup your website to run on GitHub pages using a custom domain name. It might take a few minutes for the DNS changes to update but soon your website will be production ready!</p>\n<p><em>Note: If you modified your code for the GitHub subPath issue above, you can now tear this code out.</em></p>\n<h2>Roundup</h2>\n<p>This blog demonstrated how to setup a Next.js website onto GitHub Pages with a custom domain name.</p>\n<p>The Wallis Consultancy website is now published into production. This marks the end of the series of blog posts in which I rebuilt the old Wallis Consultancy website that ran using Bootstrap in React.js using Next.js and finally hosted it on GitHub Pages.</p>\n"},{"id":420653,"title":"Deploying a Next.js app to GitHub Pages","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-08-07T14:39:40.110Z","devToSlug":"deploying-a-next-js-app-to-github-pages-24pn","devToPath":"/jameswallis/deploying-a-next-js-app-to-github-pages-24pn","devToURL":"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn","commentsCount":6,"publicReactionsCount":34,"positiveReactionsCount":34,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--zt-egKud--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/wj6gal2mlv6sjtfh5l32.png","tags":["github","react","javascript","nextjs"],"canonical":"https://wallis.dev/blog/deploying-a-next-js-app-to-github-pages","collectionId":-1,"slug":"deploying-a-next-js-app-to-github-pages","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\n> **2021 Update**\n> *I have moved Wallis Consultancy from GitHub Pages to Vercel. [I wrote a post describing my motivations for doing so which you can read here](https://dev.to/jameswallis/launching-my-personal-next-js-site-on-vercel-in-less-than-a-minute-296h). Essentially, Next.js integrates with Vercel a lot better than with GitHub Pages.*\n*I've kept a version of Wallis Consultancy hosted on GitHub pages for this blog and have updated all links to Wallis Consultancy below.*\n*Having said that, GitHub Pages is 100% still a good place to host your Next.js project!*\n\nThe finished website (hosted on GitHub Pages): https://james-wallis.github.io/wallisconsultancy/\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n## Intro\n\nThe re-implementation of Wallis Consultancy into a Next.js application is complete. This blog post documents the process of taking a Next.js project and hosting it on GitHub pages. It covers:\n* Using `next export` to convert the Next.js project to a static website.\n* Building a Travis pipeline to build the website and push it to a `gh-pages` branch.\n\n## Overview of technologies\n### GitHub Pages\n> GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub optionally runs the files through a build process and publishes a website. \n\n[GitHub Pages](https://pages.github.com/)\n\n### Travis\n> Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub and Bitbucket.\n\nIt’s free for open-source projects and integrates automatically with Github. All you need to do is sign up and add a `.travis.yml` file and it’s ready to go.\n\n[Travis CI](https://travis-ci.org/)\n\n### Next.js export \n> `next export` allows you to export your app to static HTML, which can be run standalone without the need of a Node.js server.\n\nIt generates the HTML into an `out` directory. From there you can use tools such as [serve](https://www.npmjs.com/package/serve) to run your app.\n\n\nNow that the technologies used in this blog have been introduced, let's deploy our Next.js app to GitHub Pages.\n\n\n## Creating the Travis build\nConnecting Travis to a GitHub repository is as simple as creating a `.travis.yml`. The following documents this process and how to use secret environment variables with a Travis build.\n\n1. Create a `.travis.yml` file in the top directory of your Github repository.\n2. Add the following (without the comments):\n```yaml\nlanguage: node_js # Node.js based project\nnode_js:\n  - 12 # Level of Node.js to use\ncache:\n  directories:\n  - node_modules # Cache the node_modules folder for quicker build times\nscript:\n  - npm run build # Runs next build\n  - npm run export # Runs next export and generates the out directory\n  - touch out/.nojekyll # Creates a file telling Github not to build the project using Jekyll\ndeploy:\n  provider: pages # Informs Travis this is a deployment to GitHub Pages\n  skip_cleanup: true # Prevents Travis from resetting the working directory made during the build\n  github_token: $github_token # GitHub access token to use when pushing to the gh-pages branch\n  local_dir: out # Directory to push to the gh-pages branch\n  on:\n    # Only deploy when the build is on master or main branch - two common default branch names\n    # If you're using a different branch name, add it here\n    all_branches: true\n    condition: $TRAVIS_BRANCH =~ ^(master|main)$\n\n```\nFor more information the [official Travis Github Pages docs](https://docs.travis-ci.com/user/deployment-v2/providers/pages/)\n\n3. Once you’ve added the `.travis.yml` to your repository, you need to add the `github_token` (needed to push to your `gh-pages` branch) variable to your Travis CI settings. \n  1. First get an API token following the instructions on [Creating a personal access token - GitHub Docs](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) *Note*: As my repository was private while making this blog I enabled the whole `repo` scope. However you may be able to just enable the `public_repo` scope.\n![GitHub Repo Scope for access token](https://dev-to-uploads.s3.amazonaws.com/i/ogiqsi8d63glc59p6a4g.jpg)\n*The Full GitHub repo scope*\n\n  2. Open `https://travis-ci.com/github/{your_username}/{your_repository}` in a browser.\n  3. Navigate to more options -> Setting.  \n![Travis Settings](https://dev-to-uploads.s3.amazonaws.com/i/av9vyftpt2sl5t843fph.jpg)\n*Travis Settings*\n  4. Once there add a new `environment variable` called `github_token` and use your access token as the `value`. Optionally make it only available on the master branch.\n![Travis Settings Environment Variable](https://dev-to-uploads.s3.amazonaws.com/i/6f84pfcxgpxmo8ccivgz.jpg)\n*Travis Settings Environment Variable*\n\n4. Now that you've set up the Travis settings and `.travis.yml` you're ready to start your first Travis build. To do this, publish your new `.travis.yml` to your master branch and it will start automatically. If you’ve already done this, start a new build of master from the Travis-ci UI.\n\nPhew, that was a lot of configuring, but it's done. Let's set up GitHub Pages so that the website will be viewable.\n\n## Setup GitHub Pages\nBy this point, the Travis build should have successfully completed and created a `gh-pages` branch in your repository. This means that the static website code is available and just needs to be served somewhere such as GitHub Pages.\n\n![GitHub branch overview](https://dev-to-uploads.s3.amazonaws.com/i/08rfqglhw7huf4r0036u.jpg)\n*You should be able to see the `gh-pages` branch.*\n\nTo enable GitHub Pages for your repository you need to:\n1. Navigate to the settings tab for your Github repository (such as https://github.com/james-wallis/wallisconsultancy/settings) \n2. Scroll down to the “GitHub Pages” section.\n3. Under the source tab select `gh-pages branch`\n![GitHub Pages settings](https://dev-to-uploads.s3.amazonaws.com/i/oaq9ld9k5ucazxsu30np.jpg)\n*The GitHub Pages settings*\n\nIn a little while, you should be able to access your website at the URL provided by GitHub (if you can’t go back over the Travis-CI steps above). That's all the setup that is needed to host a static site with GitHub pages.\n\nOr is it...\n\n### Something isn't quite right... where's the CSS styling\nIf you followed both sections above you will be expecting to see your website as it looked on your local machine.\n\nInstead you will likely be greeted with a website with the correct content, but no styling. Additionally, if you try to navigate between pages, they will not resolve. It'll look something like the below:\n\n![Broken Wallis Consultancy site](https://dev-to-uploads.s3.amazonaws.com/i/flj94q6oybmv6rxlbclr.jpg)\n*Wallis Consultancy website without the CSS*\n\n**Why is this happening you ask?**\nNext.js expects the CSS, JavaScript files and Images to be hosted on `user.github.io/` but in the case of GitHub pages, the site will be hosted on a subpath, in my case `user.github.io/wallisconsultancy`. This results in the website not being able to find any of its dependencies or link to other pages.\n\nYou can recreate this locally by running `next export` and then using [serve](https://www.npmjs.com/package/serve) to serve the parent directory of your output directory (usually `out`). So for me `serve wallisconsultancy` where the output directory is `wallisconsultancy/out`.\n\n\n**Ok fine, but can we fix it?**\n\nYes of course!\n\n*Note: If you’re going to host on a custom domain this problem will disappear (as long as you are not using a subpath like GitHub pages). Skip the rest of this blog and read my next blog: [Using a custom domain with GitHub Pages](https://dev.to/jameswallis/using-a-custom-domain-with-github-pages-1g1m).*\n\n### Next.js assetPrefix and basePath to the rescue\n\nThis next section will be split into two subsections. The first will focus on fixing the CSS styling and other assets such as images using `assetPrefix`. The second will focus on fixing links to different pages, first using an environment variable to prefix the route and secondly using `basePath`, a new configuration variable introduced in [Next.js 9.5](https://nextjs.org/blog/next-9-5#customizable-base-path).\n\n#### Fixing CSS and other assets\n\nFixing CSS and other assets is simple and can be done in only a few steps:\n1. Open or create a [next.config.js file](https://nextjs.org/docs/api-reference/next.config.js/introduction).\n2. Add an `assetPrefix` to your `module.exports` with the value of your GitHub pages subpath with a forward slash at either side. For me this is:\n```javascript\nmodule.exports = {\n    assetPrefix: '/wallisconsultancy/',\n}\n```\n\nWith that simple change, you should be able to push that change to GitHub pages and will be able to see the page layout that you expect.\n\n#### Fixing Links between pages\n\n**Next.js 9.4 and below**\nPrior to Next.js 9.5, fixing the page links meant modifying each `<Link>` that you had created to have a `prefix`. The cleanest way of achieving this is to:\n1. Open or create a [next.config.js file](https://nextjs.org/docs/api-reference/next.config.js/introduction).\n2. Add an environment variable called `BACKEND_URL` with the value of your GitHub Pages subpath with a forward slash at the start. For me this is:\n```javascript\nmodule.exports = {\n    env: {\n        BACKEND_URL: '/wallisconsultancy',\n    },\n}\n```\n3. Modify your `<Link>` components to use the prefix by changing them to be:\n```javascript\n<Link href={`${process.env.BACKEND_URL}${href}`}>{href}</Link>\n```\n  So for a link to the about page the `href` for the `<Link>` would change from \n```javascript\nhref=\"/about\"\n``` \nto \n```javascript\nhref={`${process.env.BACKEND_URL}/about`}\n```\n\nThis is a bit messy, but fortunately, in Next.js 9.5 this was simplified with the introduction of a `basePath` variable.\n\n**Next.js 9.5 and above**\nInstead of adding a `BACKEND_URL` to every `<Link>`, [Next.js 9.5 introduces the basePath variable](https://nextjs.org/blog/next-9-5#customizable-base-path). To use it all you need to do is:\n1. Open or create a [next.config.js file](https://nextjs.org/docs/api-reference/next.config.js/introduction).\n2. Add a `basePath` to your `module.exports` with the value of your GitHub pages subpath with a forward slash at the start. For me this is:\n```javascript\nmodule.exports = {\n    basePath: '/wallisconsultancy',\n}\n```\n\n#### Final `next.config.js`\nCombining the `assetPrefix` and `basePath` my `next.config.js` is:\n```javascript\nmodule.exports = {\n    basePath: '/wallisconsultancy',\n    assetPrefix: '/wallisconsultancy/',\n}\n```\n\n*Bonus: With `next-optimized-images`*\nIn [a previous blog post](https://dev.to/jameswallis/seo-and-image-optimization-with-next-js-23m9) I introduced [next-optimized-images](https://github.com/cyrilwanner/next-optimized-images) which can be used to improve the performance of a website by compressing the images.\n\nTo fix the GitHub Pages subpath issue with it I added the [imagesPublicPath](https://github.com/cyrilwanner/next-optimized-images#imagespublicpath) variable to my `next.config.js`. With this fix it now looks like this:\n```javascript\nconst withPlugins = require('next-compose-plugins');\nconst optimizedImages = require('next-optimized-images');\nmodule.exports = withPlugins([\n  [optimizedImages, {\n    mozjpeg: {\n      quality: 80,\n    },\n    pngquant: {\n      speed: 3,\n      strip: true,\n      verbose: true,\n    },\n    imagesPublicPath: '/wallisconsultancy/_next/static/images/',\n  }],\n  {\n    basePath: '/wallisconsultancy',\n    assetPrefix: '/wallisconsultancy/',\n    env,\n  },\n]);\n```\n\nAnd with that, my website is hosted on GitHub pages, looks good and I can navigate between pages as I expect. You are now able to show your website to anyone around the world!\n\n[Here's the link to Wallis Consultancy again to see the result of the above steps!](https://james-wallis.github.io/wallisconsultancy/)\n\n[Want to use a custom domain?](https://dev.to/jameswallis/using-a-custom-domain-with-github-pages-1g1m)\n\n## Roundup\nIn this blog, I demonstrated how to build a Travis build that will build and export your Next.js application into a static website. I then configured GitHub pages to host the website and fixed CSS and link problems due to the subpath it hosts websites on.\n\nIn the next and final blog of this series, I'll show you how to use a custom domain with GitHub Pages.","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<blockquote>\n<p><strong>2021 Update</strong>\n<em>I have moved Wallis Consultancy from GitHub Pages to Vercel. <a href=\"https://dev.to/jameswallis/launching-my-personal-next-js-site-on-vercel-in-less-than-a-minute-296h\">I wrote a post describing my motivations for doing so which you can read here</a>. Essentially, Next.js integrates with Vercel a lot better than with GitHub Pages.</em></p>\n</blockquote>\n<p><em>I've kept a version of Wallis Consultancy hosted on GitHub pages for this blog and have updated all links to Wallis Consultancy below.</em>\n<em>Having said that, GitHub Pages is 100% still a good place to host your Next.js project!</em></p>\n<p>The finished website (hosted on GitHub Pages): <a href=\"https://james-wallis.github.io/wallisconsultancy/\">https://james-wallis.github.io/wallisconsultancy/</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h2>Intro</h2>\n<p>The re-implementation of Wallis Consultancy into a Next.js application is complete. This blog post documents the process of taking a Next.js project and hosting it on GitHub pages. It covers:</p>\n<ul>\n<li>Using <code>next export</code> to convert the Next.js project to a static website.</li>\n<li>Building a Travis pipeline to build the website and push it to a <code>gh-pages</code> branch.</li>\n</ul>\n<h2>Overview of technologies</h2>\n<h3>GitHub Pages</h3>\n<blockquote>\n<p>GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub optionally runs the files through a build process and publishes a website.</p>\n</blockquote>\n<p><a href=\"https://pages.github.com/\">GitHub Pages</a></p>\n<h3>Travis</h3>\n<blockquote>\n<p>Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub and Bitbucket.</p>\n</blockquote>\n<p>It’s free for open-source projects and integrates automatically with Github. All you need to do is sign up and add a <code>.travis.yml</code> file and it’s ready to go.</p>\n<p><a href=\"https://travis-ci.org/\">Travis CI</a></p>\n<h3>Next.js export</h3>\n<blockquote>\n<p><code>next export</code> allows you to export your app to static HTML, which can be run standalone without the need of a Node.js server.</p>\n</blockquote>\n<p>It generates the HTML into an <code>out</code> directory. From there you can use tools such as <a href=\"https://www.npmjs.com/package/serve\">serve</a> to run your app.</p>\n<p>Now that the technologies used in this blog have been introduced, let's deploy our Next.js app to GitHub Pages.</p>\n<h2>Creating the Travis build</h2>\n<p>Connecting Travis to a GitHub repository is as simple as creating a <code>.travis.yml</code>. The following documents this process and how to use secret environment variables with a Travis build.</p>\n<ol>\n<li>Create a <code>.travis.yml</code> file in the top directory of your Github repository.</li>\n<li>Add the following (without the comments):</li>\n</ol>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span> <span class=\"hljs-comment\"># Node.js based project</span>\n<span class=\"hljs-attr\">node_js:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\"># Level of Node.js to use</span>\n<span class=\"hljs-attr\">cache:</span>\n  <span class=\"hljs-attr\">directories:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node_modules</span> <span class=\"hljs-comment\"># Cache the node_modules folder for quicker build times</span>\n<span class=\"hljs-attr\">script:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-comment\"># Runs next build</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">export</span> <span class=\"hljs-comment\"># Runs next export and generates the out directory</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">touch</span> <span class=\"hljs-string\">out/.nojekyll</span> <span class=\"hljs-comment\"># Creates a file telling Github not to build the project using Jekyll</span>\n<span class=\"hljs-attr\">deploy:</span>\n  <span class=\"hljs-attr\">provider:</span> <span class=\"hljs-string\">pages</span> <span class=\"hljs-comment\"># Informs Travis this is a deployment to GitHub Pages</span>\n  <span class=\"hljs-attr\">skip_cleanup:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># Prevents Travis from resetting the working directory made during the build</span>\n  <span class=\"hljs-attr\">github_token:</span> <span class=\"hljs-string\">$github_token</span> <span class=\"hljs-comment\"># GitHub access token to use when pushing to the gh-pages branch</span>\n  <span class=\"hljs-attr\">local_dir:</span> <span class=\"hljs-string\">out</span> <span class=\"hljs-comment\"># Directory to push to the gh-pages branch</span>\n  <span class=\"hljs-attr\">on:</span>\n    <span class=\"hljs-comment\"># Only deploy when the build is on master or main branch - two common default branch names</span>\n    <span class=\"hljs-comment\"># If you're using a different branch name, add it here</span>\n    <span class=\"hljs-attr\">all_branches:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$TRAVIS_BRANCH</span> <span class=\"hljs-string\">=~</span> <span class=\"hljs-string\">^(master|main)$</span>\n</code></pre>\n<p>For more information the <a href=\"https://docs.travis-ci.com/user/deployment-v2/providers/pages/\">official Travis Github Pages docs</a></p>\n<ol start=\"3\">\n<li>Once you’ve added the <code>.travis.yml</code> to your repository, you need to add the <code>github_token</code> (needed to push to your <code>gh-pages</code> branch) variable to your Travis CI settings.</li>\n<li>First get an API token following the instructions on <a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\">Creating a personal access token - GitHub Docs</a> <em>Note</em>: As my repository was private while making this blog I enabled the whole <code>repo</code> scope. However you may be able to just enable the <code>public_repo</code> scope.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/ogiqsi8d63glc59p6a4g.jpg\" alt=\"GitHub Repo Scope for access token\">\n<em>The Full GitHub repo scope</em></p>\n<ol start=\"2\">\n<li>Open <code>https://travis-ci.com/github/{your_username}/{your_repository}</code> in a browser.</li>\n<li>Navigate to more options -> Setting.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/av9vyftpt2sl5t843fph.jpg\" alt=\"Travis Settings\">\n<em>Travis Settings</em>\n4. Once there add a new <code>environment variable</code> called <code>github_token</code> and use your access token as the <code>value</code>. Optionally make it only available on the master branch.\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/6f84pfcxgpxmo8ccivgz.jpg\" alt=\"Travis Settings Environment Variable\">\n<em>Travis Settings Environment Variable</em></p>\n<ol start=\"4\">\n<li>Now that you've set up the Travis settings and <code>.travis.yml</code> you're ready to start your first Travis build. To do this, publish your new <code>.travis.yml</code> to your master branch and it will start automatically. If you’ve already done this, start a new build of master from the Travis-ci UI.</li>\n</ol>\n<p>Phew, that was a lot of configuring, but it's done. Let's set up GitHub Pages so that the website will be viewable.</p>\n<h2>Setup GitHub Pages</h2>\n<p>By this point, the Travis build should have successfully completed and created a <code>gh-pages</code> branch in your repository. This means that the static website code is available and just needs to be served somewhere such as GitHub Pages.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/08rfqglhw7huf4r0036u.jpg\" alt=\"GitHub branch overview\">\n<em>You should be able to see the <code>gh-pages</code> branch.</em></p>\n<p>To enable GitHub Pages for your repository you need to:</p>\n<ol>\n<li>Navigate to the settings tab for your Github repository (such as <a href=\"https://github.com/james-wallis/wallisconsultancy/settings\">https://github.com/james-wallis/wallisconsultancy/settings</a>)</li>\n<li>Scroll down to the “GitHub Pages” section.</li>\n<li>Under the source tab select <code>gh-pages branch</code></li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/oaq9ld9k5ucazxsu30np.jpg\" alt=\"GitHub Pages settings\">\n<em>The GitHub Pages settings</em></p>\n<p>In a little while, you should be able to access your website at the URL provided by GitHub (if you can’t go back over the Travis-CI steps above). That's all the setup that is needed to host a static site with GitHub pages.</p>\n<p>Or is it...</p>\n<h3>Something isn't quite right... where's the CSS styling</h3>\n<p>If you followed both sections above you will be expecting to see your website as it looked on your local machine.</p>\n<p>Instead you will likely be greeted with a website with the correct content, but no styling. Additionally, if you try to navigate between pages, they will not resolve. It'll look something like the below:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/flj94q6oybmv6rxlbclr.jpg\" alt=\"Broken Wallis Consultancy site\">\n<em>Wallis Consultancy website without the CSS</em></p>\n<p><strong>Why is this happening you ask?</strong>\nNext.js expects the CSS, JavaScript files and Images to be hosted on <code>user.github.io/</code> but in the case of GitHub pages, the site will be hosted on a subpath, in my case <code>user.github.io/wallisconsultancy</code>. This results in the website not being able to find any of its dependencies or link to other pages.</p>\n<p>You can recreate this locally by running <code>next export</code> and then using <a href=\"https://www.npmjs.com/package/serve\">serve</a> to serve the parent directory of your output directory (usually <code>out</code>). So for me <code>serve wallisconsultancy</code> where the output directory is <code>wallisconsultancy/out</code>.</p>\n<p><strong>Ok fine, but can we fix it?</strong></p>\n<p>Yes of course!</p>\n<p><em>Note: If you’re going to host on a custom domain this problem will disappear (as long as you are not using a subpath like GitHub pages). Skip the rest of this blog and read my next blog: <a href=\"https://dev.to/jameswallis/using-a-custom-domain-with-github-pages-1g1m\">Using a custom domain with GitHub Pages</a>.</em></p>\n<h3>Next.js assetPrefix and basePath to the rescue</h3>\n<p>This next section will be split into two subsections. The first will focus on fixing the CSS styling and other assets such as images using <code>assetPrefix</code>. The second will focus on fixing links to different pages, first using an environment variable to prefix the route and secondly using <code>basePath</code>, a new configuration variable introduced in <a href=\"https://nextjs.org/blog/next-9-5#customizable-base-path\">Next.js 9.5</a>.</p>\n<h4>Fixing CSS and other assets</h4>\n<p>Fixing CSS and other assets is simple and can be done in only a few steps:</p>\n<ol>\n<li>Open or create a <a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">next.config.js file</a>.</li>\n<li>Add an <code>assetPrefix</code> to your <code>module.exports</code> with the value of your GitHub pages subpath with a forward slash at either side. For me this is:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">assetPrefix</span>: <span class=\"hljs-string\">'/wallisconsultancy/'</span>,\n}</code></pre>\n<p>With that simple change, you should be able to push that change to GitHub pages and will be able to see the page layout that you expect.</p>\n<h4>Fixing Links between pages</h4>\n<p><strong>Next.js 9.4 and below</strong>\nPrior to Next.js 9.5, fixing the page links meant modifying each <code>&#x3C;Link></code> that you had created to have a <code>prefix</code>. The cleanest way of achieving this is to:</p>\n<ol>\n<li>Open or create a <a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">next.config.js file</a>.</li>\n<li>Add an environment variable called <code>BACKEND_URL</code> with the value of your GitHub Pages subpath with a forward slash at the start. For me this is:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">env</span>: {\n        <span class=\"hljs-attr\">BACKEND_URL</span>: <span class=\"hljs-string\">'/wallisconsultancy'</span>,\n    },\n}</code></pre>\n<ol start=\"3\">\n<li>Modify your <code>&#x3C;Link></code> components to use the prefix by changing them to be:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\">&#x3C;Link href={<span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.BACKEND_URL}</span><span class=\"hljs-subst\">${href}</span>`</span>}>{href}&#x3C;/Link></code></pre>\n<p>So for a link to the about page the <code>href</code> for the <code>&#x3C;Link></code> would change from</p>\n<pre><code class=\"hljs language-javascript\">href=<span class=\"hljs-string\">\"/about\"</span></code></pre>\n<p>to</p>\n<pre><code class=\"hljs language-javascript\">href={<span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.BACKEND_URL}</span>/about`</span>}</code></pre>\n<p>This is a bit messy, but fortunately, in Next.js 9.5 this was simplified with the introduction of a <code>basePath</code> variable.</p>\n<p><strong>Next.js 9.5 and above</strong>\nInstead of adding a <code>BACKEND_URL</code> to every <code>&#x3C;Link></code>, <a href=\"https://nextjs.org/blog/next-9-5#customizable-base-path\">Next.js 9.5 introduces the basePath variable</a>. To use it all you need to do is:</p>\n<ol>\n<li>Open or create a <a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">next.config.js file</a>.</li>\n<li>Add a <code>basePath</code> to your <code>module.exports</code> with the value of your GitHub pages subpath with a forward slash at the start. For me this is:</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/wallisconsultancy'</span>,\n}</code></pre>\n<h4>Final <code>next.config.js</code></h4>\n<p>Combining the <code>assetPrefix</code> and <code>basePath</code> my <code>next.config.js</code> is:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/wallisconsultancy'</span>,\n    <span class=\"hljs-attr\">assetPrefix</span>: <span class=\"hljs-string\">'/wallisconsultancy/'</span>,\n}</code></pre>\n<p><em>Bonus: With <code>next-optimized-images</code></em>\nIn <a href=\"https://dev.to/jameswallis/seo-and-image-optimization-with-next-js-23m9\">a previous blog post</a> I introduced <a href=\"https://github.com/cyrilwanner/next-optimized-images\">next-optimized-images</a> which can be used to improve the performance of a website by compressing the images.</p>\n<p>To fix the GitHub Pages subpath issue with it I added the <a href=\"https://github.com/cyrilwanner/next-optimized-images#imagespublicpath\">imagesPublicPath</a> variable to my <code>next.config.js</code>. With this fix it now looks like this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> withPlugins = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'next-compose-plugins'</span>);\n<span class=\"hljs-keyword\">const</span> optimizedImages = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'next-optimized-images'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = withPlugins([\n  [optimizedImages, {\n    <span class=\"hljs-attr\">mozjpeg</span>: {\n      <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">80</span>,\n    },\n    <span class=\"hljs-attr\">pngquant</span>: {\n      <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">3</span>,\n      <span class=\"hljs-attr\">strip</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">verbose</span>: <span class=\"hljs-literal\">true</span>,\n    },\n    <span class=\"hljs-attr\">imagesPublicPath</span>: <span class=\"hljs-string\">'/wallisconsultancy/_next/static/images/'</span>,\n  }],\n  {\n    <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/wallisconsultancy'</span>,\n    <span class=\"hljs-attr\">assetPrefix</span>: <span class=\"hljs-string\">'/wallisconsultancy/'</span>,\n    env,\n  },\n]);</code></pre>\n<p>And with that, my website is hosted on GitHub pages, looks good and I can navigate between pages as I expect. You are now able to show your website to anyone around the world!</p>\n<p><a href=\"https://james-wallis.github.io/wallisconsultancy/\">Here's the link to Wallis Consultancy again to see the result of the above steps!</a></p>\n<p><a href=\"https://dev.to/jameswallis/using-a-custom-domain-with-github-pages-1g1m\">Want to use a custom domain?</a></p>\n<h2>Roundup</h2>\n<p>In this blog, I demonstrated how to build a Travis build that will build and export your Next.js application into a static website. I then configured GitHub pages to host the website and fixed CSS and link problems due to the subpath it hosts websites on.</p>\n<p>In the next and final blog of this series, I'll show you how to use a custom domain with GitHub Pages.</p>\n"},{"id":416192,"title":"SEO and Image Optimization with Next.js","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-08-02T16:46:08.726Z","devToSlug":"seo-and-image-optimization-with-next-js-23m9","devToPath":"/jameswallis/seo-and-image-optimization-with-next-js-23m9","devToURL":"https://dev.to/jameswallis/seo-and-image-optimization-with-next-js-23m9","commentsCount":3,"publicReactionsCount":39,"positiveReactionsCount":39,"coverImage":null,"tags":["javascript","react","tutorial","nextjs"],"canonical":"https://wallis.dev/blog/seo-and-image-optimization-with-next-js","collectionId":-1,"slug":"seo-and-image-optimization-with-next-js","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n**Want to track users of your website in real time?** [Check out my post about Google Analytics and how to use it with Next.js](https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1).\n\n## Intro\n\nFor a website to rank highly on Google and have the best chance of generating business, it needs to perform well and be SEO friendly. Fortunately, Next.js has two plugins that can help take our website to the next level.\n\nNow that the Wallis Consultancy website has been re-built it’s now time to focus on the finer details which are:\n* SEO specifics (Page titles, descriptions, Open Graph)\n* Image Optimisation (Ensure images are as small as possible, load smaller images on mobile, decrease load times)\n\nWe can achieve this easily with Next.js and two third party modules.\nThese are:\n* [next-seo](https://github.com/garmeeh/next-seo)\n* [next-optimized-images](https://github.com/cyrilwanner/next-optimized-images)\n\n*With the release of Next.js 10 a built-in image optimisation component has released. [Checkout my article where I briefly compare it with next-optimized-images](https://dev.to/jameswallis/next-image-and-next-optimized-images-a-brief-comparison-4c4i).*\n\n## next-seo\nNext-seo provides the ability to configure SEO focused fields, such as title, description and canonical URL that are found in the `<head>` of a HTML document.\n\nIt works by adding a `<NextSEO>` component into a page and passing it props. An example of this for title and description:\n```javascript\nimport React from ‘react’;\nimport { NextSeo } from ‘next-seo’;\n\nexport default () => (\n  <>\n    <NextSeo\n      title=“Simple Usage Example”\n      description=“A short description goes here.”\n    />\n    <p>Simple Usage</p>\n  </>\n);\n```\n\nFor some attributes, they don’t change on a page by page basis so next-seo provides the `DefaultSeo` component that can be added to a Next.js `_app.js`. An example of this is using the `twitter` and `openGraph` props:\n\n```javascript\nimport App, { Container } from ‘next/app’;\nimport React from ‘react’;\nimport { DefaultSeo } from ‘next-seo’;\n\nexport default class MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n      <>\n        <DefaultSeo\n          openGraph={{\n            type: ‘website’,\n            locale: ‘en_IE’,\n            url: ‘https://www.url.ie/‘,\n            site_name: ‘SiteName’,\n          }}\n          twitter={{\n            handle: ‘@handle’,\n            site: ‘@site’,\n            cardType: ‘summary_large_image’,\n          }}\n        />\n        <Component {…pageProps} />\n      </>\n    );\n  }\n}\n```\n\nFor wallisconsultancy.co.uk the default next-seo is:\n```javascript\n<DefaultSeo\n\ttitleTemplate={‘%s | Wallis Consultancy’}\n  openGraph={{\n  \t\ttype: ‘website’,\n      locale: ‘en_IE’,\n      url: ‘https://wallisconsultancy.co.uk/‘,\n      site_name: ‘Wallis Consultancy’,\n   }}\n/>\n```\n\n## next-optimized-images\nThis package optimises all images in a Next.js application by using `require('filepathToImage')` as the value of the `src` attribute in an `img` tag. It is able to handle jpeg, png, svg, webp and gif file types and can also enable progressive loading and inline small images in addition to reducing their size between 20% to 60%.\n\nAs described in the documentation, you need to install additional packages to `next-optimized-images` to take advantage of its optimisation power. As wallisconsultancy.co.uk contains JPG images I also installed `imagemin-mozjpeg`, webp-loader, `responsive-loader` and `sharp`. The latter two packages enable the ability to resize images into multiple sizes at build time - meaning mobiles can be sent smaller images than desktops resulting in faster load times on slower, mobile networks. The `webp-loader` package is a tool that will generate a `webp` type copy of the initial `jpg` image to be shown on devices that support it. `webp` is a next generation file type that has superior file compression to `jpg` making them smaller in size and faster to load onto the page\n\nAn example use for the image on the wallisconsultancy.co.uk homepage is:\n```javascript\nimport Layout from ‘../components/layout’\n\nexport default function IndexPage() {\n  return (\n    <Layout pageTitle=“Home”>\n      <div className=“flex flex-col md:flex-row”>\n        <div className=“w-100 md:w-2/3”>\n\t\t\t...content\n        </div>\n        <div className=“w-100 md:w-1/3 flex items-center justify-center”>\n          <picture>\n            <source srcSet={require('../images/mike-wallis2.jpg?webp')} type=\"image/webp\" />\n            <source srcSet={require('../images/mike-wallis2.jpg')} type=\"image/jpeg\" />\n            <img\n              src={require('../images/mike-wallis2.jpg')}\n              alt=\"Mike Wallis\"\n            />\n          </picture>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n```\n\nThis will create 2 compressed copies of the image, `jpg` and `webp`. The device will attempt to select `webp` but fallback to `jpg` if it isn't supported. On a device where the `picture` tag is not supported, the `img` tag will be used.\n\n## Google Lighthouse\n> Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, SEO and more.\n\n*[Google Developers](https://developers.google.com/web/tools/lighthouse)*\n\nBefore adding the packages used in this blog, the performance score for Wallis Consultancy was around 70 (mainly as the images sizes were not optimised and not using next generation formats such as `webp`) and the SEO was 60.\n\nAfter adding the SEO fields and optimising all the images on the website it achieved an almost perfect Google Lighthouse score:\n![The Google Lighthouse score for wallisconsultancy.co.uk](https://dev-to-uploads.s3.amazonaws.com/i/djr5nh6me37h1m7zaepc.jpg)\n\n## Roundup\n\nThis blog demonstrated the power of two third party Next.js packages `next-seo` and `next-optimised-images`. The former will ensure all the pages are setup to rank highly on search engines and the latter makes each page load that little bit faster. \n\nIn the next blog, the final of the series, I’ll create a Travis pipeline which will deploy the website to Github pages.\n\n### Bonus:\nImproving website SEO and performance is a great way to gain more users. Once this is done it’s a good idea to track them and see how real people use your website.  Let me take you through adding Google Analytics to your Next.js app to be able to see this information and more.\n\n**[Adding Google Analytics to Next.js with FAQs.](https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1)**\n\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<p><strong>Want to track users of your website in real time?</strong> <a href=\"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1\">Check out my post about Google Analytics and how to use it with Next.js</a>.</p>\n<h2>Intro</h2>\n<p>For a website to rank highly on Google and have the best chance of generating business, it needs to perform well and be SEO friendly. Fortunately, Next.js has two plugins that can help take our website to the next level.</p>\n<p>Now that the Wallis Consultancy website has been re-built it’s now time to focus on the finer details which are:</p>\n<ul>\n<li>SEO specifics (Page titles, descriptions, Open Graph)</li>\n<li>Image Optimisation (Ensure images are as small as possible, load smaller images on mobile, decrease load times)</li>\n</ul>\n<p>We can achieve this easily with Next.js and two third party modules.\nThese are:</p>\n<ul>\n<li><a href=\"https://github.com/garmeeh/next-seo\">next-seo</a></li>\n<li><a href=\"https://github.com/cyrilwanner/next-optimized-images\">next-optimized-images</a></li>\n</ul>\n<p><em>With the release of Next.js 10 a built-in image optimisation component has released. <a href=\"https://dev.to/jameswallis/next-image-and-next-optimized-images-a-brief-comparison-4c4i\">Checkout my article where I briefly compare it with next-optimized-images</a>.</em></p>\n<h2>next-seo</h2>\n<p>Next-seo provides the ability to configure SEO focused fields, such as title, description and canonical URL that are found in the <code>&#x3C;head></code> of a HTML document.</p>\n<p>It works by adding a <code>&#x3C;NextSEO></code> component into a page and passing it props. An example of this for title and description:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> ‘react’;\n<span class=\"hljs-keyword\">import</span> { NextSeo } <span class=\"hljs-keyword\">from</span> ‘next-seo’;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NextSeo</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">“Simple</span> <span class=\"hljs-attr\">Usage</span> <span class=\"hljs-attr\">Example</span>”\n      <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">“A</span> <span class=\"hljs-attr\">short</span> <span class=\"hljs-attr\">description</span> <span class=\"hljs-attr\">goes</span> <span class=\"hljs-attr\">here.</span>”\n    /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Simple Usage<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/></span></span>\n);</code></pre>\n<p>For some attributes, they don’t change on a page by page basis so next-seo provides the <code>DefaultSeo</code> component that can be added to a Next.js <code>_app.js</code>. An example of this is using the <code>twitter</code> and <code>openGraph</code> props:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> App, { Container } <span class=\"hljs-keyword\">from</span> ‘next/app’;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> ‘react’;\n<span class=\"hljs-keyword\">import</span> { DefaultSeo } <span class=\"hljs-keyword\">from</span> ‘next-seo’;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">App</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { Component, pageProps } = <span class=\"hljs-built_in\">this</span>.props;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">DefaultSeo</span>\n          <span class=\"hljs-attr\">openGraph</span>=<span class=\"hljs-string\">{{</span>\n            <span class=\"hljs-attr\">type:</span> ‘<span class=\"hljs-attr\">website</span>’,\n            <span class=\"hljs-attr\">locale:</span> ‘<span class=\"hljs-attr\">en_IE</span>’,\n            <span class=\"hljs-attr\">url:</span> ‘<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">www.url.ie</span>/‘,\n            <span class=\"hljs-attr\">site_name:</span> ‘<span class=\"hljs-attr\">SiteName</span>’,\n          }}\n          <span class=\"hljs-attr\">twitter</span>=<span class=\"hljs-string\">{{</span>\n            <span class=\"hljs-attr\">handle:</span> ‘@<span class=\"hljs-attr\">handle</span>’,\n            <span class=\"hljs-attr\">site:</span> ‘@<span class=\"hljs-attr\">site</span>’,\n            <span class=\"hljs-attr\">cardType:</span> ‘<span class=\"hljs-attr\">summary_large_image</span>’,\n          }}\n        /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> {…<span class=\"hljs-attr\">pageProps</span>} /></span>\n      <span class=\"hljs-tag\">&#x3C;/></span></span>\n    );\n  }\n}</code></pre>\n<p>For wallisconsultancy.co.uk the default next-seo is:</p>\n<pre><code class=\"hljs language-javascript\">&#x3C;DefaultSeo\n\ttitleTemplate={‘%s | Wallis Consultancy’}\n  openGraph={{\n  \t\t<span class=\"hljs-attr\">type</span>: ‘website’,\n      <span class=\"hljs-attr\">locale</span>: ‘en_IE’,\n      <span class=\"hljs-attr\">url</span>: ‘https:<span class=\"hljs-comment\">//wallisconsultancy.co.uk/‘,</span>\n      site_name: ‘Wallis Consultancy’,\n   }}\n/></code></pre>\n<h2>next-optimized-images</h2>\n<p>This package optimises all images in a Next.js application by using <code>require('filepathToImage')</code> as the value of the <code>src</code> attribute in an <code>img</code> tag. It is able to handle jpeg, png, svg, webp and gif file types and can also enable progressive loading and inline small images in addition to reducing their size between 20% to 60%.</p>\n<p>As described in the documentation, you need to install additional packages to <code>next-optimized-images</code> to take advantage of its optimisation power. As wallisconsultancy.co.uk contains JPG images I also installed <code>imagemin-mozjpeg</code>, webp-loader, <code>responsive-loader</code> and <code>sharp</code>. The latter two packages enable the ability to resize images into multiple sizes at build time - meaning mobiles can be sent smaller images than desktops resulting in faster load times on slower, mobile networks. The <code>webp-loader</code> package is a tool that will generate a <code>webp</code> type copy of the initial <code>jpg</code> image to be shown on devices that support it. <code>webp</code> is a next generation file type that has superior file compression to <code>jpg</code> making them smaller in size and faster to load onto the page</p>\n<p>An example use for the image on the wallisconsultancy.co.uk homepage is:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Layout <span class=\"hljs-keyword\">from</span> ‘../components/layout’\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IndexPage</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">pageTitle</span>=<span class=\"hljs-string\">“Home”</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">“flex</span> <span class=\"hljs-attr\">flex-col</span> <span class=\"hljs-attr\">md:flex-row</span>”></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">“w-100</span> <span class=\"hljs-attr\">md:w-2</span>/<span class=\"hljs-attr\">3</span>”></span>\n\t\t\t...content\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">“w-100</span> <span class=\"hljs-attr\">md:w-1</span>/<span class=\"hljs-attr\">3</span> <span class=\"hljs-attr\">flex</span> <span class=\"hljs-attr\">items-center</span> <span class=\"hljs-attr\">justify-center</span>”></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">picture</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">srcSet</span>=<span class=\"hljs-string\">{require(</span>'<span class=\"hljs-attr\">..</span>/<span class=\"hljs-attr\">images</span>/<span class=\"hljs-attr\">mike-wallis2.jpg</span>?<span class=\"hljs-attr\">webp</span>')} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/webp\"</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">srcSet</span>=<span class=\"hljs-string\">{require(</span>'<span class=\"hljs-attr\">..</span>/<span class=\"hljs-attr\">images</span>/<span class=\"hljs-attr\">mike-wallis2.jpg</span>')} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/jpeg\"</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span>\n              <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{require(</span>'<span class=\"hljs-attr\">..</span>/<span class=\"hljs-attr\">images</span>/<span class=\"hljs-attr\">mike-wallis2.jpg</span>')}\n              <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Mike Wallis\"</span>\n            /></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">picture</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Layout</span>></span></span>\n  )\n}</code></pre>\n<p>This will create 2 compressed copies of the image, <code>jpg</code> and <code>webp</code>. The device will attempt to select <code>webp</code> but fallback to <code>jpg</code> if it isn't supported. On a device where the <code>picture</code> tag is not supported, the <code>img</code> tag will be used.</p>\n<h2>Google Lighthouse</h2>\n<blockquote>\n<p>Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, SEO and more.</p>\n</blockquote>\n<p><em><a href=\"https://developers.google.com/web/tools/lighthouse\">Google Developers</a></em></p>\n<p>Before adding the packages used in this blog, the performance score for Wallis Consultancy was around 70 (mainly as the images sizes were not optimised and not using next generation formats such as <code>webp</code>) and the SEO was 60.</p>\n<p>After adding the SEO fields and optimising all the images on the website it achieved an almost perfect Google Lighthouse score:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/djr5nh6me37h1m7zaepc.jpg\" alt=\"The Google Lighthouse score for wallisconsultancy.co.uk\"></p>\n<h2>Roundup</h2>\n<p>This blog demonstrated the power of two third party Next.js packages <code>next-seo</code> and <code>next-optimised-images</code>. The former will ensure all the pages are setup to rank highly on search engines and the latter makes each page load that little bit faster.</p>\n<p>In the next blog, the final of the series, I’ll create a Travis pipeline which will deploy the website to Github pages.</p>\n<h3>Bonus:</h3>\n<p>Improving website SEO and performance is a great way to gain more users. Once this is done it’s a good idea to track them and see how real people use your website.  Let me take you through adding Google Analytics to your Next.js app to be able to see this information and more.</p>\n<p><strong><a href=\"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1\">Adding Google Analytics to Next.js with FAQs.</a></strong></p>\n"},{"id":412169,"title":"reCaptcha verification with EmailJS","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-07-29T17:07:18.600Z","devToSlug":"recaptcha-verification-with-emailjs-29ai","devToPath":"/jameswallis/recaptcha-verification-with-emailjs-29ai","devToURL":"https://dev.to/jameswallis/recaptcha-verification-with-emailjs-29ai","commentsCount":8,"publicReactionsCount":8,"positiveReactionsCount":8,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--QAGAuoII--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/r09vb642f8lj2p13u6rk.png","tags":["react","tutorial","javascript"],"canonical":"https://wallis.dev/blog/emailjs-with-recaptcha","collectionId":-1,"slug":"emailjs-with-recaptcha","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n## What is EmailJS\n\nIn the previous blog I introduced EmailJS, a service designed to send emails on behalf of websites with no backend server, and added to the Wallis Consultancy React.js application that is being built. \n\n## What is reCaptcha\n\n> reCAPTCHA is a free service from Google that helps protect websites from spam and abuse. A “CAPTCHA” is a turing test to tell human and bots apart. It is easy for humans to solve, but hard for “bots” and other malicious software to figure out. By adding reCAPTCHA to a site, you can block automated software while helping your welcome users to enter with ease.\n\n*[Source - support.google.com](https://support.google.com/recaptcha/answer/6080904?hl=en)*\n\nEmailJS supports Google reCaptcha verification before sending an email and you can restrict it to not send an email if a reCaptcha code is not sent in the request object.\n\nFor more detailed information see the topic on the EmailJS website: [Adding CAPTCHA verification | EmailJS](https://www.emailjs.com/docs/user-guide/adding-captcha-verification/)\n\n## Adding reCaptcha verification to EmailJS\n\nAn issue with the current wallisconsultancy.co.uk website is that the contact form can be easily abused by spam as it has no \"human verification\" method. \n\nLet's fix this issue by adding Google reCaptcha support to the website.\n\n### Setting up reCaptcha\n\n#### Creating a Google reCaptcha application\nTo setup EmailJS for my application we need to create a new application for Google reCaptcha.\n\nTo do this:\n1. Navigate to https://www.google.com/recaptcha\n1. Select `admin console` in the top right of the screen.\n1. Select `register a new site`\n1. Fill in the details\n  * Make sure you select `reCAPTCHA v2` as EmailJS does not support `v3`\n  * I gave `localhost` as the site URL so that I can use it in development. It’s recommended that you keep your development and production reCaptcha separate so I created another application with wallisconsultancy.co.uk as the site URL.\n\nOnce you've done this you will be given a `secret key`, keep this for the next step.\n\n![Google reCaptcha sign up form](https://dev-to-uploads.s3.amazonaws.com/i/lam7wueuigi6aq2n3tpt.png)\n*The Google reCaptcha sign up form*\n\n#### Connecting Google reCaptcha and EmailJS\nNext, we need to configure EmailJS to require a reCaptcha verification before sending an email by adding the secret key generated in the previous step to `CAPTCHA` tab of the [EmailJS template](https://dashboard.emailjs.com/admin/templates) section.\n\n![reCaptcha setup on EmailJS](https://dev-to-uploads.s3.amazonaws.com/i/mgrum9oi5ns1amezolgy.jpg)\n*Adding the reCaptcha secret key to the EmailJS template*\n\nEmailJS is now configured so that it won't send emails without the reCaptcha code.\n\n### Adding reCaptcha to React\n\nLet's modify the React application to send the reCaptcha code to EmailJS in the request object.\n\nI'm using the [react-google-recaptcha](https://www.npmjs.com/package/react-google-recaptcha) component to display the reCaptcha box. It supplies an `onChange` function that has the reCaptcha code as a parameter.\n\nI modified the flow of the contact form like so:\n1. User enters details\n1. On `send` the page changes to show the reCaptcha instead of the contact form\n1. User completes reCaptcha and the `onChange` function is called.\n1. React component combines the form values and reCaptcha code into a single `params` that is sent to EmailJS.\n\nExample usage:\n```javascript\nimport emailjs from 'emailjs-com';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nexport default function MessageForm() {\n  // This should be implemented as a form\n  const [name, email, message] = ['name', 'email', 'message'];\n\n\n  const sendEmail = (captchaValue) => {\n    const params = {\n      ...formState,\n      'g-recaptcha-response': captchaValue,\n    };\n\n    emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params,\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        console.log(\"EMAILJS SENT\", status.code);\n      }, (err) => {\n        console.log(\"EMAILJS ERROR\", err);\n      });\n  };\n\n  return (\n    <ReCAPTCHA\n      sitekey={process.env.CAPTCHA_SITE_KEY}\n      onChange={sendEmail}\n    />\n  );\n}\n```\n\n*The complete code for the contact form on the Wallis Consultancy React application can be found [on Github](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).*\n\nThat's it, we've now setup an EmailJS powered contact form with Google reCaptcha so that we can safely deploy our application without the form being abused by bots to spam to the email recipient.\n\n## Round up\nIn this blog I’ve explored how reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\nIn the next blog I will complete the development of wallisconsultancy.co.uk by using plugins to increase the performance of the website and the SEO score.","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h2>What is EmailJS</h2>\n<p>In the previous blog I introduced EmailJS, a service designed to send emails on behalf of websites with no backend server, and added to the Wallis Consultancy React.js application that is being built.</p>\n<h2>What is reCaptcha</h2>\n<blockquote>\n<p>reCAPTCHA is a free service from Google that helps protect websites from spam and abuse. A “CAPTCHA” is a turing test to tell human and bots apart. It is easy for humans to solve, but hard for “bots” and other malicious software to figure out. By adding reCAPTCHA to a site, you can block automated software while helping your welcome users to enter with ease.</p>\n</blockquote>\n<p><em><a href=\"https://support.google.com/recaptcha/answer/6080904?hl=en\">Source - support.google.com</a></em></p>\n<p>EmailJS supports Google reCaptcha verification before sending an email and you can restrict it to not send an email if a reCaptcha code is not sent in the request object.</p>\n<p>For more detailed information see the topic on the EmailJS website: <a href=\"https://www.emailjs.com/docs/user-guide/adding-captcha-verification/\">Adding CAPTCHA verification | EmailJS</a></p>\n<h2>Adding reCaptcha verification to EmailJS</h2>\n<p>An issue with the current wallisconsultancy.co.uk website is that the contact form can be easily abused by spam as it has no \"human verification\" method.</p>\n<p>Let's fix this issue by adding Google reCaptcha support to the website.</p>\n<h3>Setting up reCaptcha</h3>\n<h4>Creating a Google reCaptcha application</h4>\n<p>To setup EmailJS for my application we need to create a new application for Google reCaptcha.</p>\n<p>To do this:</p>\n<ol>\n<li>Navigate to <a href=\"https://www.google.com/recaptcha\">https://www.google.com/recaptcha</a></li>\n<li>Select <code>admin console</code> in the top right of the screen.</li>\n<li>Select <code>register a new site</code></li>\n<li>Fill in the details</li>\n</ol>\n<ul>\n<li>Make sure you select <code>reCAPTCHA v2</code> as EmailJS does not support <code>v3</code></li>\n<li>I gave <code>localhost</code> as the site URL so that I can use it in development. It’s recommended that you keep your development and production reCaptcha separate so I created another application with wallisconsultancy.co.uk as the site URL.</li>\n</ul>\n<p>Once you've done this you will be given a <code>secret key</code>, keep this for the next step.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/lam7wueuigi6aq2n3tpt.png\" alt=\"Google reCaptcha sign up form\">\n<em>The Google reCaptcha sign up form</em></p>\n<h4>Connecting Google reCaptcha and EmailJS</h4>\n<p>Next, we need to configure EmailJS to require a reCaptcha verification before sending an email by adding the secret key generated in the previous step to <code>CAPTCHA</code> tab of the <a href=\"https://dashboard.emailjs.com/admin/templates\">EmailJS template</a> section.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/mgrum9oi5ns1amezolgy.jpg\" alt=\"reCaptcha setup on EmailJS\">\n<em>Adding the reCaptcha secret key to the EmailJS template</em></p>\n<p>EmailJS is now configured so that it won't send emails without the reCaptcha code.</p>\n<h3>Adding reCaptcha to React</h3>\n<p>Let's modify the React application to send the reCaptcha code to EmailJS in the request object.</p>\n<p>I'm using the <a href=\"https://www.npmjs.com/package/react-google-recaptcha\">react-google-recaptcha</a> component to display the reCaptcha box. It supplies an <code>onChange</code> function that has the reCaptcha code as a parameter.</p>\n<p>I modified the flow of the contact form like so:</p>\n<ol>\n<li>User enters details</li>\n<li>On <code>send</code> the page changes to show the reCaptcha instead of the contact form</li>\n<li>User completes reCaptcha and the <code>onChange</code> function is called.</li>\n<li>React component combines the form values and reCaptcha code into a single <code>params</code> that is sent to EmailJS.</li>\n</ol>\n<p>Example usage:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> emailjs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'emailjs-com'</span>;\n<span class=\"hljs-keyword\">import</span> ReCAPTCHA <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-google-recaptcha'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MessageForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// This should be implemented as a form</span>\n  <span class=\"hljs-keyword\">const</span> [name, email, message] = [<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'message'</span>];\n\n\n  <span class=\"hljs-keyword\">const</span> sendEmail = <span class=\"hljs-function\">(<span class=\"hljs-params\">captchaValue</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> params = {\n      ...formState,\n      <span class=\"hljs-string\">'g-recaptcha-response'</span>: captchaValue,\n    };\n\n    emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params,\n      process.env.EMAIL_JS_USER,\n    )\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ status }</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"EMAILJS SENT\"</span>, status.code);\n      }, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"EMAILJS ERROR\"</span>, err);\n      });\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ReCAPTCHA</span>\n      <span class=\"hljs-attr\">sitekey</span>=<span class=\"hljs-string\">{process.env.CAPTCHA_SITE_KEY}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{sendEmail}</span>\n    /></span></span>\n  );\n}</code></pre>\n<p><em>The complete code for the contact form on the Wallis Consultancy React application can be found <a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js\">on Github</a>.</em></p>\n<p>That's it, we've now setup an EmailJS powered contact form with Google reCaptcha so that we can safely deploy our application without the form being abused by bots to spam to the email recipient.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve explored how reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.</p>\n<p>In the next blog I will complete the development of wallisconsultancy.co.uk by using plugins to increase the performance of the website and the SEO score.</p>\n"},{"id":411505,"title":"Using EmailJS with Next.js","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-07-28T13:28:40.681Z","devToSlug":"using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","devToPath":"/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","devToURL":"https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","commentsCount":2,"publicReactionsCount":19,"positiveReactionsCount":19,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--vboWEFSB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/429cqnnnc4651hytiuly.png","tags":["tutorial","react","javascript","nextjs"],"canonical":"https://wallis.dev/blog/using-emailjs-with-nextjs","collectionId":-1,"slug":"using-emailjs-with-nextjs","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nIn the previous blog I had completed the social bar for the top of the website. Since then I've created the rest of the website and it now looks like the current implementation.\n\n![Current implementation](https://dev-to-uploads.s3.amazonaws.com/i/yhwqk8md7bcicwq4nc87.jpg)\n*Current implementation*\n\n![New react implementation](https://dev-to-uploads.s3.amazonaws.com/i/lcp0ks2st7e891vowq5v.jpg)\n*New React implementation*\n\nYou can see the contact form has been implemented in the screenshot but it doesn’t work. One way to activate it would be to make an API request to a backend server and use a service such as `nodemailer` to send the email. As this will be a static site, another method of sending emails must be used. EmailJS to the rescue!\n\n## [EmailJS](https://www.emailjs.com/)\nEmailJS is a service designed to help send emails using client side technologies only. It utilises templates that can be programatically changed through variables that are supplied when making the request.\n\nUsing EmailJS with React is easy due to the [emailjs-com](https://www.npmjs.com/package/emailjs-com) NPM package. This will be used in the new website as it seems perfect for a small site.\n\n## Register and setup EmailJS\nTo use EmailJS you need to setup a free account, this gives you:\n* 200 emails a month\n* 2 templates\n* Data Size of 50kb\n* Limited contacts history\n*There are other plans but for this project the free plan is fine*\n\nOnce your account is created, navigate to the email services page and select \"Add new service\" - this authorises EmailJS to send emails on your behalf from your email account.\n\n![EmailJS providers](https://dev-to-uploads.s3.amazonaws.com/i/4obaenx2rrkkal20q03x.jpg)\n*EmailJS provider selection screen*\n\nNext we need to setup a template. Navigate to the Email Templates page and select “Create new template”, give it a name and an ID. You will then be taken to the template creation screen, from here you can configure exactly how you want the email to look, who you want it sent to and what you want the subject to be. \n\nMy template looks like this:\n![EmailJS template](https://dev-to-uploads.s3.amazonaws.com/i/0a131necp5kjb2e3mafe.jpg)\n\nand gives the output:\n![EmailJS output](https://dev-to-uploads.s3.amazonaws.com/i/diq52s3te7f65odv6yli.jpg)\n\nTo use variables which you can supply to EmailJS you use curly bracket notation. So for a variable called name I’d use `{{name}}`.\nFor more information on using variables visit [Dynamic variables in templates](https://www.emailjs.com/docs/user-guide/dynamic-variables-templates/)\n\n## Using EmailJS in a React.js application\nWe’re now ready to add EmailJS into our React application.\nSteps:\n1. Run `npm install -s emailjs-com`\n2. Follow the instructions on how to [use EmailJS with React](https://www.emailjs.com/docs/examples/reactjs/)\n\nYou’ll need to change the `YOUR*` variables to their actual values.\n\nTo get the SERVICE_ID and TEMPLATE_ID, go to the template overview and select `copy code` - this will show you their values.\n\n![EmailJS template copy code output](https://dev-to-uploads.s3.amazonaws.com/i/vma7o64vyxrog9c4ijnf.jpg)\n*An example output for the `copy code` overview*\n\nTo get the `USER_ID`, go to your account overview and click on the API KEYS tab.\n\n*Note: It’s best practice to keep these in a `.env` file and not commit them to your source repository.*\n\nSee how I've implemented using EmailJS in a React application on [my Github - messageForm.js](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).\n\n[Key snippet](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js#L48):\n```javascript\nemailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params, // the values in your EmailJS template\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        // Show success message\n        setFormSubmitted({ title: 'Message has been sent', paragraph: 'Mike will be in contact with you soon.' });\n      }, () => {\n        // Show error message\n        setFormSubmitted({ title: 'Error sending message, try again later', paragraph: 'Please contact Mike either by phone or email.' });\n      });\n```\n\nThat’s it! You are now able to send emails from your React application without requiring a backend server.\n\n## Round up\nIn this blog I’ve demonstrated how EmailJS can be used to send emails from React application with no requirement for a backend service.\n \nIn the next blog I will explore how Google reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\n\n\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<p>In the previous blog I had completed the social bar for the top of the website. Since then I've created the rest of the website and it now looks like the current implementation.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/yhwqk8md7bcicwq4nc87.jpg\" alt=\"Current implementation\">\n<em>Current implementation</em></p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/lcp0ks2st7e891vowq5v.jpg\" alt=\"New react implementation\">\n<em>New React implementation</em></p>\n<p>You can see the contact form has been implemented in the screenshot but it doesn’t work. One way to activate it would be to make an API request to a backend server and use a service such as <code>nodemailer</code> to send the email. As this will be a static site, another method of sending emails must be used. EmailJS to the rescue!</p>\n<h2><a href=\"https://www.emailjs.com/\">EmailJS</a></h2>\n<p>EmailJS is a service designed to help send emails using client side technologies only. It utilises templates that can be programatically changed through variables that are supplied when making the request.</p>\n<p>Using EmailJS with React is easy due to the <a href=\"https://www.npmjs.com/package/emailjs-com\">emailjs-com</a> NPM package. This will be used in the new website as it seems perfect for a small site.</p>\n<h2>Register and setup EmailJS</h2>\n<p>To use EmailJS you need to setup a free account, this gives you:</p>\n<ul>\n<li>200 emails a month</li>\n<li>2 templates</li>\n<li>Data Size of 50kb</li>\n<li>Limited contacts history</li>\n</ul>\n<p><em>There are other plans but for this project the free plan is fine</em></p>\n<p>Once your account is created, navigate to the email services page and select \"Add new service\" - this authorises EmailJS to send emails on your behalf from your email account.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/4obaenx2rrkkal20q03x.jpg\" alt=\"EmailJS providers\">\n<em>EmailJS provider selection screen</em></p>\n<p>Next we need to setup a template. Navigate to the Email Templates page and select “Create new template”, give it a name and an ID. You will then be taken to the template creation screen, from here you can configure exactly how you want the email to look, who you want it sent to and what you want the subject to be.</p>\n<p>My template looks like this:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/0a131necp5kjb2e3mafe.jpg\" alt=\"EmailJS template\"></p>\n<p>and gives the output:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/diq52s3te7f65odv6yli.jpg\" alt=\"EmailJS output\"></p>\n<p>To use variables which you can supply to EmailJS you use curly bracket notation. So for a variable called name I’d use <code>{{name}}</code>.\nFor more information on using variables visit <a href=\"https://www.emailjs.com/docs/user-guide/dynamic-variables-templates/\">Dynamic variables in templates</a></p>\n<h2>Using EmailJS in a React.js application</h2>\n<p>We’re now ready to add EmailJS into our React application.\nSteps:</p>\n<ol>\n<li>Run <code>npm install -s emailjs-com</code></li>\n<li>Follow the instructions on how to <a href=\"https://www.emailjs.com/docs/examples/reactjs/\">use EmailJS with React</a></li>\n</ol>\n<p>You’ll need to change the <code>YOUR*</code> variables to their actual values.</p>\n<p>To get the SERVICE_ID and TEMPLATE_ID, go to the template overview and select <code>copy code</code> - this will show you their values.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vma7o64vyxrog9c4ijnf.jpg\" alt=\"EmailJS template copy code output\">\n<em>An example output for the <code>copy code</code> overview</em></p>\n<p>To get the <code>USER_ID</code>, go to your account overview and click on the API KEYS tab.</p>\n<p><em>Note: It’s best practice to keep these in a <code>.env</code> file and not commit them to your source repository.</em></p>\n<p>See how I've implemented using EmailJS in a React application on <a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js\">my Github - messageForm.js</a>.</p>\n<p><a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js#L48\">Key snippet</a>:</p>\n<pre><code class=\"hljs language-javascript\">emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params, <span class=\"hljs-comment\">// the values in your EmailJS template</span>\n      process.env.EMAIL_JS_USER,\n    )\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ status }</span>) =></span> {\n        <span class=\"hljs-comment\">// Show success message</span>\n        setFormSubmitted({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Message has been sent'</span>, <span class=\"hljs-attr\">paragraph</span>: <span class=\"hljs-string\">'Mike will be in contact with you soon.'</span> });\n      }, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-comment\">// Show error message</span>\n        setFormSubmitted({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Error sending message, try again later'</span>, <span class=\"hljs-attr\">paragraph</span>: <span class=\"hljs-string\">'Please contact Mike either by phone or email.'</span> });\n      });</code></pre>\n<p>That’s it! You are now able to send emails from your React application without requiring a backend server.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve demonstrated how EmailJS can be used to send emails from React application with no requirement for a backend service.</p>\n<p>In the next blog I will explore how Google reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.</p>\n"},{"id":411344,"title":"Using Tailwind CSS, Google Fonts and React-icons with a Next.js application","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","publishedAt":"2020-07-27T20:55:52.557Z","devToSlug":"using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","devToPath":"/jameswallis/using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","devToURL":"https://dev.to/jameswallis/using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","commentsCount":0,"publicReactionsCount":22,"positiveReactionsCount":22,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--N8UrzmWi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/bhq5mokftis1sf7ln60n.png","tags":["javascript","react","nextjs","tutorial"],"canonical":"https://wallis.dev/blog/wallis-consultancy-rebuild-setup","collectionId":-1,"slug":"wallis-consultancy-rebuild-setup","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nAs discussed in the previous blog, this project will use Next.js and Tailwind CSS and will be based on the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example that is supplied by the Next.js team.\n\nIn this blog I will: \n1. Use `create-next-app` to create and setup a Next.js application with Tailwind CSS\n2. Add a Google Font to a Next.js application using a custom document\n3. Add Font Awesome icons through React-icons\n4. Create a React component and style it using Tailwind CSS. It will be styled to look identical to wallisconsultancy.co.uk website shown below\n\n![The current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/fu0ur32xm9z8gknu43ne.jpg)\n*The current Wallis Consultancy website*\n\n## Creating a Next.js application with Tailwind CSS\n\nCreating a Next.js application couldn't be easier as they have a wide range of starter apps available through their `create-next-app` utility. This project uses the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) as its base.\nThese are the steps I took to setup and run the starter app:\n1. Run `npx create-next-app --example with-tailwindcss wallisconsultancy`\n2. Install the required packages  `cd wallisconsultancy && npm install`\n3. Run `npm run dev` to start the development server\n4. Open `http://localhost:3000` in a browser to see the example running\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/h9hfgs9yxzvb0vikai61.jpg)\n\nThat’s it, we now have a running Next.js application and can use the Tailwind CSS styles without having to do any configuration thanks to the example Next.js provides.\n\n## Adding a Google font to Next.js\n\nThe current Wallis Consultancy website uses the \"Open Sans\" font that is available from Google Fonts. It needs to be added to the Next.js application to ensure that the website keeps the same appearance.\n\nNext.js exposes a `Head` component which can be added to a page to modify the `head` HTML tag on an individual basis. The font is required to be available throughout the website so instead of adding a `Head` to every page we can utilise a [custom _document.js](https://nextjs.org/docs/advanced-features/custom-document) and only add the Google Font into the `Head` in a single place.\n\n```javascript\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap\" rel=\"stylesheet\" />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n## Adding [react-icons](https://www.npmjs.com/package/react-icons)\nIn addition to the Next.js and Google Font setup I also need to add React Icons which includes Font Awesome for the various icons used on the page to the website.\n\nTo add [react-icons](https://www.npmjs.com/package/react-icons) to the project I ran `npm install -s react-icons` - React Icons provides the ability to use ES6 imports to include icons such as Font Awesome.\n\nTo use the [Thumbs Up](https://fontawesome.com/v4.7.0/icon/thumbs-up) icon you would add the following:\n```javascript\n// Import\nimport { FaThumbsUp } from 'react-icons/fa';\n\n// Usage\n<FaThumbsUp />\n```\n\n\n## Building a Component that uses Tailwind CSS\n*Note: Before beginning development I deleted the content from the `index.js` file in the `pages` directory and cleared out the `components` directory. So I had an `index.js` page that looks like*\n```javascript\nexport default function IndexPage() {\n  return (\n    <></>\n  )\n}\n```\n\nNow that the project is setup the first component can be created based on the Wallis Consultancy website. \n\nI split the current website up into sections to represent the different components that I would be building, they are not the final components as sections such as the `contact form` can be split into the `contact me` and `send me a message` components, but they give me a good overview to get started.\n\n![Wallis Consultancy split up into components](https://dev-to-uploads.s3.amazonaws.com/i/6ocm0s8cepaad1jztul2.jpg)\n*Splitting the website into components*\n\nFor this blog, I’ll only document my process creating the `social icon` bar at the top of the page in React using Tailwind CSS to avoid being overly repetitive. The source code for the other components can be viewed on [Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n### Social Icon Component\nI split the social icon component into three further sections:\n1. Call Me\n2. Email\n3. Social icons (currently only Linkedin)\n\nImportant style aspects to recreate:\n* Background colour is `#fbfbfb`\n* Font colour is `#999`\n* Font used is `Open Sans` - Can get this from Google fonts\n* Border bottom is `1px solid #e9e9e9`\n* Icons used are from Font Awesome and are\n  * Phone - `fa-phone`\n  * Email - `fa-envelope`\n  * LinkedIn - `fa-linkedin` - has a `border: 2px solid #999` and full `border-radius`\n\n![Finished Social Bar](https://dev-to-uploads.s3.amazonaws.com/i/l6itp6yz0e5m9j6f8vx9.png)\n*The Finished Social Bar*\n\nLooks pretty similar! It is only a simple component so the code is simple too - and with Tailwind CSS there are no complex classes to match with elements.\n\nThe next two snippets show the minimal effort required to style a component using Tailwind CSS, note the `className` attribute given to the `div` in the `SocialBar` component and the `a` and `p` tags in the `Email` component.\n\nSocialBar.js:\n```javascript\nimport Phone from './phone'\nimport Email from './email'\nimport SocialIcons from './socialIcons'\n\nexport default function SocialBar() {\n  return (\n    // bg-gray-fb === Background-color defined in Tailwind config\n    // w-screen === width: 100vw;\n    // font-open-sans === Custom font defined in Tailwind Config\n    <div\n      className=\"bg-gray-fb flex items-center w-screen justify-between px-8 text-gray-999 text-sm font-open-sans border-b border-gray-e9\"\n    >\n      <div className=\"flex\">\n        <Phone />\n        <Email />\n      </div>\n      <div>\n        <SocialIcons />\n      </div>\n    </div>\n  )\n}\n```\n\nEmail.js:\n```javascript\n// The Font Awesome Envelope Icon\nimport { FaEnvelope } from 'react-icons/fa';\n\nexport default function Email() {\n  return (\n    // flex === display: flex;\n    // items-center === align-items: center;\n    // m-2 === margin: 0.5rem;\n    <a href=\"mailto:mw@wallisconsultancy.co.uk\"\nclassName=\"flex items-center m-2\">\n      <FaEnvelope />\n      // ml-2 === margin-left: 0.5rem;\n      <p className=\"ml-2\">\n        Email: mw@wallisconsultancy.co.uk\n      </p>\n    </a>\n  )\n}\n```\n\nYou can see in the snippets a few custom classes that are defined in my `tailwind.config.js` such as the `font-gray-999`.\n\n```javascript\nmodule.exports = {\n  purge: ['./components/**/*.{js,ts,jsx,tsx}', './pages/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      textColor: {\n        'gray-999': '#999',\n      },\n      backgroundColor: {\n        // Shown in the SocialBar component as bg-gray-fb\n        'gray-fb': '#fbfbfb',\n      },\n      borderColor: {\n        'gray-e9': '#e9e9e9',\n        'gray-999': '#999',\n      },\n      fontFamily: {\n        // Shown in the SocialBar component as font-open-sans\n        'open-sans': '\"Open Sans\", Helvetica, Arial, sans-serif',\n      },\n    },\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nThe other components were implemented in the same way and can be seen [on Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n## Round up\nIn this blog I’ve shown how to setup a Next.js application with Tailwind CSS, Google Fonts and React-icons. I provided two example components demonstrating how they can be used together. \n\nI highly recommend you try out the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example from Next.js as it provides a nice introduction to both frameworks.\n\nIn the next blog in this series I’ll be using [EmailJS](https://www.emailjs.com/) to power the contact form to remove the requirement for a backend server.\n\n\n\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<p>As discussed in the previous blog, this project will use Next.js and Tailwind CSS and will be based on the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> example that is supplied by the Next.js team.</p>\n<p>In this blog I will:</p>\n<ol>\n<li>Use <code>create-next-app</code> to create and setup a Next.js application with Tailwind CSS</li>\n<li>Add a Google Font to a Next.js application using a custom document</li>\n<li>Add Font Awesome icons through React-icons</li>\n<li>Create a React component and style it using Tailwind CSS. It will be styled to look identical to wallisconsultancy.co.uk website shown below</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/fu0ur32xm9z8gknu43ne.jpg\" alt=\"The current Wallis Consultancy website\">\n<em>The current Wallis Consultancy website</em></p>\n<h2>Creating a Next.js application with Tailwind CSS</h2>\n<p>Creating a Next.js application couldn't be easier as they have a wide range of starter apps available through their <code>create-next-app</code> utility. This project uses the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> as its base.\nThese are the steps I took to setup and run the starter app:</p>\n<ol>\n<li>Run <code>npx create-next-app --example with-tailwindcss wallisconsultancy</code></li>\n<li>Install the required packages  <code>cd wallisconsultancy &#x26;&#x26; npm install</code></li>\n<li>Run <code>npm run dev</code> to start the development server</li>\n<li>Open <code>http://localhost:3000</code> in a browser to see the example running</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/h9hfgs9yxzvb0vikai61.jpg\" alt=\"Alt Text\"></p>\n<p>That’s it, we now have a running Next.js application and can use the Tailwind CSS styles without having to do any configuration thanks to the example Next.js provides.</p>\n<h2>Adding a Google font to Next.js</h2>\n<p>The current Wallis Consultancy website uses the \"Open Sans\" font that is available from Google Fonts. It needs to be added to the Next.js application to ensure that the website keeps the same appearance.</p>\n<p>Next.js exposes a <code>Head</code> component which can be added to a page to modify the <code>head</code> HTML tag on an individual basis. The font is required to be available throughout the website so instead of adding a <code>Head</code> to every page we can utilise a <a href=\"https://nextjs.org/docs/advanced-features/custom-document\">custom _document.js</a> and only add the Google Font into the <code>Head</code> in a single place.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Document, {\n  Html, Head, Main, NextScript,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/document'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Document</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInitialProps</span>(<span class=\"hljs-params\">ctx</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> Document.getInitialProps(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&#x26;display=swap\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Main</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NextScript</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Html</span>></span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyDocument;</code></pre>\n<h2>Adding <a href=\"https://www.npmjs.com/package/react-icons\">react-icons</a></h2>\n<p>In addition to the Next.js and Google Font setup I also need to add React Icons which includes Font Awesome for the various icons used on the page to the website.</p>\n<p>To add <a href=\"https://www.npmjs.com/package/react-icons\">react-icons</a> to the project I ran <code>npm install -s react-icons</code> - React Icons provides the ability to use ES6 imports to include icons such as Font Awesome.</p>\n<p>To use the <a href=\"https://fontawesome.com/v4.7.0/icon/thumbs-up\">Thumbs Up</a> icon you would add the following:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Import</span>\n<span class=\"hljs-keyword\">import</span> { FaThumbsUp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-icons/fa'</span>;\n\n<span class=\"hljs-comment\">// Usage</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FaThumbsUp</span> /></span></span></code></pre>\n<h2>Building a Component that uses Tailwind CSS</h2>\n<p><em>Note: Before beginning development I deleted the content from the <code>index.js</code> file in the <code>pages</code> directory and cleared out the <code>components</code> directory. So I had an <code>index.js</code> page that looks like</em></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IndexPage</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span><span class=\"hljs-tag\">&#x3C;/></span></span>\n  )\n}</code></pre>\n<p>Now that the project is setup the first component can be created based on the Wallis Consultancy website.</p>\n<p>I split the current website up into sections to represent the different components that I would be building, they are not the final components as sections such as the <code>contact form</code> can be split into the <code>contact me</code> and <code>send me a message</code> components, but they give me a good overview to get started.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/6ocm0s8cepaad1jztul2.jpg\" alt=\"Wallis Consultancy split up into components\">\n<em>Splitting the website into components</em></p>\n<p>For this blog, I’ll only document my process creating the <code>social icon</code> bar at the top of the page in React using Tailwind CSS to avoid being overly repetitive. The source code for the other components can be viewed on <a href=\"https://github.com/james-wallis/wallisconsultancy/tree/master/components\">Github</a>.</p>\n<h3>Social Icon Component</h3>\n<p>I split the social icon component into three further sections:</p>\n<ol>\n<li>Call Me</li>\n<li>Email</li>\n<li>Social icons (currently only Linkedin)</li>\n</ol>\n<p>Important style aspects to recreate:</p>\n<ul>\n<li>Background colour is <code>#fbfbfb</code></li>\n<li>Font colour is <code>#999</code></li>\n<li>Font used is <code>Open Sans</code> - Can get this from Google fonts</li>\n<li>Border bottom is <code>1px solid #e9e9e9</code></li>\n<li>Icons used are from Font Awesome and are\n<ul>\n<li>Phone - <code>fa-phone</code></li>\n<li>Email - <code>fa-envelope</code></li>\n<li>LinkedIn - <code>fa-linkedin</code> - has a <code>border: 2px solid #999</code> and full <code>border-radius</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/l6itp6yz0e5m9j6f8vx9.png\" alt=\"Finished Social Bar\">\n<em>The Finished Social Bar</em></p>\n<p>Looks pretty similar! It is only a simple component so the code is simple too - and with Tailwind CSS there are no complex classes to match with elements.</p>\n<p>The next two snippets show the minimal effort required to style a component using Tailwind CSS, note the <code>className</code> attribute given to the <code>div</code> in the <code>SocialBar</code> component and the <code>a</code> and <code>p</code> tags in the <code>Email</code> component.</p>\n<p>SocialBar.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Phone <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./phone'</span>\n<span class=\"hljs-keyword\">import</span> Email <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./email'</span>\n<span class=\"hljs-keyword\">import</span> SocialIcons <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./socialIcons'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SocialBar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// bg-gray-fb === Background-color defined in Tailwind config</span>\n    <span class=\"hljs-comment\">// w-screen === width: 100vw;</span>\n    <span class=\"hljs-comment\">// font-open-sans === Custom font defined in Tailwind Config</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"bg-gray-fb flex items-center w-screen justify-between px-8 text-gray-999 text-sm font-open-sans border-b border-gray-e9\"</span>\n    ></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Phone</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Email</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">SocialIcons</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )\n}</code></pre>\n<p>Email.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// The Font Awesome Envelope Icon</span>\n<span class=\"hljs-keyword\">import</span> { FaEnvelope } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-icons/fa'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Email</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// flex === display: flex;</span>\n    <span class=\"hljs-comment\">// items-center === align-items: center;</span>\n    <span class=\"hljs-comment\">// m-2 === margin: 0.5rem;</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:mw@wallisconsultancy.co.uk\"</span>\n<span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex items-center m-2\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FaEnvelope</span> /></span>\n      // ml-2 === margin-left: 0.5rem;\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"ml-2\"</span>></span>\n        Email: mw@wallisconsultancy.co.uk\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n  )\n}</code></pre>\n<p>You can see in the snippets a few custom classes that are defined in my <code>tailwind.config.js</code> such as the <code>font-gray-999</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">purge</span>: [<span class=\"hljs-string\">'./components/**/*.{js,ts,jsx,tsx}'</span>, <span class=\"hljs-string\">'./pages/**/*.{js,ts,jsx,tsx}'</span>],\n  <span class=\"hljs-attr\">theme</span>: {\n    <span class=\"hljs-attr\">extend</span>: {\n      <span class=\"hljs-attr\">textColor</span>: {\n        <span class=\"hljs-string\">'gray-999'</span>: <span class=\"hljs-string\">'#999'</span>,\n      },\n      <span class=\"hljs-attr\">backgroundColor</span>: {\n        <span class=\"hljs-comment\">// Shown in the SocialBar component as bg-gray-fb</span>\n        <span class=\"hljs-string\">'gray-fb'</span>: <span class=\"hljs-string\">'#fbfbfb'</span>,\n      },\n      <span class=\"hljs-attr\">borderColor</span>: {\n        <span class=\"hljs-string\">'gray-e9'</span>: <span class=\"hljs-string\">'#e9e9e9'</span>,\n        <span class=\"hljs-string\">'gray-999'</span>: <span class=\"hljs-string\">'#999'</span>,\n      },\n      <span class=\"hljs-attr\">fontFamily</span>: {\n        <span class=\"hljs-comment\">// Shown in the SocialBar component as font-open-sans</span>\n        <span class=\"hljs-string\">'open-sans'</span>: <span class=\"hljs-string\">'\"Open Sans\", Helvetica, Arial, sans-serif'</span>,\n      },\n    },\n  },\n  <span class=\"hljs-attr\">variants</span>: {},\n  <span class=\"hljs-attr\">plugins</span>: [],\n}</code></pre>\n<p>The other components were implemented in the same way and can be seen <a href=\"https://github.com/james-wallis/wallisconsultancy/tree/master/components\">on Github</a>.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve shown how to setup a Next.js application with Tailwind CSS, Google Fonts and React-icons. I provided two example components demonstrating how they can be used together.</p>\n<p>I highly recommend you try out the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> example from Next.js as it provides a nice introduction to both frameworks.</p>\n<p>In the next blog in this series I’ll be using <a href=\"https://www.emailjs.com/\">EmailJS</a> to power the contact form to remove the requirement for a backend server.</p>\n"},{"id":410482,"title":"Modernising an existing Bootstrap website using Next.js and Tailwind CSS","description":"In this introductory article I discuss why I modernised the Wallis Consultancy website by rebuilding it from the ground up using Next.js and Tailwind CSS.","publishedAt":"2020-07-26T22:05:00.071Z","devToSlug":"modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","devToPath":"/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","devToURL":"https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","commentsCount":0,"publicReactionsCount":18,"positiveReactionsCount":18,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--zoKDwtp1--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/j8x0kwe2to4woy3vsfys.png","tags":["javascript","webdev","nextjs","showdev"],"canonical":"https://wallis.dev/blog/wallis-consultancy-rebuild-intro","collectionId":-1,"slug":"wallis-consultancy-rebuild-intro","markdown":"---\ndescription: \"In this introductory article I discuss why I modernised the Wallis Consultancy website by rebuilding it from the ground up using Next.js and Tailwind CSS.\"\n---\n*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n# Motivation\n\nWallisconsultancy.co.uk is a website that I developed in 2016, just after I finished my first year at the University of Portsmouth. One of my modules was a Web Fundamentals course which explained the basics of HTML & CSS with a sprinkling of JavaScript at the end. I wanted a summer project with the aim that I would be a much better HTML and CSS developer next year when I was asked to build a web-based dashboard as a part of the Web Programming coursework.\n\n![Original Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/pztz2awi7nptq69pykhc.jpg)\n*The original Wallis Consultancy website*\n\n\nThe original website was written using in 2011 in HTML and CSS using a PHP backend. As of 2016 the design was outdated and was not responsive rendering it unusable for anyone on a device with a small screen. Over the summer I rewrote the site using HTML, CSS and the Bootstrap framework and gave it a PHP backend so that I could reuse certain aspects of the page and make a general layout. Given that it was my first professional website, I was pretty happy with the result. In 2018 I moved it from a GoDaddy server to a Docker container to make it cheaper to run and easier for me to maintain.\n\n![Current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/60cw56z459foymy2v9vy.jpg)\n*The current Wallis Consultancy website*\n\n\nIt’s now 2020 and I have been requested to make changes to the website. While it can be said that it’s working perfectly in its current condition, adding new pages and subtle features are difficult due to its reliance on HTML. Additionally, my skillset has improved know that this site will benefit from my experience using Next.js, a React.js framework that specialises in building server rendered, SEO friendly sites. In addition, as uses a Bootstrap Template, it came with a lot of CSS and JavaScript that is unused and in no way optimised. Next.js does a nice job of minifying the JavaScript and Tailwind CSS, a CSS framework, will help to reduce the amount of CSS I need to create and remove anything that is unused.\n\n## Why Next.js\nWhen a website is built using React.js the clients browser is required to run JavaScript and construct the page itself, this is bad for two reasons. \n1. There might be a few seconds before the website can be used by the client.  - Bad user experience.\n1. For SEO - although search engines are being improved to handle JavaScript applications there is no guarantee that the search bot will render the application correctly. For this reason it is still preferred to send static HTML to the client.\n\nNext.js solves these problems by statically generating and server-rendering a React application meaning we can send rendered HTML to the client as opposed to large JavaScript files. \n\nNext.js has other noteworthy features such as:\n* Automatic Code Splitting - Rendered pages only contain the JavaScript they need, rather than a single JavaScript file for all pages.\n* Built in Routing - To create a new page, just add a file in the `pages` folder\n* Prefetching - Using the `Link` component we can tell Next what pages the user is able to visit, Next responds by pre-fetching the content required for the page in the background so there is no load times between pages.\n* A Next app can be exported to static HTML - This is a huge feature that was released in [Next.js 9.3](https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support) websites to be run through Github pages.\n\n[Next.js](https://nextjs.org/)\n\n## Why Tailwind CSS\nTailwind CSS describes itself as a utility-first CSS framework for rapidly building custom designs. It works by having an existing library of CSS classes that you can add to a React.js component using the `className` prop. To add a height of 100% you add the class `h-full` to the component, this is an improvement to giving a component a classname and then opening a CSS file to define what you want the class to do - it makes styling a component a fast process.\n\nFor responsive sites, there exists the intuitive `{screen}:` prefix which makes it easy to control responsive classes, for a desktop all that is the `lg` prefix next to the styling e.g. `lg:h-full` .\n\nThe default configuration can be overridden using a `tailwind.config.js` file and additional classes can be added to the framework so that there is never a need to use the  `style`  attribute.\n\nFinally, TailwindCSS.com has a search utility that makes finding a class name extremely easy. If you need to know how to use a border radius, you can search it on the website and within seconds make the change to your code. This means that there is nothing to learn when picking up Tailwind CSS for the first time as its so easy to find on their website.\n![](Rewriting%20HTMLCSS%20Bootstrap%20website%20in%20React%20using%20Next.js%20and%20hosting%20on%20Github%20Pages%20(1)/9C20D553-A94C-40D6-9A9C-1FC7CD366F00.png)\n\n[Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs](https://tailwindcss.com/)\n\n## The Plan\nIn the next few posts, I will rewrite wallisconsultancy.co.uk using Next.js and TailwindCSS in order to achieve the following goals:\n* Make it easier to maintain\n* Enhance the SEO using Next.js third-party libraries such as next-seo and next-image-optimizer \n* Host on Github pages to save money\n* Add a Recaptcha to reduce the amount of email spam received\nAnd I’ll do all this while ensuring that the look of the page stays the same - with a few subtle tweaks.\n\n## Round up\nIn this blog I introduced wallisconsultancy.co.uk and explained that over the next few blogs I am going to rebuild it using Next.js and Tailwind CSS.\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h1>Motivation</h1>\n<p>Wallisconsultancy.co.uk is a website that I developed in 2016, just after I finished my first year at the University of Portsmouth. One of my modules was a Web Fundamentals course which explained the basics of HTML &#x26; CSS with a sprinkling of JavaScript at the end. I wanted a summer project with the aim that I would be a much better HTML and CSS developer next year when I was asked to build a web-based dashboard as a part of the Web Programming coursework.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/pztz2awi7nptq69pykhc.jpg\" alt=\"Original Wallis Consultancy website\">\n<em>The original Wallis Consultancy website</em></p>\n<p>The original website was written using in 2011 in HTML and CSS using a PHP backend. As of 2016 the design was outdated and was not responsive rendering it unusable for anyone on a device with a small screen. Over the summer I rewrote the site using HTML, CSS and the Bootstrap framework and gave it a PHP backend so that I could reuse certain aspects of the page and make a general layout. Given that it was my first professional website, I was pretty happy with the result. In 2018 I moved it from a GoDaddy server to a Docker container to make it cheaper to run and easier for me to maintain.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/60cw56z459foymy2v9vy.jpg\" alt=\"Current Wallis Consultancy website\">\n<em>The current Wallis Consultancy website</em></p>\n<p>It’s now 2020 and I have been requested to make changes to the website. While it can be said that it’s working perfectly in its current condition, adding new pages and subtle features are difficult due to its reliance on HTML. Additionally, my skillset has improved know that this site will benefit from my experience using Next.js, a React.js framework that specialises in building server rendered, SEO friendly sites. In addition, as uses a Bootstrap Template, it came with a lot of CSS and JavaScript that is unused and in no way optimised. Next.js does a nice job of minifying the JavaScript and Tailwind CSS, a CSS framework, will help to reduce the amount of CSS I need to create and remove anything that is unused.</p>\n<h2>Why Next.js</h2>\n<p>When a website is built using React.js the clients browser is required to run JavaScript and construct the page itself, this is bad for two reasons.</p>\n<ol>\n<li>There might be a few seconds before the website can be used by the client.  - Bad user experience.</li>\n<li>For SEO - although search engines are being improved to handle JavaScript applications there is no guarantee that the search bot will render the application correctly. For this reason it is still preferred to send static HTML to the client.</li>\n</ol>\n<p>Next.js solves these problems by statically generating and server-rendering a React application meaning we can send rendered HTML to the client as opposed to large JavaScript files.</p>\n<p>Next.js has other noteworthy features such as:</p>\n<ul>\n<li>Automatic Code Splitting - Rendered pages only contain the JavaScript they need, rather than a single JavaScript file for all pages.</li>\n<li>Built in Routing - To create a new page, just add a file in the <code>pages</code> folder</li>\n<li>Prefetching - Using the <code>Link</code> component we can tell Next what pages the user is able to visit, Next responds by pre-fetching the content required for the page in the background so there is no load times between pages.</li>\n<li>A Next app can be exported to static HTML - This is a huge feature that was released in <a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">Next.js 9.3</a> websites to be run through Github pages.</li>\n</ul>\n<p><a href=\"https://nextjs.org/\">Next.js</a></p>\n<h2>Why Tailwind CSS</h2>\n<p>Tailwind CSS describes itself as a utility-first CSS framework for rapidly building custom designs. It works by having an existing library of CSS classes that you can add to a React.js component using the <code>className</code> prop. To add a height of 100% you add the class <code>h-full</code> to the component, this is an improvement to giving a component a classname and then opening a CSS file to define what you want the class to do - it makes styling a component a fast process.</p>\n<p>For responsive sites, there exists the intuitive <code>{screen}:</code> prefix which makes it easy to control responsive classes, for a desktop all that is the <code>lg</code> prefix next to the styling e.g. <code>lg:h-full</code> .</p>\n<p>The default configuration can be overridden using a <code>tailwind.config.js</code> file and additional classes can be added to the framework so that there is never a need to use the  <code>style</code>  attribute.</p>\n<p>Finally, TailwindCSS.com has a search utility that makes finding a class name extremely easy. If you need to know how to use a border radius, you can search it on the website and within seconds make the change to your code. This means that there is nothing to learn when picking up Tailwind CSS for the first time as its so easy to find on their website.\n<img src=\"Rewriting%20HTMLCSS%20Bootstrap%20website%20in%20React%20using%20Next.js%20and%20hosting%20on%20Github%20Pages%20(1)/9C20D553-A94C-40D6-9A9C-1FC7CD366F00.png\" alt=\"\"></p>\n<p><a href=\"https://tailwindcss.com/\">Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs</a></p>\n<h2>The Plan</h2>\n<p>In the next few posts, I will rewrite wallisconsultancy.co.uk using Next.js and TailwindCSS in order to achieve the following goals:</p>\n<ul>\n<li>Make it easier to maintain</li>\n<li>Enhance the SEO using Next.js third-party libraries such as next-seo and next-image-optimizer</li>\n<li>Host on Github pages to save money</li>\n<li>Add a Recaptcha to reduce the amount of email spam received</li>\n</ul>\n<p>And I’ll do all this while ensuring that the look of the page stays the same - with a few subtle tweaks.</p>\n<h2>Round up</h2>\n<p>In this blog I introduced wallisconsultancy.co.uk and explained that over the next few blogs I am going to rebuild it using Next.js and Tailwind CSS.</p>\n"}]